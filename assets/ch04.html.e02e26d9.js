import{_ as e,e as t}from"./app.8458a4b3.js";import{_ as a}from"./00012.41024b28.js";const s={},n=t('<h1 id="\u7B2C-4-\u7AE0-\u6A21\u5757\u5E94\u8BE5\u662F\u6DF1\u7684" tabindex="-1"><a class="header-anchor" href="#\u7B2C-4-\u7AE0-\u6A21\u5757\u5E94\u8BE5\u662F\u6DF1\u7684" aria-hidden="true">#</a> \u7B2C 4 \u7AE0 \u6A21\u5757\u5E94\u8BE5\u662F\u6DF1\u7684</h1><blockquote><p>Chapter 4 Modules Should Be Deep</p></blockquote><blockquote><p>One of the most important techniques for managing software complexity is to design systems so that developers only need to face a small fraction of the overall complexity at any given time. This approach is called <em>modular design</em>, and this chapter presents its basic principles.</p></blockquote><p>\u7BA1\u7406\u8F6F\u4EF6\u590D\u6742\u6027\u6700\u91CD\u8981\u7684\u6280\u672F\u4E4B\u4E00\u5C31\u662F\u8BBE\u8BA1\u7CFB\u7EDF\uFF0C\u4EE5\u4FBF\u5F00\u53D1\u4EBA\u5458\u5728\u4EFB\u4F55\u7ED9\u5B9A\u65F6\u95F4 <strong>\u53EA\u9700\u8981\u9762\u5BF9\u6574\u4F53\u590D\u6742\u6027\u7684\u4E00\u5C0F\u90E8\u5206</strong>\u3002\u8FD9\u79CD\u65B9\u6CD5\u79F0\u4E3A\u6A21\u5757\u5316\u8BBE\u8BA1\uFF0C\u672C\u7AE0\u4ECB\u7ECD\u5176\u57FA\u672C\u539F\u7406\u3002</p><h2 id="_4-1-modular-design-\u6A21\u5757\u5316\u8BBE\u8BA1" tabindex="-1"><a class="header-anchor" href="#_4-1-modular-design-\u6A21\u5757\u5316\u8BBE\u8BA1" aria-hidden="true">#</a> 4.1 Modular design \u6A21\u5757\u5316\u8BBE\u8BA1</h2><blockquote><p>In modular design, a software system is decomposed into a collection of modules that are relatively independent. Modules can take many forms, such as classes, subsystems, or services. In an ideal world, each module would be completely independent of the others: a developer could work in any of the modules without knowing anything about any of the other modules. In this world, the complexity of a system would be the complexity of its worst module.</p></blockquote><p>\u5728\u6A21\u5757\u5316\u8BBE\u8BA1\u4E2D\uFF0C\u8F6F\u4EF6\u7CFB\u7EDF\u88AB\u5206\u89E3\u4E3A\u76F8\u5BF9\u72EC\u7ACB\u7684\u6A21\u5757\u96C6\u5408\u3002\u6A21\u5757\u53EF\u4EE5\u91C7\u7528\u591A\u79CD\u5F62\u5F0F\uFF0C\u4F8B\u5982\u7C7B\uFF0C\u5B50\u7CFB\u7EDF\u6216\u670D\u52A1\u3002\u5728\u7406\u60F3\u7684\u4E16\u754C\u4E2D\uFF0C\u6BCF\u4E2A\u6A21\u5757\u90FD\u5C06\u5B8C\u5168\u72EC\u7ACB\u4E8E\u5176\u4ED6\u6A21\u5757\uFF1A\u5F00\u53D1\u4EBA\u5458\u53EF\u4EE5\u5728\u4EFB\u4F55\u6A21\u5757\u4E2D\u5DE5\u4F5C\uFF0C\u800C\u65E0\u9700\u4E86\u89E3\u4EFB\u4F55\u5176\u4ED6\u6A21\u5757\u3002\u5728\u8FD9\u4E2A\u4E16\u754C\u4E0A\uFF0C\u7CFB\u7EDF\u7684\u590D\u6742\u6027\u5C31\u662F\u6700\u7CDF\u7CD5\u7684\u6A21\u5757\u7684\u590D\u6742\u6027\u3002</p><blockquote><p>Unfortunately, this ideal is not achievable. Modules must work together by calling each others\u2019s functions or methods. As a result, modules must know something about each other. There will be dependencies between the modules: if one module changes, other modules may need to change to match. For example, the arguments for a method create a dependency between the method and any code that invokes the method. If the required arguments change, all invocations of the method must be modified to conform to the new signature. Dependencies can take many other forms, and they can be quite subtle. The goal of modular design is to minimize the dependencies between modules.</p></blockquote><p>\u4E0D\u5E78\u7684\u662F\uFF0C\u8FD9\u79CD\u7406\u60F3\u662F\u65E0\u6CD5\u5B9E\u73B0\u7684\u3002\u6A21\u5757\u5FC5\u987B\u901A\u8FC7\u8C03\u7528\u5F7C\u6B64\u7684\u51FD\u6570\u6216\u65B9\u6CD5\u6765\u534F\u540C\u5DE5\u4F5C\u3002\u7ED3\u679C\uFF0C<em><strong>\u6A21\u5757\u5FC5\u987B\u76F8\u4E92\u4E86\u89E3\u3002\u6A21\u5757\u4E4B\u95F4\u5C06\u5B58\u5728\u4F9D\u8D56\u5173\u7CFB</strong></em>\uFF1A\u5982\u679C\u4E00\u4E2A\u6A21\u5757\u53D1\u751F\u66F4\u6539\uFF0C\u5219\u53EF\u80FD\u9700\u8981\u66F4\u6539\u5176\u4ED6\u6A21\u5757\u4EE5\u8FDB\u884C\u5339\u914D\u3002\u4F8B\u5982\uFF0C\u65B9\u6CD5\u7684\u53C2\u6570\u5728\u65B9\u6CD5\u4E0E\u8C03\u7528\u8BE5\u65B9\u6CD5\u7684\u4EFB\u4F55\u4EE3\u7801\u4E4B\u95F4\u521B\u5EFA\u4F9D\u8D56\u5173\u7CFB\u3002\u5982\u679C\u5FC5\u9700\u7684\u53C2\u6570\u66F4\u6539\uFF0C\u5219\u5FC5\u987B\u4FEE\u6539\u8BE5\u65B9\u6CD5\u7684\u6240\u6709\u8C03\u7528\u4EE5\u7B26\u5408\u65B0\u7684\u7B7E\u540D\u3002\u4F9D\u8D56\u5173\u7CFB\u53EF\u4EE5\u91C7\u7528\u8BB8\u591A\u5176\u4ED6\u5F62\u5F0F\uFF0C\u5E76\u4E14\u5B83\u4EEC\u53EF\u80FD\u975E\u5E38\u5FAE\u5999\u3002\u6A21\u5757\u5316\u8BBE\u8BA1\u7684\u76EE\u6807\u662F\u6700\u5927\u7A0B\u5EA6\u5730 <em><strong>\u51CF\u5C11\u6A21\u5757\u4E4B\u95F4\u7684\u4F9D\u8D56\u6027</strong></em>\u3002</p><blockquote><p>In order to manage dependencies, we think of each module in two parts: an interface and an <em>implementation</em>. The interface consists of everything that a developer working in a different module must know in order to use the given module. Typically, the interface describes what the module does but not how it does it. The implementation consists of the code that carries out the promises made by the interface. A developer working in a particular module must understand the interface and implementation of that module, plus the interfaces of any other modules invoked by the given module. A developer should not need to understand the implementations of modules other than the one he or she is working in.</p></blockquote><p>\u4E3A\u4E86\u7BA1\u7406\u4F9D\u8D56\u5173\u7CFB\uFF0C\u6211\u4EEC\u5C06\u6BCF\u4E2A\u6A21\u5757\u5206\u4E3A\u4E24\u4E2A\u90E8\u5206\uFF1A\u63A5\u53E3\u548C\u5B9E\u73B0\u3002\u63A5\u53E3\u5305\u542B\u4F7F\u7528\u5176\u4ED6\u6A21\u5757\u7684\u5F00\u53D1\u4EBA\u5458\u5FC5\u987B\u77E5\u9053\u7684\u6240\u6709\u5185\u5BB9\uFF0C\u624D\u80FD\u4F7F\u7528\u7ED9\u5B9A\u7684\u6A21\u5757\u3002\u901A\u5E38\uFF0C\u63A5\u53E3\u63CF\u8FF0\u6A21\u5757\u505A\u4EC0\u4E48\uFF0C\u800C\u4E0D\u63CF\u8FF0\u6A21\u5757\u5982\u4F55\u505A\u3002\u8BE5\u5B9E\u73B0\u7531\u6267\u884C\u63A5\u53E3\u6240\u627F\u8BFA\u7684\u4EE3\u7801\u7EC4\u6210\u3002\u5728\u7279\u5B9A\u6A21\u5757\u4E2D\u5DE5\u4F5C\u7684\u5F00\u53D1\u4EBA\u5458\u5FC5\u987B\u4E86\u89E3\u8BE5\u6A21\u5757\u7684\u63A5\u53E3\u548C\u5B9E\u73B0\uFF0C\u4EE5\u53CA\u7531\u7ED9\u5B9A\u6A21\u5757\u8C03\u7528\u7684\u4EFB\u4F55\u5176\u4ED6\u6A21\u5757\u7684\u63A5\u53E3\u3002\u9664\u4E86\u6B63\u5728\u4F7F\u7528\u7684\u6A21\u5757\u4EE5\u5916\uFF0C\u5F00\u53D1\u4EBA\u5458\u65E0\u9700\u4E86\u89E3\u5176\u4ED6\u6A21\u5757\u7684\u5B9E\u73B0\u3002</p><blockquote><p>Consider a module that implements balanced trees. The module probably contains sophisticated code for ensuring that the tree remains balanced. However, this complexity is not visible to users of the module. Users see a relatively simple interface for invoking operations to insert, remove, and fetch nodes in the tree. To invoke an insert operation, the caller need only provide the key and value for the new node; the mechanisms for traversing the tree and splitting nodes are not visible in the interface.</p></blockquote><p>\u8003\u8651\u4E00\u4E2A\u5B9E\u73B0\u5E73\u8861\u6811\u7684\u6A21\u5757\u3002\u8BE5\u6A21\u5757\u53EF\u80FD\u5305\u542B\u590D\u6742\u7684\u4EE3\u7801\uFF0C\u4EE5\u786E\u4FDD\u6811\u4FDD\u6301\u5E73\u8861\u3002\u4F46\u662F\uFF0C\u6B64\u590D\u6742\u6027\u5BF9\u4E8E\u6A21\u5757\u7528\u6237\u800C\u8A00\u662F\u4E0D\u53EF\u89C1\u7684\u3002\u7528\u6237\u53EF\u4EE5\u770B\u5230\u4E00\u4E2A\u76F8\u5BF9\u7B80\u5355\u7684\u63A5\u53E3\uFF0C\u7528\u4E8E\u8C03\u7528\u5728\u6811\u4E2D\u63D2\u5165\uFF0C\u5220\u9664\u548C\u83B7\u53D6\u8282\u70B9\u7684\u64CD\u4F5C\u3002\u8981\u8C03\u7528\u63D2\u5165\u64CD\u4F5C\uFF0C\u8C03\u7528\u8005\u53EA\u9700\u63D0\u4F9B\u65B0\u8282\u70B9\u7684\u952E\u548C\u503C\u5373\u53EF\u3002\u904D\u5386\u6811\u548C\u62C6\u5206\u8282\u70B9\u7684\u673A\u5236\u5728\u63A5\u53E3\u4E2D\u4E0D\u53EF\u89C1\u3002</p><p>For the purposes of this book, a module is any unit of code that has an interface and an implementation. Each class in an object-oriented programming language is a module. Methods within a class, or functions in a language that isn\u2019t object-oriented, can also be thought of as modules: each of these has an interface and an implementation, and modular design techniques can be applied to them. Higher-level subsystems and services are also modules; their interfaces may take different forms, such as kernel calls or HTTP requests. Much of the discussion about modular design in this book focuses on designing classes, but the techniques and concepts apply to other kinds of modules as well.</p><p>\u5C31\u672C\u4E66\u800C\u8A00\uFF0C\u6A21\u5757\u662F\u5177\u6709\u63A5\u53E3\u548C\u5B9E\u73B0\u7684\u4EFB\u4F55\u4EE3\u7801\u5355\u5143\u3002\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u8BED\u8A00\u4E2D\u7684\u6BCF\u4E2A\u7C7B\u90FD\u662F\u4E00\u4E2A\u6A21\u5757\u3002\u7C7B\u4E2D\u7684\u65B9\u6CD5\u6216\u975E\u9762\u5411\u5BF9\u8C61\u8BED\u8A00\u4E2D\u7684\u51FD\u6570\u4E5F\u53EF\u4EE5\u89C6\u4E3A\u6A21\u5757\uFF1A\u6BCF\u4E2A\u6A21\u5757\u90FD\u6709\u4E00\u4E2A\u63A5\u53E3\u548C\u4E00\u4E2A\u5B9E\u73B0\uFF0C\u5E76\u4E14\u53EF\u4EE5\u5C06\u6A21\u5757\u5316\u8BBE\u8BA1\u6280\u672F\u5E94\u7528\u4E8E\u5B83\u4EEC\u3002\u66F4\u9AD8\u7EA7\u522B\u7684\u5B50\u7CFB\u7EDF\u548C\u670D\u52A1\u4E5F\u662F\u6A21\u5757\u3002\u5B83\u4EEC\u7684\u63A5\u53E3\u53EF\u80FD\u91C7\u7528\u4E0D\u540C\u7684\u5F62\u5F0F\uFF0C\u4F8B\u5982\u5185\u6838\u8C03\u7528\u6216 HTTP \u8BF7\u6C42\u3002\u672C\u4E66\u4E2D\u6709\u5173\u6A21\u5757\u5316\u8BBE\u8BA1\u7684\u8BB8\u591A\u8BA8\u8BBA\u90FD\u96C6\u4E2D\u5728\u8BBE\u8BA1\u7C7B\u4E0A\uFF0C\u4F46\u662F\u6280\u672F\u548C\u6982\u5FF5\u4E5F\u9002\u7528\u4E8E\u5176\u4ED6\u79CD\u7C7B\u7684\u6A21\u5757\u3002</p><blockquote><p>The best modules are those whose interfaces are much simpler than their implementations. Such modules have two advantages. First, a simple interface minimizes the complexity that a module imposes on the rest of the system. Second, if a module is modified in a way that does not change its interface, then no other module will be affected by the modification. If a module\u2019s interface is much simpler than its implementation, there will be many aspects of the module that can be changed without affecting other modules.</p></blockquote><p>\u6700\u597D\u7684\u6A21\u5757\u662F\u90A3\u4E9B\u5176\u63A5\u53E3\u6BD4\u5176\u5B9E\u73B0\u7B80\u5355\u5F97\u591A\u7684\u6A21\u5757\u3002\u8FD9\u6837\u7684\u6A21\u5757\u5177\u6709\u4E24\u4E2A\u4F18\u70B9\u3002\u9996\u5148\uFF0C\u4E00\u4E2A\u7B80\u5355\u7684\u63A5\u53E3\u53EF\u4EE5\u5C06\u6A21\u5757\u5F3A\u52A0\u4E8E\u7CFB\u7EDF\u5176\u4F59\u90E8\u5206\u7684\u590D\u6742\u6027\u964D\u81F3\u6700\u4F4E\u3002\u5176\u6B21\uFF0C\u5982\u679C\u4EE5\u4E0D\u66F4\u6539\u5176\u63A5\u53E3\u7684\u65B9\u5F0F\u4FEE\u6539\u4E86\u4E00\u4E2A\u6A21\u5757\uFF0C\u5219\u8BE5\u4FEE\u6539\u4E0D\u4F1A\u5F71\u54CD\u5176\u4ED6\u6A21\u5757\u3002\u5982\u679C\u6A21\u5757\u7684\u63A5\u53E3\u6BD4\u5176\u5B9E\u73B0\u7B80\u5355\u5F97\u591A\uFF0C\u5219\u53EF\u4EE5\u5728\u4E0D\u5F71\u54CD\u5176\u4ED6\u6A21\u5757\u7684\u60C5\u51B5\u4E0B\u66F4\u6539\u6A21\u5757\u7684\u8BB8\u591A\u65B9\u9762\u3002</p><h2 id="_4-2-what-s-in-an-interface-\u63A5\u53E3\u4E2D\u6709\u4EC0\u4E48" tabindex="-1"><a class="header-anchor" href="#_4-2-what-s-in-an-interface-\u63A5\u53E3\u4E2D\u6709\u4EC0\u4E48" aria-hidden="true">#</a> 4.2 What\u2019s in an interface? \u63A5\u53E3\u4E2D\u6709\u4EC0\u4E48\uFF1F</h2><blockquote><p>The interface to a module contains two kinds of information: formal and informal. The formal parts of an interface are specified explicitly in the code, and some of these can be checked for correctness by the programming language. For example, the formal interface for a method is its signature, which includes the names and types of its parameters, the type of its return value, and information about exceptions thrown by the method. Most programming languages ensure that each invocation of a method provides the right number and types of arguments to match its signature. The formal interface for a class consists of the signatures for all of its public methods, plus the names and types of any public variables.</p></blockquote><p>\u6A21\u5757\u7684\u63A5\u53E3\u5305\u542B\u4E24\u79CD\u4FE1\u606F\uFF1A\u6B63\u5F0F\u4FE1\u606F\u548C\u975E\u6B63\u5F0F\u4FE1\u606F\u3002\u63A5\u53E3\u7684\u5F62\u5F0F\u90E8\u5206\u5728\u4EE3\u7801\u4E2D\u660E\u786E\u6307\u5B9A\uFF0C\u5E76\u4E14\u5176\u4E2D\u4E00\u4E9B\u53EF\u4EE5\u901A\u8FC7\u7F16\u7A0B\u8BED\u8A00\u68C0\u67E5\u5176\u6B63\u786E\u6027\u3002\u4F8B\u5982\uFF0C\u65B9\u6CD5\u7684\u5F62\u5F0F\u63A5\u53E3\u662F\u5176\u7B7E\u540D\uFF0C\u5176\u4E2D\u5305\u62EC\u5176\u53C2\u6570\u7684\u540D\u79F0\u548C\u7C7B\u578B\uFF0C\u5176\u8FD4\u56DE\u503C\u7684\u7C7B\u578B\u4EE5\u53CA\u6709\u5173\u8BE5\u65B9\u6CD5\u5F15\u53D1\u7684\u5F02\u5E38\u7684\u4FE1\u606F\u3002\u5927\u591A\u6570\u7F16\u7A0B\u8BED\u8A00\u90FD\u786E\u4FDD\u5BF9\u65B9\u6CD5\u7684\u6BCF\u6B21\u8C03\u7528\u90FD\u63D0\u4F9B\u6B63\u786E\u6570\u91CF\u548C\u7C7B\u578B\u7684\u53C2\u6570\u4EE5\u5339\u914D\u5176\u7B7E\u540D\u3002\u7C7B\u7684\u5F62\u5F0F\u63A5\u53E3\u5305\u62EC\u5176\u6240\u6709\u516C\u5171\u65B9\u6CD5\u7684\u7B7E\u540D\u4EE5\u53CA\u4EFB\u4F55\u516C\u5171\u53D8\u91CF\u7684\u540D\u79F0\u548C\u7C7B\u578B\u3002</p><blockquote><p>Each interface also includes informal elements. These are not specified in a way that can be understood or enforced by the programming language. The informal parts of an interface include its high-level behavior, such as the fact that a function deletes the file named by one of its arguments. If there are constraints on the usage of a class (perhaps one method must be called before another), these are also part of the class\u2019s interface. In general, if a developer needs to know a particular piece of information in order to use a module, then that information is part of the module\u2019s interface. The informal aspects of an interface can only be described using comments, and the programming language cannot ensure that the description is complete or accurate<sup>1</sup>. For most interfaces the informal aspects are larger and more complex than the formal aspects.</p></blockquote><p>\u6BCF\u4E2A\u63A5\u53E3\u8FD8\u5305\u62EC\u975E\u6B63\u5F0F\u5143\u7D20\u3002\u8FD9\u4E9B\u6CA1\u6709\u4EE5\u7F16\u7A0B\u8BED\u8A00\u53EF\u4EE5\u7406\u89E3\u6216\u6267\u884C\u7684\u65B9\u5F0F\u6307\u5B9A\u3002\u63A5\u53E3\u7684\u975E\u6B63\u5F0F\u90E8\u5206\u5305\u62EC\u5176\u9AD8\u7EA7\u884C\u4E3A\uFF0C\u4F8B\u5982\uFF0C\u51FD\u6570\u5220\u9664\u7531\u5176\u53C2\u6570\u4E4B\u4E00\u547D\u540D\u7684\u6587\u4EF6\u7684\u4E8B\u5B9E\u3002\u5982\u679C\u5BF9\u7C7B\u7684\u4F7F\u7528\u5B58\u5728\u9650\u5236\uFF08\u4E5F\u8BB8\u5FC5\u987B\u5148\u8C03\u7528\u4E00\u79CD\u65B9\u6CD5\uFF09\uFF0C\u5219\u8FD9\u4E9B\u7EA6\u675F\u4E5F\u662F\u7C7B\u63A5\u53E3\u7684\u4E00\u90E8\u5206\u3002\u901A\u5E38\uFF0C\u5982\u679C\u5F00\u53D1\u4EBA\u5458\u9700\u8981\u4E86\u89E3\u7279\u5B9A\u4FE1\u606F\u624D\u80FD\u4F7F\u7528\u6A21\u5757\uFF0C\u5219\u8BE5\u4FE1\u606F\u662F\u6A21\u5757\u63A5\u53E3\u7684\u4E00\u90E8\u5206\u3002\u63A5\u53E3\u7684\u975E\u6B63\u5F0F\u65B9\u9762\u53EA\u80FD\u4F7F\u7528\u6CE8\u91CA\u6765\u63CF\u8FF0\uFF0C\u800C\u7F16\u7A0B\u8BED\u8A00\u4E0D\u80FD\u786E\u4FDD\u63CF\u8FF0\u662F\u5B8C\u6574\u6216\u51C6\u786E\u7684<sup>1</sup>\u3002\u5BF9\u4E8E\u5927\u591A\u6570\u63A5\u53E3\uFF0C\u975E\u6B63\u5F0F\u65B9\u9762\u6BD4\u6B63\u5F0F\u65B9\u9762\u66F4\u5927\uFF0C\u66F4\u590D\u6742\u3002</p><blockquote><p>One of the benefits of a clearly specified interface is that it indicates exactly what developers need to know in order to use the associated module. This helps to eliminate the \u201Cunknown unknowns\u201D problem described in Section 2.2.</p></blockquote><p>\u660E\u786E\u6307\u5B9A\u63A5\u53E3\u7684\u597D\u5904\u4E4B\u4E00\u662F\uFF0C\u5B83\u53EF\u4EE5\u51C6\u786E\u6307\u793A\u5F00\u53D1\u4EBA\u5458\u4F7F\u7528\u5173\u8054\u6A21\u5757\u6240\u9700\u8981\u77E5\u9053\u7684\u5185\u5BB9\u3002\u8FD9\u6709\u52A9\u4E8E\u6D88\u9664\u7B2C 2.2 \u8282\u4E2D\u63CF\u8FF0\u7684\u201C\u672A\u77E5\u7684\u672A\u77E5\u201D\u95EE\u9898\u3002</p><h2 id="_4-3-abstractions-\u62BD\u8C61" tabindex="-1"><a class="header-anchor" href="#_4-3-abstractions-\u62BD\u8C61" aria-hidden="true">#</a> 4.3 Abstractions \u62BD\u8C61</h2><blockquote><p>The term <em>abstraction</em> is closely related to the idea of modular design. <strong>An abstraction is a simplified view of an entity, which omits unimportant details.</strong> Abstractions are useful because they make it easier for us to think about and manipulate complex things.</p></blockquote><p>\u672F\u8BED\u62BD\u8C61\u4E0E\u6A21\u5757\u5316\u8BBE\u8BA1\u7684\u601D\u60F3\u7D27\u5BC6\u76F8\u5173\u3002\u62BD\u8C61\u662F\u5B9E\u4F53\u7684\u7B80\u5316\u89C6\u56FE\uFF0C\u5176\u4E2D\u7701\u7565\u4E86\u4E0D\u91CD\u8981\u7684\u7EC6\u8282\u3002\u62BD\u8C61\u662F\u6709\u7528\u7684\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u4F7F\u6211\u4EEC\u66F4\u5BB9\u6613\u601D\u8003\u548C\u64CD\u7EB5\u590D\u6742\u7684\u4E8B\u7269\u3002</p><blockquote><p>In modular programming, each module provides an abstraction in form of its interface. The interface presents a simplified view of the module\u2019s functionality; the details of the implementation are unimportant from the standpoint of the module\u2019s abstraction, so they are omitted from the interface.</p></blockquote><p>\u5728\u6A21\u5757\u5316\u7F16\u7A0B\u4E2D\uFF0C\u6BCF\u4E2A\u6A21\u5757\u4EE5\u5176\u63A5\u53E3\u7684\u5F62\u5F0F\u63D0\u4F9B\u62BD\u8C61\u3002\u8BE5\u63A5\u53E3\u63D0\u4F9B\u4E86\u6A21\u5757\u529F\u80FD\u7684\u7B80\u5316\u89C6\u56FE\uFF1B\u4ECE\u6A21\u5757\u62BD\u8C61\u7684\u89D2\u5EA6\u6765\u770B\uFF0C\u5B9E\u73B0\u7684\u7EC6\u8282\u5E76\u4E0D\u91CD\u8981\uFF0C\u56E0\u6B64\u5728\u63A5\u53E3\u4E2D\u5C06\u5176\u7701\u7565\u3002</p><blockquote><p>In the definition of abstraction, the word \u201Cunimportant\u201D is crucial. The more unimportant details that are omitted from an abstraction, the better. However, a detail can only be omitted from an abstraction if it is unimportant. An abstraction can go wrong in two ways. First, it can include details that are not really important; when this happens, it makes the abstraction more complicated than necessary, which increases the cognitive load on developers using the abstraction. The second error is when an abstraction omits details that really are important. This results in obscurity: developers looking only at the abstraction will not have all the information they need to use the abstraction correctly. An abstraction that omits important details is a false abstraction: it might appear simple, but in reality it isn\u2019t. The key to designing abstractions is to understand what is important, and to look for designs that minimize the amount of information that is important.</p></blockquote><p>\u5728\u62BD\u8C61\u7684\u5B9A\u4E49\u4E2D\uFF0C\u201C\u65E0\u5173\u7D27\u8981\u201D\u4E00\u8BCD\u81F3\u5173\u91CD\u8981\u3002\u4ECE\u62BD\u8C61\u4E2D\u5FFD\u7565\u7684\u4E0D\u91CD\u8981\u7684\u7EC6\u8282\u8D8A\u591A\u8D8A\u597D\u3002\u4F46\u662F\uFF0C\u5982\u679C\u7EC6\u8282\u4E0D\u91CD\u8981\uFF0C\u5219\u53EA\u80FD\u5C06\u5176\u4ECE\u62BD\u8C61\u4E2D\u7701\u7565\u3002\u62BD\u8C61\u53EF\u4EE5\u901A\u8FC7\u4E24\u79CD\u65B9\u5F0F\u51FA\u9519\u3002\u9996\u5148\uFF0C\u5B83\u53EF\u4EE5\u5305\u542B\u5E76\u975E\u771F\u6B63\u91CD\u8981\u7684\u7EC6\u8282\u3002\u5F53\u8FD9\u79CD\u60C5\u51B5\u53D1\u751F\u65F6\uFF0C\u5B83\u4F1A\u4F7F\u62BD\u8C61\u53D8\u5F97\u4E0D\u5FC5\u8981\u7684\u590D\u6742\uFF0C\u4ECE\u800C\u589E\u52A0\u4E86\u4F7F\u7528\u62BD\u8C61\u7684\u5F00\u53D1\u4EBA\u5458\u7684\u8BA4\u77E5\u8D1F\u62C5\u3002\u7B2C\u4E8C\u4E2A\u9519\u8BEF\u662F\u62BD\u8C61\u5FFD\u7565\u4E86\u771F\u6B63\u91CD\u8981\u7684\u7EC6\u8282\u3002\u8FD9\u5BFC\u81F4\u6A21\u7CCA\u4E0D\u6E05\uFF1A\u4EC5\u67E5\u770B\u62BD\u8C61\u7684\u5F00\u53D1\u4EBA\u5458\u5C06\u4E0D\u4F1A\u83B7\u5F97\u6B63\u786E\u4F7F\u7528\u62BD\u8C61\u6240\u9700\u7684\u5168\u90E8\u4FE1\u606F\u3002\u5FFD\u7565\u91CD\u8981\u7EC6\u8282\u7684\u62BD\u8C61\u662F\u9519\u8BEF\u7684\u62BD\u8C61\uFF1A\u5B83\u53EF\u80FD\u770B\u8D77\u6765\u5F88\u7B80\u5355\uFF0C\u4F46\u5B9E\u9645\u4E0A\u5E76\u975E\u5982\u6B64\u3002\uFF08\u8BBE\u8BA1\u62BD\u8C61\u7684\u91CD\u8981\u4E00\u70B9\u5C31\u662F\u8BC6\u522B\u91CD\u8981\u6027\uFF0C\u5E76\u5728\u8BBE\u8BA1\u8FC7\u7A0B\u4E2D\uFF0C\u5C06\u91CD\u8981\u4FE1\u606F\u7684\u6570\u91CF\u5C3D\u91CF\u51CF\u5230\u6700\u5C11\uFF09</p><blockquote><p>As an example, consider a file system. The abstraction provided by a file system omits many details, such as the mechanism for choosing which blocks on a storage device to use for the data in a given file. These details are unimportant to users of the file system (as long as the system provides adequate performance). However, some of the details of a file system\u2019s implementation are important to users. Most file systems cache data in main memory, and they may delay writing new data to the storage device in order to improve performance. Some applications, such as databases, need to know exactly when data is written through to storage, so they can ensure that data will be preserved after system crashes. Thus, the rules for flushing data to secondary storage must be visible in the file system\u2019s interface.</p></blockquote><p>\u4F8B\u5982\uFF0C\u8003\u8651\u4E00\u4E2A\u6587\u4EF6\u7CFB\u7EDF\u3002\u6587\u4EF6\u7CFB\u7EDF\u63D0\u4F9B\u7684\u62BD\u8C61\u7701\u7565\u4E86\u8BB8\u591A\u7EC6\u8282\uFF0C\u4F8B\u5982\u7528\u4E8E\u9009\u62E9\u5B58\u50A8\u8BBE\u5907\u4E0A\u7684\u54EA\u4E9B\u5757\u7528\u4E8E\u7ED9\u5B9A\u6587\u4EF6\u4E2D\u7684\u6570\u636E\u7684\u673A\u5236\u3002\u8FD9\u4E9B\u8BE6\u7EC6\u4FE1\u606F\u5BF9\u4E8E\u6587\u4EF6\u7CFB\u7EDF\u7684\u7528\u6237\u800C\u8A00\u5E76\u4E0D\u91CD\u8981\uFF08\u53EA\u8981\u7CFB\u7EDF\u63D0\u4F9B\u8DB3\u591F\u7684\u6027\u80FD\u5373\u53EF\uFF09\u3002\u4F46\u662F\uFF0C\u6587\u4EF6\u7CFB\u7EDF\u5B9E\u73B0\u7684\u4E00\u4E9B\u7EC6\u8282\u5BF9\u7528\u6237\u5F88\u91CD\u8981\u3002\u5927\u591A\u6570\u6587\u4EF6\u7CFB\u7EDF\u5C06\u6570\u636E\u7F13\u5B58\u5728\u4E3B\u5185\u5B58\u4E2D\uFF0C\u5E76\u4E14\u5B83\u4EEC\u53EF\u80FD\u4F1A\u5EF6\u8FDF\u5C06\u65B0\u6570\u636E\u5199\u5165\u5B58\u50A8\u8BBE\u5907\u4EE5\u63D0\u9AD8\u6027\u80FD\u3002\u4E00\u4E9B\u5E94\u7528\u7A0B\u5E8F\uFF08\u4F8B\u5982\u6570\u636E\u5E93\uFF09\u9700\u8981\u786E\u5207\u5730\u77E5\u9053\u4F55\u65F6\u5C06\u6570\u636E\u5199\u5165\u5B58\u50A8\u8BBE\u5907\uFF0C\u56E0\u6B64\u5B83\u4EEC\u53EF\u4EE5\u786E\u4FDD\u5728\u7CFB\u7EDF\u5D29\u6E83\u540E\u5C06\u4FDD\u7559\u6570\u636E\u3002\u56E0\u6B64\uFF0C\u5C06\u6570\u636E\u5237\u65B0\u5230\u8F85\u52A9\u5B58\u50A8\u7684\u89C4\u5219\u5FC5\u987B\u5728\u6587\u4EF6\u7CFB\u7EDF\u7684\u63A5\u53E3\u4E2D\u53EF\u89C1\u3002</p><blockquote><p>We depend on abstractions to manage complexity not just in programming, but pervasively in our everyday lives. A microwave oven contains complex electronics to convert alternating current into microwave radiation and distribute that radiation throughout the cooking cavity. Fortunately, users see a much simpler abstraction, consisting of a few buttons to control the timing and intensity of the microwaves. Cars provide a simple abstraction that allows us to drive them without understanding the mechanisms for electrical motors, battery power management, anti-lock brakes, cruise control, and so on.</p></blockquote><p>\u6211\u4EEC\u4E0D\u4EC5\u4F9D\u9760\u62BD\u8C61\u6765\u7BA1\u7406\u590D\u6742\u6027\uFF0C\u800C\u4E14\u4E0D\u4EC5\u5728\u7F16\u7A0B\u4E2D\uFF0C\u800C\u4E14\u5728\u65E5\u5E38\u751F\u6D3B\u4E2D\u65E0\u5904\u4E0D\u5728\u3002\u5FAE\u6CE2\u7089\u5305\u542B\u590D\u6742\u7684\u7535\u5B50\u8BBE\u5907\uFF0C\u53EF\u5C06\u4EA4\u6D41\u7535\u8F6C\u6362\u4E3A\u5FAE\u6CE2\u8F90\u5C04\u5E76\u5C06\u8BE5\u8F90\u5C04\u5206\u5E03\u5230\u6574\u4E2A\u70F9\u996A\u8154\u4E2D\u3002\u5E78\u8FD0\u7684\u662F\uFF0C\u7528\u6237\u770B\u5230\u4E86\u4E00\u4E2A\u7B80\u5355\u5F97\u591A\u7684\u62BD\u8C61\uFF0C\u5B83\u7531\u51E0\u4E2A\u6309\u94AE\u63A7\u5236\u5FAE\u6CE2\u7684\u5B9A\u65F6\u548C\u5F3A\u5EA6\u3002\u6C7D\u8F66\u63D0\u4F9B\u4E86\u4E00\u79CD\u7B80\u5355\u7684\u62BD\u8C61\u6982\u5FF5\uFF0C\u4F7F\u6211\u4EEC\u53EF\u4EE5\u5728\u4E0D\u4E86\u89E3\u7535\u52A8\u673A\uFF0C\u7535\u6C60\u7535\u6E90\u7BA1\u7406\uFF0C\u9632\u62B1\u6B7B\u5236\u52A8\uFF0C\u5DE1\u822A\u63A7\u5236\u7B49\u673A\u5236\u7684\u60C5\u51B5\u4E0B\u9A7E\u9A76\u5B83\u4EEC\u3002</p><h2 id="_4-4-deep-modules-\u6DF1\u5EA6\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#_4-4-deep-modules-\u6DF1\u5EA6\u6A21\u5757" aria-hidden="true">#</a> 4.4 Deep modules \u6DF1\u5EA6\u6A21\u5757</h2><blockquote><p>The best modules are those that provide powerful functionality yet have simple interfaces. I use the term <em>deep</em> to describe such modules. To visualize the notion of depth, imagine that each module is represented by a rectangle, as shown in Figure 4.1. The area of each rectangle is proportional to the functionality implemented by the module. The top edge of a rectangle represents the module\u2019s interface; the length of that edge indicates the complexity of the interface. The best modules are deep: they have a lot of functionality hidden behind a simple interface. A deep module is a good abstraction because only a small fraction of its internal complexity is visible to its users.</p></blockquote><p>\u6700\u597D\u7684\u6A21\u5757\u662F\u90A3\u4E9B\u63D0\u4F9B\u5F3A\u5927\u529F\u80FD\u4F46\u5177\u6709\u7B80\u5355\u63A5\u53E3\u7684\u6A21\u5757\u3002\u6211\u7528\u201C\u6DF1\u5165\u201D\u4E00\u8BCD\u6765\u63CF\u8FF0\u8FD9\u6837\u7684\u6A21\u5757\u3002\u4E3A\u4E86\u5F62\u8C61\u5316\u6DF1\u5EA6\u7684\u6982\u5FF5\uFF0C\u5047\u8BBE\u6BCF\u4E2A\u6A21\u5757\u90FD\u7531\u4E00\u4E2A\u77E9\u5F62\u8868\u793A\uFF0C\u5982\u56FE 4.1 \u6240\u793A\u3002\u6BCF\u4E2A\u77E9\u5F62\u7684\u9762\u79EF\u4E0E\u6A21\u5757\u5B9E\u73B0\u7684\u529F\u80FD\u6210\u6BD4\u4F8B\u3002\u77E9\u5F62\u7684\u9876\u90E8\u8FB9\u7F18\u4EE3\u8868\u6A21\u5757\u7684\u63A5\u53E3\uFF1B\u8FB9\u7F18\u7684\u957F\u5EA6\u8868\u793A\u63A5\u53E3\u7684\u590D\u6742\u6027\u3002\u6700\u597D\u7684\u6A21\u5757\u5F88\u6DF1\uFF1A\u5B83\u4EEC\u5728\u7B80\u5355\u7684\u63A5\u53E3\u540E\u9690\u85CF\u4E86\u8BB8\u591A\u529F\u80FD\u3002\u6DF1\u5EA6\u6A21\u5757\u662F\u4E00\u4E2A\u5F88\u597D\u7684\u62BD\u8C61\uFF0C\u56E0\u4E3A\u5176\u5185\u90E8\u590D\u6742\u6027\u7684\u5F88\u5C0F\u4E00\u90E8\u5206\u5BF9\u5176\u7528\u6237\u53EF\u89C1\u3002</p><p><img src="'+a+`" alt=""></p><blockquote><p>Figure 4.1: Deep and shallow modules. The best modules are deep: they allow a lot of functionality to be accessed through a simple interface. A shallow module is one with a relatively complex interface, but not much functionality: it doesn\u2019t hide much complexity.</p></blockquote><p>\u56FE 4.1\uFF1A\u6DF1\u6D45\u6A21\u5757\u3002\u6700\u597D\u7684\u6A21\u5757\u5F88\u6DF1\uFF1A\u5B83\u4EEC\u5141\u8BB8\u901A\u8FC7\u7B80\u5355\u7684\u63A5\u53E3\u8BBF\u95EE\u8BB8\u591A\u529F\u80FD\u3002\u6D45\u5C42\u6A21\u5757\u662F\u5177\u6709\u76F8\u5BF9\u590D\u6742\u7684\u63A5\u53E3\u7684\u6A21\u5757\uFF0C\u4F46\u529F\u80FD\u4E0D\u591A\uFF1A\u5B83\u4E0D\u4F1A\u63A9\u76D6\u592A\u591A\u7684\u590D\u6742\u6027\u3002</p><blockquote><p>Module depth is a way of thinking about cost versus benefit. The benefit provided by a module is its functionality. The cost of a module (in terms of system complexity) is its interface. A module\u2019s interface represents the complexity that the module imposes on the rest of the system: the smaller and simpler the interface, the less complexity that it introduces. The best modules are those with the greatest benefit and the least cost. Interfaces are good, but more, or larger, interfaces are not necessarily better!</p></blockquote><p>\u6A21\u5757\u6DF1\u5EA6\u662F\u8003\u8651\u6210\u672C\u4E0E\u6536\u76CA\u7684\u4E00\u79CD\u65B9\u5F0F\u3002\u6A21\u5757\u63D0\u4F9B\u7684\u597D\u5904\u662F\u5176\u529F\u80FD\u3002\u6A21\u5757\u7684\u6210\u672C\uFF08\u5C31\u7CFB\u7EDF\u590D\u6742\u6027\u800C\u8A00\uFF09\u662F\u5176\u63A5\u53E3\u3002\u6A21\u5757\u7684\u63A5\u53E3\u4EE3\u8868\u4E86\u6A21\u5757\u5F3A\u52A0\u7ED9\u7CFB\u7EDF\u5176\u4F59\u90E8\u5206\u7684\u590D\u6742\u6027\uFF1A\u63A5\u53E3\u8D8A\u5C0F\u8D8A\u7B80\u5355\uFF0C\u5F15\u5165\u7684\u590D\u6742\u6027\u5C31\u8D8A\u5C0F\u3002\u6700\u597D\u7684\u6A21\u5757\u662F\u90A3\u4E9B\u6536\u76CA\u6700\u5927\uFF0C\u6210\u672C\u6700\u4F4E\u7684\u6A21\u5757\u3002\u63A5\u53E3\u4E0D\u9519\uFF0C\u4F46\u66F4\u591A\u6216\u66F4\u5927\u7684\u63A5\u53E3\u4E0D\u4E00\u5B9A\u66F4\u597D\uFF01</p><blockquote><p>The mechanism for file I/O provided by the Unix operating system and its descendants, such as Linux, is a beautiful example of a deep interface. There are only five basic system calls for I/O, with simple signatures:</p></blockquote><p>Unix \u64CD\u4F5C\u7CFB\u7EDF\u53CA\u5176\u540E\u4EE3\uFF08\u4F8B\u5982 Linux\uFF09\u63D0\u4F9B\u7684\u6587\u4EF6 I/O \u673A\u5236\u662F\u6DF1\u5C42\u63A5\u53E3\u7684\u4E00\u4E2A\u5F88\u597D\u7684\u4F8B\u5B50\u3002I/O \u53EA\u6709\u4E94\u4E2A\u57FA\u672C\u7CFB\u7EDF\u8C03\u7528\uFF0C\u5E26\u6709\u7B80\u5355\u7B7E\u540D\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> referencePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>The open system call takes a hierarchical file name such as <code>/a/b/c</code> and returns an integer <em>file descriptor</em>, which is used to reference the open file. The other arguments for open provide optional information such as whether the file is being opened for reading or writing, whether a new file should be created if there is no existing file, and access permissions for the file, if a new file is created. The read and write system calls transfer information between buffer areas in the application\u2019s memory and the file; close ends the access to the file. Most files are accessed sequentially, so that is the default; however, random access can be achieved by invoking the lseek system call to change the current access position.</p></blockquote><p>\u5F00\u653E\u7CFB\u7EDF\u8C03\u7528\u91C7\u7528\u5206\u5C42\u6587\u4EF6\u540D\uFF0C\u4F8B\u5982 <code>/a/b/c</code>\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u6574\u6570 <strong>\u6587\u4EF6\u63CF\u8FF0\u7B26</strong>\uFF0C\u8BE5\u63CF\u8FF0\u7B26\u7528\u4E8E\u5F15\u7528\u6253\u5F00\u6587\u4EF6\u3002open \u7684\u5176\u4ED6\u81EA\u53D8\u91CF\u63D0\u4F9B\u53EF\u9009\u4FE1\u606F\uFF0C\u4F8B\u5982\u662F\u5426\u6B63\u5728\u6253\u5F00\u6587\u4EF6\u4EE5\u8FDB\u884C\u8BFB\u53D6\u6216\u5199\u5165\uFF0C\u5982\u679C\u4E0D\u5B58\u5728\u73B0\u6709\u6587\u4EF6\u5219\u662F\u5426\u5E94\u521B\u5EFA\u65B0\u6587\u4EF6\uFF0C\u4EE5\u53CA\u5982\u679C\u521B\u5EFA\u65B0\u6587\u4EF6\u5219\u5177\u6709\u6587\u4EF6\u7684\u8BBF\u95EE\u6743\u9650\u3002\u8BFB\u5199\u7CFB\u7EDF\u8C03\u7528\u5728\u5E94\u7528\u7A0B\u5E8F\u5185\u5B58\u548C\u6587\u4EF6\u7684\u7F13\u51B2\u533A\u4E4B\u95F4\u4F20\u8F93\u4FE1\u606F\u3002close \u7ED3\u675F\u5BF9\u6587\u4EF6\u7684\u8BBF\u95EE\u3002\u5927\u591A\u6570\u6587\u4EF6\u662F\u6309\u987A\u5E8F\u8BBF\u95EE\u7684\uFF0C\u56E0\u6B64\u8FD9\u662F\u9ED8\u8BA4\u8BBE\u7F6E\u3002\u4F46\u662F\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8C03\u7528 lseek \u7CFB\u7EDF\u8C03\u7528\u6765\u66F4\u6539\u5F53\u524D\u8BBF\u95EE\u4F4D\u7F6E\u6765\u5B9E\u73B0\u968F\u673A\u8BBF\u95EE\u3002</p><blockquote><p>A modern implementation of the Unix I/O interface requires hundreds of thousands of lines of code, which address complex issues such as:</p></blockquote><p>Unix I/O \u63A5\u53E3\u7684\u73B0\u4EE3\u5B9E\u73B0\u9700\u8981\u6210\u5343\u4E0A\u4E07\u884C\u4EE3\u7801\uFF0C\u8FD9\u4E9B\u4EE3\u7801\u53EF\u4EE5\u89E3\u51B3\u8BF8\u5982\u4EE5\u4E0B\u7684\u590D\u6742\u95EE\u9898\uFF1A</p><blockquote><ul><li>How are files represented on disk in order to allow efficient access?</li><li>How are directories stored, and how are hierarchical path names processed to find the files they refer to?</li><li>How are permissions enforced, so that one user cannot modify or delete another user\u2019s files?</li><li>How are file accesses implemented? For example, how is functionality divided between interrupt handlers and background code, and how do these two elements communicate safely?</li><li>What scheduling policies are used when there are concurrent accesses to multiple files?</li><li>How can recently accessed file data be cached in memory in order to reduce the number of disk accesses?</li><li>How can a variety of different secondary storage devices, such as disks and flash drives, be incorporated into a single file system?</li></ul></blockquote><hr><ul><li>\u5982\u4F55\u5728\u78C1\u76D8\u4E0A\u8868\u793A\u6587\u4EF6\u4EE5\u4FBF\u6709\u6548\u8BBF\u95EE\uFF1F</li><li>\u5982\u4F55\u5B58\u50A8\u76EE\u5F55\uFF0C\u4EE5\u53CA\u5982\u4F55\u5904\u7406\u5206\u5C42\u8DEF\u5F84\u540D\u4EE5\u67E5\u627E\u5B83\u4EEC\u6240\u5F15\u7528\u7684\u6587\u4EF6\uFF1F</li><li>\u5982\u4F55\u5F3A\u5236\u6267\u884C\u6743\u9650\uFF0C\u4EE5\u4F7F\u4E00\u4E2A\u7528\u6237\u65E0\u6CD5\u4FEE\u6539\u6216\u5220\u9664\u53E6\u4E00\u7528\u6237\u7684\u6587\u4EF6\uFF1F</li><li>\u5982\u4F55\u5B9E\u73B0\u6587\u4EF6\u8BBF\u95EE\uFF1F\u4F8B\u5982\uFF0C\u5982\u4F55\u5728\u4E2D\u65AD\u5904\u7406\u7A0B\u5E8F\u548C\u540E\u53F0\u4EE3\u7801\u4E4B\u95F4\u5212\u5206\u529F\u80FD\uFF0C\u4EE5\u53CA\u8FD9\u4E24\u4E2A\u5143\u7D20\u5982\u4F55\u5B89\u5168\u901A\u4FE1\uFF1F</li><li>\u5728\u540C\u65F6\u8BBF\u95EE\u591A\u4E2A\u6587\u4EF6\u65F6\u4F7F\u7528\u4EC0\u4E48\u8C03\u5EA6\u7B56\u7565\uFF1F</li><li>\u5982\u4F55\u5C06\u6700\u8FD1\u8BBF\u95EE\u7684\u6587\u4EF6\u6570\u636E\u7F13\u5B58\u5728\u5185\u5B58\u4E2D\u4EE5\u51CF\u5C11\u78C1\u76D8\u8BBF\u95EE\u6B21\u6570\uFF1F</li><li>\u5982\u4F55\u5C06\u5404\u79CD\u4E0D\u540C\u7684\u8F85\u52A9\u5B58\u50A8\u8BBE\u5907\uFF08\u4F8B\u5982\u78C1\u76D8\u548C\u95EA\u5B58\u9A71\u52A8\u5668\uFF09\u5408\u5E76\u5230\u5355\u4E2A\u6587\u4EF6\u7CFB\u7EDF\u4E2D\uFF1F</li></ul><blockquote><p>All of these issues, and many more, are handled by the Unix file system implementation; they are invisible to programmers who invoke the system calls. Implementations of the Unix I/O interface have evolved radically over the years, but the five basic kernel calls have not changed.</p></blockquote><p>\u6240\u6709\u8FD9\u4E9B\u95EE\u9898\uFF0C\u4EE5\u53CA\u66F4\u591A\u7684\u95EE\u9898\uFF0C\u90FD\u7531 Unix \u6587\u4EF6\u7CFB\u7EDF\u5B9E\u73B0\u6765\u89E3\u51B3\u3002\u5BF9\u4E8E\u8C03\u7528\u7CFB\u7EDF\u8C03\u7528\u7684\u7A0B\u5E8F\u5458\u6765\u8BF4\uFF0C\u5B83\u4EEC\u662F\u4E0D\u53EF\u89C1\u7684\u3002\u591A\u5E74\u6765\uFF0CUnix I/O \u63A5\u53E3\u7684\u5B9E\u73B0\u5DF2\u7ECF\u53D1\u751F\u4E86\u6839\u672C\u7684\u53D1\u5C55\uFF0C\u4F46\u662F\u4E94\u4E2A\u57FA\u672C\u5185\u6838\u8C03\u7528\u5E76\u6CA1\u6709\u6539\u53D8\u3002</p><blockquote><p>Another example of a deep module is the garbage collector in a language such as Go or Java. This module has no interface at all; it works invisibly behind the scenes to reclaim unused memory. Adding garbage collection to a system actually shrinks its overall interface, since it eliminates the interface for freeing objects. The implementation of a garbage collector is quite complex, but that complexity is hidden from programmers using the language.</p></blockquote><p>\u6DF1\u5EA6\u6A21\u5757\u7684\u53E6\u4E00\u4E2A\u793A\u4F8B\u662F\u8BF8\u5982 Go \u6216 Java \u4E4B\u7C7B\u7684\u8BED\u8A00\u4E2D\u7684\u5783\u573E\u6536\u96C6\u5668\u3002\u8FD9\u4E2A\u6A21\u5757\u6839\u672C\u6CA1\u6709\u63A5\u53E3\u3002\u5B83\u5728\u540E\u53F0\u8FDB\u884C\u9690\u5F62\u64CD\u4F5C\u4EE5\u56DE\u6536\u672A\u4F7F\u7528\u7684\u5185\u5B58\u3002\u7531\u4E8E\u5C06\u5783\u573E\u6536\u96C6\u6D88\u9664\u4E86\u7528\u4E8E\u91CA\u653E\u5BF9\u8C61\u7684\u63A5\u53E3\uFF0C\u56E0\u6B64\u5411\u7CFB\u7EDF\u4E2D\u6DFB\u52A0\u5783\u573E\u56DE\u6536\u5B9E\u9645\u4E0A\u4F1A\u7F29\u5C0F\u5176\u603B\u4F53\u63A5\u53E3\u3002\u5783\u573E\u6536\u96C6\u5668\u7684\u5B9E\u73B0\u975E\u5E38\u590D\u6742\uFF0C\u4F46\u662F\u4F7F\u7528\u8BE5\u8BED\u8A00\u7684\u7A0B\u5E8F\u5458\u65E0\u6CD5\u53D1\u73B0\u8FD9\u79CD\u590D\u6742\u6027\u3002</p><blockquote><p>Deep modules such as Unix I/O and garbage collectors provide powerful abstractions because they are easy to use, yet they hide significant implementation complexity.</p></blockquote><p>\u8BF8\u5982 Unix I/O \u548C\u5783\u573E\u6536\u96C6\u5668\u4E4B\u7C7B\u7684\u6DF1\u5C42\u6A21\u5757\u63D0\u4F9B\u4E86\u5F3A\u5927\u7684\u62BD\u8C61\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u6613\u4E8E\u4F7F\u7528\uFF0C\u4F46\u9690\u85CF\u4E86\u5DE8\u5927\u7684\u5B9E\u73B0\u590D\u6742\u6027\u3002</p><h2 id="_4-5-shallow-modules-\u6D45\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#_4-5-shallow-modules-\u6D45\u6A21\u5757" aria-hidden="true">#</a> 4.5 Shallow modules \u6D45\u6A21\u5757</h2><blockquote><p>On the other hand, a shallow module is one whose interface is relatively complex in comparison to the functionality that it provides. For example, a class that implements linked lists is shallow. It doesn\u2019t take much code to manipulate a linked list (inserting or deleting an element takes only a few lines), so the linked list abstraction doesn\u2019t hide very many details. The complexity of a linked list interface is nearly as great as the complexity of its implementation. Shallow classes are sometimes unavoidable, but they don\u2019t provide help much in managing complexity.</p></blockquote><p>\u53E6\u4E00\u65B9\u9762\uFF0C\u6D45\u5C42\u6A21\u5757\u662F\u5176\u63A5\u53E3\u4E0E\u5176\u63D0\u4F9B\u7684\u529F\u80FD\u76F8\u6BD4\u76F8\u5BF9\u590D\u6742\u7684\u6A21\u5757\u3002\u4F8B\u5982\uFF0C\u5B9E\u73B0\u94FE\u8868\u7684\u7C7B\u5F88\u6D45\u3002\u64CD\u4F5C\u94FE\u8868\u4E0D\u9700\u8981\u592A\u591A\u4EE3\u7801\uFF08\u63D2\u5165\u6216\u5220\u9664\u5143\u7D20\u4EC5\u9700\u51E0\u884C\uFF09\uFF0C\u56E0\u6B64\u94FE\u8868\u62BD\u8C61\u4E0D\u4F1A\u9690\u85CF\u5F88\u591A\u7EC6\u8282\u3002\u94FE\u8868\u63A5\u53E3\u7684\u590D\u6742\u5EA6\u51E0\u4E4E\u4E0E\u5176\u5B9E\u73B0\u7684\u590D\u6742\u5EA6\u4E00\u6837\u9AD8\u3002\u6D45\u7C7B\u6709\u65F6\u662F\u4E0D\u53EF\u907F\u514D\u7684\uFF0C\u4F46\u662F\u5B83\u4EEC\u5728\u7BA1\u7406\u590D\u6742\u6027\u65B9\u9762\u6CA1\u6709\u63D0\u4F9B\u592A\u591A\u5E2E\u52A9\u3002</p><blockquote><p>Here is an extreme example of a shallow method, taken from a project in a software design class:</p></blockquote><p>\u8FD9\u662F\u4E00\u4E2A\u6D45\u5C42\u65B9\u6CD5\u7684\u6781\u7AEF\u793A\u4F8B\uFF0C\u8BE5\u6D45\u5C42\u65B9\u6CD5\u6765\u81EA\u8F6F\u4EF6\u8BBE\u8BA1\u7C7B\u7684\u9879\u76EE\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addNullValueForAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>From the standpoint of managing complexity, this method makes things worse, not better. The method offers no abstraction, since all of its functionality is visible through its interface. For example, callers probably need to know that the attribute will be stored in the data variable. It is no simpler to think about the interface than to think about the full implementation. If the method is documented properly, the documentation will be longer than the method\u2019s code. It even takes more keystrokes to invoke the method than it would take for a caller to manipulate the data variable directly. The method adds complexity (in the form of a new interface for developers to learn) but provides no compensating benefit.</p></blockquote><p>\u4ECE\u7BA1\u7406\u590D\u6742\u6027\u7684\u89D2\u5EA6\u6765\u770B\uFF0C\u6B64\u65B9\u6CD5\u4F1A\u4F7F\u60C5\u51B5\u53D8\u5F97\u66F4\u7CDF\uFF0C\u800C\u4E0D\u662F\u66F4\u597D\u3002\u8BE5\u65B9\u6CD5\u4E0D\u63D0\u4F9B\u4EFB\u4F55\u62BD\u8C61\uFF0C\u56E0\u4E3A\u5176\u6240\u6709\u529F\u80FD\u90FD\u53EF\u4EE5\u901A\u8FC7\u5176\u63A5\u53E3\u770B\u5230\u3002\u4F8B\u5982\uFF0C\u8C03\u7528\u8005\u53EF\u80FD\u9700\u8981\u77E5\u9053\u8BE5\u5C5E\u6027\u5C06\u5B58\u50A8\u5728 data \u53D8\u91CF\u4E2D\u3002\u8003\u8651\u63A5\u53E3\u5E76\u4E0D\u6BD4\u8003\u8651\u5B8C\u6574\u5B9E\u73B0\u7B80\u5355\u3002\u5982\u679C\u6B63\u786E\u8BB0\u5F55\u4E86\u8BE5\u65B9\u6CD5\uFF0C\u5219\u6587\u6863\u5C06\u6BD4\u8BE5\u65B9\u6CD5\u7684\u4EE3\u7801\u957F\u3002\u4E0E\u8C03\u7528\u65B9\u76F4\u63A5\u64CD\u4F5C\u6570\u636E\u53D8\u91CF\u76F8\u6BD4\uFF0C\u8C03\u7528\u8BE5\u65B9\u6CD5\u6240\u82B1\u8D39\u7684\u51FB\u952E\u751A\u81F3\u66F4\u591A\u3002\u8BE5\u65B9\u6CD5\u589E\u52A0\u4E86\u590D\u6742\u6027\uFF08\u4EE5\u4F9B\u5F00\u53D1\u4EBA\u5458\u5B66\u4E60\u7684\u65B0\u63A5\u53E3\u7684\u5F62\u5F0F\uFF09\uFF0C\u4F46\u6CA1\u6709\u63D0\u4F9B\u4EFB\u4F55\u8865\u507F\u3002</p><blockquote><p>img Red Flag: Shallow Module img</p></blockquote><blockquote><p>A shallow module is one whose interface is complicated relative to the functionality it provides. Shallow modules don\u2019t help much in the battle against complexity, because the benefit they provide (not having to learn about how they work internally) is negated by the cost of learning and using their interfaces. Small modules tend to be shallow.</p></blockquote><p>\u6D45\u5C42\u6A21\u5757\u662F\u4E00\u4E2A\u63A5\u53E3\u76F8\u5BF9\u4E8E\u5176\u63D0\u4F9B\u7684\u529F\u80FD\u800C\u8A00\u590D\u6742\u7684\u6A21\u5757\u3002\u6D45\u5C42\u6A21\u5757\u5728\u5BF9\u6297\u590D\u6742\u6027\u65B9\u9762\u65E0\u6D4E\u4E8E\u4E8B\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u63D0\u4F9B\u7684\u597D\u5904\uFF08\u4E0D\u5FC5\u4E86\u89E3\u5B83\u4EEC\u5728\u5185\u90E8\u5982\u4F55\u5DE5\u4F5C\uFF09\u88AB\u5B66\u4E60\u548C\u4F7F\u7528\u5176\u63A5\u53E3\u7684\u6210\u672C\u6240\u62B5\u6D88\u3002\u5C0F\u6A21\u5757\u5F80\u5F80\u5F88\u6D45\u3002</p><h2 id="_4-6-classitis" tabindex="-1"><a class="header-anchor" href="#_4-6-classitis" aria-hidden="true">#</a> 4.6 Classitis</h2><blockquote><p>Unfortunately, the value of deep classes is not widely appreciated today. The conventional wisdom in programming is that classes should be <em>small</em>, not deep. Students are often taught that the most important thing in class design is to break up larger classes into smaller ones. The same advice is often given about methods: \u201CAny method longer than N lines should be divided into multiple methods\u201D (N can be as low as 10). This approach results in large numbers of shallow classes and methods, which add to overall system complexity.</p></blockquote><p>\u4E0D\u5E78\u7684\u662F\uFF0C\u6DF1\u5EA6\u7C7B\u7684\u4EF7\u503C\u5728\u4ECA\u5929\u5E76\u672A\u5F97\u5230\u5E7F\u6CDB\u8BA4\u53EF\u3002\u7F16\u7A0B\u4E2D\u7684\u4F20\u7EDF\u89C2\u70B9\u662F\uFF0C\u7C7B\u5E94\u8BE5<strong>\u5C0F</strong>\u800C\u4E0D\u662F\u6DF1\u3002\u7ECF\u5E38\u544A\u8BC9\u5B66\u751F\uFF0C\u7C7B\u8BBE\u8BA1\u4E2D\u6700\u91CD\u8981\u7684\u4E8B\u60C5\u662F\u5C06\u8F83\u5927\u7684\u7C7B\u5206\u6210\u8F83\u5C0F\u7684\u7C7B\u3002\u5BF9\u4E8E\u65B9\u6CD5\uFF0C\u901A\u5E38\u4F1A\u7ED9\u51FA\u76F8\u540C\u7684\u5EFA\u8BAE\uFF1A\u201C\u4EFB\u4F55\u957F\u4E8E N \u884C\u7684\u65B9\u6CD5\u90FD\u5E94\u5206\u4E3A\u591A\u79CD\u65B9\u6CD5\u201D\uFF08N \u53EF\u4EE5\u4F4E\u81F3 10\uFF09\u3002\u8FD9\u79CD\u65B9\u6CD5\u5BFC\u81F4\u4E86\u5927\u91CF\u7684\u6D45\u7C7B\u548C\u65B9\u6CD5\uFF0C\u8FD9\u589E\u52A0\u4E86\u6574\u4F53\u7CFB\u7EDF\u7684\u590D\u6742\u6027\u3002</p><blockquote><p>The extreme of the \u201Cclasses should be small\u201D approach is a syndrome I call <em>classitis</em>, which stems from the mistaken view that \u201Cclasses are good, so more classes are better.\u201D In systems suffering from classitis, developers are encouraged to minimize the amount of functionality in each new class: if you want more functionality, introduce more classes. Classitis may result in classes that are individually simple, but it increases the complexity of the overall system. Small classes don\u2019t contribute much functionality, so there have to be a lot of them, each with its own interface. These interfaces accumulate to create tremendous complexity at the system level. Small classes also result in a verbose programming style, due to the boilerplate required for each class.</p></blockquote><p>\u201C\u7C7B\u5E94\u8BE5\u5C0F\u201D\u7684\u6781\u7AEF\u505A\u6CD5\u662F\u6211\u79F0\u4E4B\u4E3A\u201C\u7C7B\u708E\u201D\u7684\u7EFC\u5408\u75C7\uFF0C\u8FD9\u662F\u7531\u4E8E\u9519\u8BEF\u5730\u8BA4\u4E3A\u201C\u7C7B\u662F\u597D\u7684\uFF0C\u6240\u4EE5\u7C7B\u8D8A\u591A\u8D8A\u597D\u201D\u3002\u5728\u906D\u53D7\u7C7B\u708E\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u9F13\u52B1\u5F00\u53D1\u4EBA\u5458\u6700\u5C0F\u5316\u6BCF\u4E2A\u65B0\u7C7B\u7684\u529F\u80FD\uFF1A\u5982\u679C\u60A8\u60F3\u8981\u66F4\u591A\u7684\u529F\u80FD\uFF0C\u8BF7\u5F15\u5165\u66F4\u591A\u7684\u7C7B\u3002\u5206\u7C7B\u708E\u53EF\u80FD\u5BFC\u81F4\u4E2A\u522B\u5730\u7B80\u5355\u7684\u5206\u7C7B\uFF0C\u4F46\u662F\u5374\u589E\u52A0\u4E86\u6574\u4E2A\u7CFB\u7EDF\u7684\u590D\u6742\u6027\u3002\u5C0F\u7C7B\u4E0D\u4F1A\u8D21\u732E\u592A\u591A\u529F\u80FD\uFF0C\u56E0\u6B64\u5FC5\u987B\u6709\u5F88\u591A\u5C0F\u7C7B\uFF0C\u6BCF\u4E2A\u5C0F\u7C7B\u90FD\u6709\u81EA\u5DF1\u7684\u63A5\u53E3\u3002\u8FD9\u4E9B\u63A5\u53E3\u7684\u7D2F\u79EF\u4F1A\u5728\u7CFB\u7EDF\u7EA7\u522B\u4EA7\u751F\u5DE8\u5927\u7684\u590D\u6742\u6027\u3002\u5C0F\u7C7B\u4E5F\u5BFC\u81F4\u5197\u957F\u7684\u7F16\u7A0B\u98CE\u683C\uFF0C\u8FD9\u662F\u7531\u4E8E\u6BCF\u4E2A\u7C7B\u90FD\u9700\u8981\u6837\u677F\u3002</p><h2 id="_4-7-examples-java-and-unix-i-o-\u793A\u4F8B-java-\u548C-unix-i-o" tabindex="-1"><a class="header-anchor" href="#_4-7-examples-java-and-unix-i-o-\u793A\u4F8B-java-\u548C-unix-i-o" aria-hidden="true">#</a> 4.7 Examples: Java and Unix I/O \u793A\u4F8B\uFF1AJava \u548C Unix I/O</h2><blockquote><p>One of the most visible examples of classitis today is the Java class library. The Java language doesn\u2019t require lots of small classes, but a culture of classitis seems to have taken root in the Java programming community. For example, to open a file in order to read serialized objects from it, you must create three different objects:</p></blockquote><p>\u5982\u4ECA\uFF0C\u6700\u5E38\u89C1\u7684\u5206\u7C7B\u75C5\u5B9E\u4F8B\u4E4B\u4E00\u662F Java \u7C7B\u5E93\u3002Java \u8BED\u8A00\u4E0D\u9700\u8981\u5F88\u591A\u5C0F\u7C7B\uFF0C\u4F46\u662F\u5206\u7C7B\u6587\u5316\u4F3C\u4E4E\u5DF2\u5728 Java \u7F16\u7A0B\u793E\u533A\u4E2D\u624E\u6839\u3002\u4F8B\u5982\uFF0C\u8981\u6253\u5F00\u6587\u4EF6\u4EE5\u4FBF\u4ECE\u6587\u4EF6\u4E2D\u8BFB\u53D6\u5E8F\u5217\u5316\u7684\u5BF9\u8C61\uFF0C\u5FC5\u987B\u521B\u5EFA\u4E09\u4E2A\u4E0D\u540C\u7684\u5BF9\u8C61\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">BufferedInputStream</span> bufferedStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ObjectInputStream</span> objectStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bufferedStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>A FileInputStream object provides only rudimentary I/O: it is not capable of performing buffered I/O, nor can it read or write serialized objects. The BufferedInputStream object adds buffering to a FileInputStream, and the ObjectInputStream adds the ability to read and write serialized objects. The first two objects in the code above, fileStream and bufferedStream, are never used once the file has been opened; all future operations use objectStream.</p></blockquote><p>FileInputStream \u5BF9\u8C61\u4EC5\u63D0\u4F9B\u57FA\u672C\u7684 I/O\uFF1A\u5B83\u4E0D\u80FD\u6267\u884C\u7F13\u51B2\u7684 I/O\uFF0C\u4E5F\u4E0D\u80FD\u8BFB\u53D6\u6216\u5199\u5165\u5E8F\u5217\u5316\u7684\u5BF9\u8C61\u3002BufferedInputStream \u5BF9\u8C61\u5C06\u7F13\u51B2\u6DFB\u52A0\u5230 FileInputStream\uFF0C\u800C ObjectInputStream \u6DFB\u52A0\u4E86\u8BFB\u53D6\u548C\u5199\u5165\u5E8F\u5217\u5316\u5BF9\u8C61\u7684\u529F\u80FD\u3002\u4E00\u65E6\u6587\u4EF6\u88AB\u6253\u5F00\uFF0C\u4E0A\u9762\u4EE3\u7801\u4E2D\u7684\u524D\u4E24\u4E2A\u5BF9\u8C61 fileStream \u548C bufferedStream \u5C06\u6C38\u8FDC\u4E0D\u4F1A\u88AB\u4F7F\u7528\u3002\u4EE5\u540E\u7684\u6240\u6709\u64CD\u4F5C\u90FD\u4F7F\u7528 objectStream\u3002</p><blockquote><p>It is particularly annoying (and error-prone) that buffering must be requested explicitly by creating a separate BufferedInputStream object; if a developer forgets to create this object, there will be no buffering and I/O will be slow. Perhaps the Java developers would argue that not everyone wants to use buffering for file I/O, so it shouldn\u2019t be built into the base mechanism. They might argue that it\u2019s better to keep buffering separate, so people can choose whether or not to use it. Providing choice is good, but <strong>interfaces should be designed to make the common case as simple as possible</strong> (see the formula on page 6). Almost every user of file I/O will want buffering, so it should be provided by default. For those few situations where buffering is not desirable, the library can provide a mechanism to disable it. Any mechanism for disabling buffering should be cleanly separated in the interface (for example, by providing a different constructor for FileInputStream, or through a method that disables or replaces the buffering mechanism), so that most developers do not even need to be aware of its existence.</p></blockquote><p>\u7279\u522B\u4EE4\u4EBA\u70E6\u607C\uFF08\u5E76\u4E14\u5BB9\u6613\u51FA\u9519\uFF09\u7684\u662F\uFF0C\u5FC5\u987B\u901A\u8FC7\u521B\u5EFA\u4E00\u4E2A\u5355\u72EC\u7684 BufferedInputStream \u5BF9\u8C61\u6765\u663E\u5F0F\u8BF7\u6C42\u7F13\u51B2\u3002\u5982\u679C\u5F00\u53D1\u4EBA\u5458\u5FD8\u8BB0\u521B\u5EFA\u8BE5\u5BF9\u8C61\uFF0C\u5C06\u6CA1\u6709\u7F13\u51B2\uFF0C\u5E76\u4E14 I/O \u5C06\u53D8\u6162\u3002\u4E5F\u8BB8 Java \u5F00\u53D1\u4EBA\u5458\u4F1A\u4E89\u8FA9\u8BF4\uFF0C\u5E76\u4E0D\u662F\u6BCF\u4E2A\u4EBA\u90FD\u5E0C\u671B\u5BF9\u6587\u4EF6 I/O \u4F7F\u7528\u7F13\u51B2\uFF0C\u56E0\u6B64\u4E0D\u5E94\u5C06\u5176\u5185\u7F6E\u5230\u57FA\u672C\u673A\u5236\u4E2D\u3002\u4ED6\u4EEC\u53EF\u80FD\u4F1A\u4E89\u8FA9\u8BF4\uFF0C\u6700\u597D\u5206\u5F00\u4FDD\u6301\u7F13\u51B2\uFF0C\u4EE5\u4FBF\u4EBA\u4EEC\u53EF\u4EE5\u9009\u62E9\u662F\u5426\u4F7F\u7528\u5B83\u3002\u63D0\u4F9B\u9009\u62E9\u662F\u597D\u7684\uFF0C\u4F46\u662F <strong>\u5E94\u8BE5\u8BBE\u8BA1\u63A5\u53E3\u4EE5\u4F7F\u5E38\u89C1\u60C5\u51B5\u5C3D\u53EF\u80FD\u7B80\u5355</strong> \uFF08\u8BF7\u53C2\u9605\u7B2C 6 \u9875\u7684\u516C\u5F0F\uFF09\u3002\u51E0\u4E4E\u6BCF\u4E2A\u6587\u4EF6 I/O \u7528\u6237\u90FD\u5E0C\u671B\u7F13\u51B2\uFF0C\u56E0\u6B64\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u5E94\u63D0\u4F9B\u7F13\u51B2\u3002\u5BF9\u4E8E\u4E0D\u9700\u8981\u7F13\u51B2\u7684\u5C11\u6570\u60C5\u51B5\uFF0C\u8BE5\u5E93\u53EF\u4EE5\u63D0\u4F9B\u4E00\u79CD\u7981\u7528\u5B83\u7684\u673A\u5236\u3002</p><blockquote><p>In contrast, the designers of the Unix system calls made the common case simple. For example, they recognized that sequential I/O is most common, so they made that the default behavior. Random access is still relatively easy to do, using the lseek system call, but a developer doing only sequential access need not be aware of that mechanism. If an interface has many features, but most developers only need to be aware of a few of them, the effective complexity of that interface is just the complexity of the commonly used features.</p></blockquote><p>\u76F8\u53CD\uFF0CUnix \u7CFB\u7EDF\u8C03\u7528\u7684\u8BBE\u8BA1\u8005\u4F7F\u5E38\u89C1\u60C5\u51B5\u53D8\u5F97\u7B80\u5355\u3002\u4F8B\u5982\uFF0C\u4ED6\u4EEC\u8BA4\u8BC6\u5230\u987A\u5E8F I/O \u662F\u6700\u5E38\u89C1\u7684\uFF0C\u56E0\u6B64\u4ED6\u4EEC\u5C06\u5176\u4F5C\u4E3A\u9ED8\u8BA4\u884C\u4E3A\u3002\u4F7F\u7528 lseek \u7CFB\u7EDF\u8C03\u7528\uFF0C\u968F\u673A\u8BBF\u95EE\u4ECD\u7136\u76F8\u5BF9\u5BB9\u6613\u5B9E\u73B0\uFF0C\u4F46\u662F\u4EC5\u6267\u884C\u987A\u5E8F\u8BBF\u95EE\u7684\u5F00\u53D1\u4EBA\u5458\u65E0\u9700\u4E86\u89E3\u8BE5\u673A\u5236\u3002\u5982\u679C\u4E00\u4E2A\u63A5\u53E3\u5177\u6709\u8BB8\u591A\u529F\u80FD\uFF0C\u4F46\u662F\u5927\u591A\u6570\u5F00\u53D1\u4EBA\u5458\u53EA\u9700\u8981\u4E86\u89E3\u5176\u4E2D\u7684\u4E00\u4E9B\u529F\u80FD\uFF0C\u90A3\u4E48\u8BE5\u63A5\u53E3\u7684\u6709\u6548\u590D\u6742\u6027\u5C31\u662F\u5E38\u7528\u529F\u80FD\u7684\u590D\u6742\u6027\u3002</p><h2 id="_4-8-conclusion-\u7ED3\u8BBA" tabindex="-1"><a class="header-anchor" href="#_4-8-conclusion-\u7ED3\u8BBA" aria-hidden="true">#</a> 4.8 Conclusion \u7ED3\u8BBA</h2><blockquote><p>By separating the interface of a module from its implementation, we can hide the complexity of the implementation from the rest of the system. Users of a module need only understand the abstraction provided by its interface. The most important issue in designing classes and other modules is to make them deep, so that they have simple interfaces for the common use cases, yet still provide significant functionality. This maximizes the amount of complexity that is concealed.</p></blockquote><p>\u901A\u8FC7\u5C06\u6A21\u5757\u7684\u63A5\u53E3\u4E0E\u5176\u5B9E\u73B0\u5206\u5F00\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5C06\u5B9E\u73B0\u7684\u590D\u6742\u6027\u4ECE\u7CFB\u7EDF\u7684\u5176\u4F59\u90E8\u5206\u4E2D\u9690\u85CF\u51FA\u6765\u3002\u6A21\u5757\u7684\u7528\u6237\u53EA\u9700\u8981\u4E86\u89E3\u5176\u63A5\u53E3\u63D0\u4F9B\u7684\u62BD\u8C61\u3002\u8BBE\u8BA1\u7C7B\u548C\u5176\u4ED6\u6A21\u5757\u65F6\uFF0C\u6700\u91CD\u8981\u7684\u95EE\u9898\u662F\u4F7F\u5B83\u4EEC\u66F4\u6DF1\uFF0C\u4EE5\u4F7F\u5B83\u4EEC\u5177\u6709\u9002\u7528\u4E8E\u5E38\u89C1\u7528\u4F8B\u7684\u7B80\u5355\u63A5\u53E3\uFF0C\u4F46\u4ECD\u63D0\u4F9B\u91CD\u8981\u7684\u529F\u80FD\u3002\u8FD9\u4F7F\u9690\u85CF\u7684\u590D\u6742\u6027\u6700\u5927\u5316\u3002</p><blockquote><p><sup>1</sup> There exist languages, mostly in the research community, where the overall behavior of a method or function can be described formally using a specification language. The specification can be checked automatically to ensure that it matches the implementation. An interesting question is whether such a formal specification could replace the informal parts of an interface. My current opinion is that an interface described in English is likely to be more intuitive and understandable for developers than one written in a formal specification language.</p></blockquote><p><sup>1</sup> \u5B58\u5728\u8BED\u8A00\uFF0C\u4E3B\u8981\u662F\u5728\u7814\u7A76\u793E\u533A\u4E2D\uFF0C\u5728\u5176\u4E2D\u53EF\u4EE5\u4F7F\u7528\u89C4\u8303\u8BED\u8A00\u6765\u6B63\u5F0F\u63CF\u8FF0\u65B9\u6CD5\u6216\u529F\u80FD\u7684\u6574\u4F53\u884C\u4E3A\u3002\u53EF\u4EE5\u81EA\u52A8\u68C0\u67E5\u8BE5\u89C4\u8303\u4EE5\u786E\u4FDD\u5B83\u4E0E\u5B9E\u73B0\u76F8\u5339\u914D\u3002\u4E00\u4E2A\u6709\u8DA3\u7684\u95EE\u9898\u662F\uFF0C\u8FD9\u6837\u7684\u6B63\u5F0F\u89C4\u8303\u662F\u5426\u53EF\u4EE5\u4EE3\u66FF\u63A5\u53E3\u7684\u975E\u6B63\u5F0F\u90E8\u5206\u3002\u6211\u76EE\u524D\u7684\u89C2\u70B9\u662F\uFF0C\u7528\u82F1\u8BED\u63CF\u8FF0\u7684\u63A5\u53E3\u6BD4\u4F7F\u7528\u6B63\u5F0F\u89C4\u8303\u8BED\u8A00\u7F16\u5199\u7684\u63A5\u53E3\u5BF9\u5F00\u53D1\u4EBA\u5458\u6765\u8BF4\u66F4\u76F4\u89C2\u548C\u6613\u4E8E\u7406\u89E3\u3002</p>`,90);function o(i,r){return n}var p=e(s,[["render",o],["__file","ch04.html.vue"]]);export{p as default};
