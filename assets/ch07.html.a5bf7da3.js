import{_ as e,e as t}from"./app.cfef1a77.js";import{_ as a,a as s}from"./00016.bec97304.js";const n={},o=t(`<h1 id="\u7B2C-7-\u7AE0-\u4E0D\u540C\u7684\u5C42-\u4E0D\u540C\u7684\u62BD\u8C61" tabindex="-1"><a class="header-anchor" href="#\u7B2C-7-\u7AE0-\u4E0D\u540C\u7684\u5C42-\u4E0D\u540C\u7684\u62BD\u8C61" aria-hidden="true">#</a> \u7B2C 7 \u7AE0 \u4E0D\u540C\u7684\u5C42\uFF0C\u4E0D\u540C\u7684\u62BD\u8C61</h1><blockquote><p>Chapter 7 Different Layer, Different Abstraction</p></blockquote><blockquote><p>Software systems are composed in layers, where higher layers use the facilities provided by lower layers. In a well-designed system, each layer provides a different abstraction from the layers above and below it; if you follow a single operation as it moves up and down through layers by invoking methods, the abstractions change with each method call. For example:</p></blockquote><p>\u8F6F\u4EF6\u7CFB\u7EDF\u7531\u5C42\u7EC4\u6210\uFF0C\u5176\u4E2D\u8F83\u9AD8\u7684\u5C42\u4F7F\u7528\u8F83\u4F4E\u5C42\u63D0\u4F9B\u7684\u529F\u80FD\u3002\u5728\u8BBE\u8BA1\u826F\u597D\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u6BCF\u4E00\u5C42\u90FD\u63D0\u4F9B\u4E0E\u5176\u4E0A\uFF0C\u4E0B\u4E24\u5C42\u4E0D\u540C\u7684\u62BD\u8C61\u3002\u5982\u679C\u60A8\u901A\u8FC7\u8C03\u7528\u65B9\u6CD5\u6765\u8DDF\u8E2A\u4E00\u4E2A\u5728\u5C42\u4E2D\u4E0A\u4E0B\u79FB\u52A8\u7684\u64CD\u4F5C\uFF0C\u90A3\u4E48\u62BD\u8C61\u4F1A\u968F\u7740\u6BCF\u6B21\u65B9\u6CD5\u8C03\u7528\u800C\u6539\u53D8\u3002\u4F8B\u5982\uFF1A</p><blockquote><ul><li>In a file system, the uppermost layer implements a file abstraction. A file consists of a variable-length array of bytes, which can be updated by reading and writing variable-length byte ranges. The next lower layer in the file system implements a cache in memory of fixed-size disk blocks; callers can assume that frequently used blocks will stay in memory where they can be accessed quickly. The lowest layer consists of device drivers, which move blocks between secondary storage devices and memory.</li><li>In a network transport protocol such as TCP, the abstraction provided by the topmost layer is a stream of bytes delivered reliably from one machine to another. This level is built on a lower level that transmits packets of bounded size between machines on a best-effort basis: most packets will be delivered successfully, but some packets may be lost or delivered out of order.</li></ul></blockquote><hr><ul><li>\u5728\u6587\u4EF6\u7CFB\u7EDF\u4E2D\uFF0C\u6700\u4E0A\u5C42\u5B9E\u73B0\u6587\u4EF6\u62BD\u8C61\u3002\u6587\u4EF6\u7531\u53EF\u53D8\u957F\u5EA6\u7684\u5B57\u8282\u6570\u7EC4\u7EC4\u6210\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8BFB\u5199\u53EF\u53D8\u957F\u5EA6\u7684\u5B57\u8282\u8303\u56F4\u6765\u66F4\u65B0\u8BE5\u5B57\u8282\u3002\u6587\u4EF6\u7CFB\u7EDF\u7684\u4E0B\u4E00\u5C42\u5728\u56FA\u5B9A\u5927\u5C0F\u7684\u78C1\u76D8\u5757\u7684\u5185\u5B58\u4E2D\u5B9E\u73B0\u4E86\u9AD8\u901F\u7F13\u5B58\u3002\u8C03\u7528\u8005\u53EF\u4EE5\u5047\u5B9A\u7ECF\u5E38\u4F7F\u7528\u7684\u5757\u5C06\u4FDD\u7559\u5728\u5185\u5B58\u4E2D\uFF0C\u4EE5\u4FBF\u53EF\u4EE5\u5FEB\u901F\u8BBF\u95EE\u5B83\u4EEC\u3002\u6700\u4F4E\u5C42\u7531\u8BBE\u5907\u9A71\u52A8\u7A0B\u5E8F\u7EC4\u6210\uFF0C\u5B83\u4EEC\u5728\u8F85\u52A9\u5B58\u50A8\u8BBE\u5907\u548C\u5185\u5B58\u4E4B\u95F4\u79FB\u52A8\u5757\u3002</li><li>\u5728\u8BF8\u5982 TCP \u7684\u7F51\u7EDC\u4F20\u8F93\u534F\u8BAE\u4E2D\uFF0C\u6700\u9876\u5C42\u63D0\u4F9B\u7684\u62BD\u8C61\u662F\u4ECE\u4E00\u53F0\u673A\u5668\u53EF\u9760\u5730\u4F20\u9012\u5230\u53E6\u4E00\u53F0\u673A\u5668\u7684\u5B57\u8282\u6D41\u3002\u8FD9\u4E2A\u7EA7\u522B\u5EFA\u7ACB\u5728\u4E00\u4E2A\u8F83\u4F4E\u7684\u7EA7\u522B\u4E0A\uFF0C\u5B83\u5728\u673A\u5668\u4E4B\u95F4\u5C3D\u6700\u5927\u52AA\u529B\u4F20\u8F93\u6709\u9650\u5927\u5C0F\u7684\u6570\u636E\u5305:\u5927\u591A\u6570\u6570\u636E\u5305\u4F1A\u6210\u529F\u4F20\u9012\uFF0C\u4F46\u6709\u4E9B\u6570\u636E\u5305\u53EF\u80FD\u4F1A\u4E22\u5931\u6216\u4F20\u9012\u987A\u5E8F\u9519\u8BEF\u3002</li></ul><blockquote><p>If a system contains adjacent layers with similar abstractions, this is a red flag that suggests a problem with the class decomposition. This chapter discusses situations where this happens, the problems that result, and how to refactor to eliminate the problems.</p></blockquote><p>\u5982\u679C\u7CFB\u7EDF\u5305\u542B\u5177\u6709\u76F8\u4F3C\u62BD\u8C61\u7684\u76F8\u90BB\u5C42\uFF0C\u5219\u8FD9\u662F\u4E00\u4E2A\u7EA2\u8272\u6807\u8BB0\uFF0C\u8868\u660E\u7C7B\u5206\u89E3\u5B58\u5728\u95EE\u9898\u3002\u672C\u7AE0\u8BA8\u8BBA\u4E86\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\u7684\u60C5\u51B5\uFF0C\u5BFC\u81F4\u7684\u95EE\u9898\u4EE5\u53CA\u5982\u4F55\u91CD\u6784\u4EE5\u6D88\u9664\u95EE\u9898\u3002\uFF08\u5982\u679C\u4E00\u4E2A\u7CFB\u7EDF\u4E2D\u76F8\u90BB\u7684\u5206\u5C42\uFF0C\u5B58\u5728\u4E86\u76F8\u4F3C\u7684\u62BD\u8C61\u6982\u5FF5\uFF0C\u8FD9\u5C31\u8868\u660E\u5206\u7C7B\u62C6\u89E3\u53EF\u80FD\u5B58\u5728\u95EE\u9898\uFF09</p><h2 id="_7-1-pass-through-methods-\u76F4\u901A\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_7-1-pass-through-methods-\u76F4\u901A\u65B9\u6CD5" aria-hidden="true">#</a> 7.1 Pass-through methods \u76F4\u901A\u65B9\u6CD5</h2><blockquote><p>When adjacent layers have similar abstractions, the problem often manifests itself in the form of pass-through methods. A pass-through method is one that does little except invoke another method, whose signature is similar or identical to that of the calling method. For example, a student project implementing a GUI text editor contained a class consisting almost entirely of pass-through methods. Here is an extract from that class:</p></blockquote><p>\u5F53\u76F8\u90BB\u7684\u5C42\u5177\u6709\u76F8\u4F3C\u7684\u62BD\u8C61\u65F6\uFF0C\u95EE\u9898\u901A\u5E38\u4EE5\u76F4\u901A\u65B9\u6CD5\u7684\u5F62\u5F0F\u8868\u73B0\u51FA\u6765\u3002\u76F4\u901A\u65B9\u6CD5\u662F\u4E00\u79CD\u5F88\u5C11\u6267\u884C\u7684\u65B9\u6CD5\uFF0C\u9664\u4E86\u8C03\u7528\u53E6\u4E00\u4E2A\u65B9\u6CD5\uFF08\u5176\u7B7E\u540D\u4E0E\u8C03\u7528\u65B9\u6CD5\u7684\u7B7E\u540D\u76F8\u4F3C\u6216\u76F8\u540C\uFF09\u4E4B\u5916\u3002\u4F8B\u5982\uFF0C\u4E00\u4E2A\u5B9E\u73B0 GUI \u6587\u672C\u7F16\u8F91\u5668\u7684\u5B66\u751F\u9879\u76EE\u5305\u542B\u4E00\u4E2A\u51E0\u4E4E\u5B8C\u5168\u7531\u76F4\u901A\u65B9\u6CD5\u7EC4\u6210\u7684\u7C7B\u3002\u8FD9\u662F\u8BE5\u7C7B\u7684\u6458\u5F55\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextDocument</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TextArea</span> textArea<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TextDocumentListener</span> listener<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token class-name">Character</span> <span class="token function">getLastTypedCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> textArea<span class="token punctuation">.</span><span class="token function">getLastTypedCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCursorOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> textArea<span class="token punctuation">.</span><span class="token function">getCursorOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertString</span><span class="token punctuation">(</span><span class="token class-name">String</span> textToInsert<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        textArea<span class="token punctuation">.</span><span class="token function">insertString</span><span class="token punctuation">(</span>textToInsert<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">willInsertString</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringToInsert<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            listener<span class="token punctuation">.</span><span class="token function">willInsertString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stringToInsert<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>13 of the 15 public methods in that class were pass-through methods.</p><p>\u8BE5\u7C7B\u522B\u4E2D 15 \u4E2A\u516C\u5171\u65B9\u6CD5\u4E2D\u7684 13 \u4E2A\u662F\u76F4\u901A\u65B9\u6CD5\u3002</p><blockquote><p>img Red Flag: Pass-Through Method img</p></blockquote><blockquote><p>A pass-through method is one that does nothing except pass its arguments to another method, usually with the same API as the pass-through method. This typically indicates that there is not a clean division of responsibility between the classes.</p></blockquote><p>\u76F4\u901A\u65B9\u6CD5\u9664\u4E86\u5C06\u53C2\u6570\u4F20\u9012\u7ED9\u53E6\u5916\u4E00\u4E2A\u4E0E\u5176\u6709\u76F8\u540C API \u7684\u65B9\u6CD5\u5916\uFF0C\u4E0D\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C\u3002\u8FD9\u901A\u5E38\u8868\u793A\u5404\u7C7B\u4E4B\u95F4\u6CA1\u6709\u660E\u786E\u7684\u804C\u8D23\u5212\u5206\u3002</p><blockquote><p>Pass-through methods make classes shallower: they increase the interface complexity of the class, which adds complexity, but they don\u2019t increase the total functionality of the system. Of the four methods above, only the last one has any functionality, and even there it is trivial: the method checks the validity of one variable. Pass-through methods also create dependencies between classes: if the signature changes for the insertString method in TextArea, then the insertString method in TextDocument will have to change to match.</p></blockquote><p>\u76F4\u901A\u65B9\u6CD5\u4F7F\u7C7B\u53D8\u6D45\uFF1A\u5B83\u4EEC\u589E\u52A0\u4E86\u7C7B\u7684\u63A5\u53E3\u590D\u6742\u6027\uFF0C\u4ECE\u800C\u589E\u52A0\u4E86\u590D\u6742\u6027\uFF0C\u4F46\u662F\u5E76\u6CA1\u6709\u589E\u52A0\u7CFB\u7EDF\u7684\u6574\u4F53\u529F\u80FD\u3002\u5728\u4E0A\u8FF0\u56DB\u4E2A\u65B9\u6CD5\u4E2D\uFF0C\u53EA\u6709\u6700\u540E\u4E00\u4E2A\u5177\u6709\u6781\u5C11\u7684\u529F\u80FD\uFF0C\u5373\u4F7F\u6709\u4E5F\u5FAE\u4E4E\u5176\u5FAE\uFF1A\u8BE5\u65B9\u6CD5\u68C0\u67E5\u4E00\u4E2A\u53D8\u91CF\u7684\u6709\u6548\u6027\u3002\u76F4\u901A\u65B9\u6CD5\u8FD8\u4F1A\u5728\u7C7B\u4E4B\u95F4\u521B\u5EFA\u4F9D\u8D56\u5173\u7CFB\uFF1A\u5982\u679C\u9488\u5BF9 TextArea \u4E2D\u7684 insertString \u65B9\u6CD5\u66F4\u6539\u4E86\u7B7E\u540D\uFF0C\u5219\u5FC5\u987B\u66F4\u6539 TextDocument \u4E2D\u7684 insertString \u65B9\u6CD5\u4EE5\u8FDB\u884C\u5339\u914D\u3002</p><blockquote><p>Pass-through methods indicate that there is confusion over the division of responsibility between classes. In the example above, the TextDocument class offers an insertString method, but the functionality for inserting text is implemented entirely in TextArea. This is usually a bad idea: the interface to a piece of functionality should be in the same class that implements the functionality. When you see pass-through methods from one class to another, consider the two classes and ask yourself \u201CExactly which features and abstractions is each of these classes responsible for?\u201D You will probably notice that there is an overlap in responsibility between the classes.</p></blockquote><p>\u76F4\u901A\u65B9\u6CD5\u8868\u660E\u7C7B\u4E4B\u95F4\u7684\u8D23\u4EFB\u5212\u5206\u5B58\u5728\u6DF7\u6DC6\u3002\u5728\u4E0A\u9762\u7684\u793A\u4F8B\u4E2D\uFF0CTextDocument \u7C7B\u63D0\u4F9B\u4E86 insertString \u65B9\u6CD5\uFF0C\u4F46\u662F\u7528\u4E8E\u63D2\u5165\u6587\u672C\u7684\u529F\u80FD\u5B8C\u5168\u5728 TextArea \u4E2D\u5B9E\u73B0\u3002\u8FD9\u901A\u5E38\u662F\u4E00\u4E2A\u574F\u4E3B\u610F\uFF1A\u67D0\u4E2A\u529F\u80FD\u7684\u63A5\u53E3\u5E94\u8BE5\u5728\u5B9E\u73B0\u8BE5\u529F\u80FD\u7684\u540C\u4E00\u7C7B\u4E2D\u3002\u5F53\u60A8\u770B\u5230\u4ECE\u4E00\u4E2A\u7C7B\u5230\u53E6\u4E00\u4E2A\u7C7B\u7684\u76F4\u901A\u65B9\u6CD5\u65F6\uFF0C\u8BF7\u8003\u8651\u8FD9\u4E24\u4E2A\u7C7B\uFF0C\u5E76\u95EE\u81EA\u5DF1\u201C\u8FD9\u4E9B\u7C7B\u5206\u522B\u8D1F\u8D23\u54EA\u4E9B\u529F\u80FD\u548C\u62BD\u8C61\uFF1F\u201D \u60A8\u53EF\u80FD\u4F1A\u6CE8\u610F\u5230\uFF0C\u5404\u7C7B\u4E4B\u95F4\u7684\u804C\u8D23\u91CD\u53E0\u3002</p><blockquote><p>The solution is to refactor the classes so that each class has a distinct and coherent set of responsibilities. Figure 7.1 illustrates several ways to do this. One approach, shown in Figure 7.1(b), is to expose the lower level class directly to the callers of the higher level class, removing all responsibility for the feature from the higher level class. Another approach is to redistribute the functionality between the classes, as in Figure 7.1(c). Finally, if the classes can\u2019t be disentangled, the best solution may be to merge them as in Figure 7.1(d).</p></blockquote><p>\u89E3\u51B3\u65B9\u6848\u662F\u91CD\u6784\u7C7B\uFF0C\u4EE5\u4F7F\u6BCF\u4E2A\u7C7B\u90FD\u6709\u5404\u81EA\u4E0D\u540C\u4E14\u8FDE\u8D2F\u7684\u804C\u8D23\u3002\u56FE 7.1 \u8BF4\u660E\u4E86\u51E0\u79CD\u65B9\u6CD5\u3002\u4E00\u79CD\u65B9\u6CD5\uFF0C\u5982\u56FE 7.1\uFF08b\uFF09\u6240\u793A\uFF0C\u662F\u5C06\u8F83\u4F4E\u7EA7\u522B\u7684\u7C7B\u76F4\u63A5\u66B4\u9732\u7ED9\u8F83\u9AD8\u7EA7\u522B\u7684\u7C7B\u7684\u8C03\u7528\u8005\uFF0C\u800C\u4ECE\u8F83\u9AD8\u7EA7\u522B\u7684\u7C7B\u4E2D\u5220\u9664\u5BF9\u8BE5\u529F\u80FD\u7684\u6240\u6709\u8D23\u4EFB\u3002\u53E6\u4E00\u79CD\u65B9\u6CD5\u662F\u5728\u7C7B\u4E4B\u95F4\u91CD\u65B0\u5206\u914D\u529F\u80FD\uFF0C\u5982\u56FE 7.1\uFF08c\uFF09\u6240\u793A\u3002\u6700\u540E\uFF0C\u5982\u679C\u65E0\u6CD5\u89E3\u5F00\u8FD9\u4E9B\u7C7B\uFF0C\u6700\u597D\u7684\u89E3\u51B3\u65B9\u6848\u53EF\u80FD\u662F\u5982\u56FE 7.1\uFF08d\uFF09\u6240\u793A\u5408\u5E76\u5B83\u4EEC\u3002</p><p><img src="`+a+'" alt=""></p><blockquote><p>Figure 7.1: Pass-through methods. In (a), class C1 contains three pass-through methods, which do nothing but invoke methods with the same signature in C2 (each symbol represents a particular method signature). The pass-through methods can be eliminated by having C1\u2019s callers invoke C2 directly as in (b), by redistributing functionality between C1 and C2 to avoid calls between the classes as in (c), or by combining the classes as in (d).</p></blockquote><p>\u56FE 7.1\uFF1A\u76F4\u901A\u65B9\u6CD5\u3002\u5728\uFF08a\uFF09\u4E2D\uFF0C\u7C7B C1 \u5305\u542B\u4E09\u4E2A\u76F4\u901A\u65B9\u6CD5\uFF0C\u8FD9\u4E9B\u65B9\u6CD5\u53EA\u8C03\u7528 C2 \u4E2D\u5177\u6709\u76F8\u540C\u7B7E\u540D\u7684\u65B9\u6CD5\uFF08\u6BCF\u4E2A\u7B26\u53F7\u4EE3\u8868\u4E00\u4E2A\u7279\u5B9A\u7684\u65B9\u6CD5\u7B7E\u540D\uFF09\u3002\u53EF\u4EE5\u901A\u8FC7\u4F7F C1 \u7684\u8C03\u7528\u65B9\u50CF\u5728\uFF08b\uFF09\u4E2D\u90A3\u6837\u76F4\u63A5\u8C03\u7528 C2\uFF0C\u901A\u8FC7\u5728 C1 \u548C C2 \u4E4B\u95F4\u91CD\u65B0\u5206\u914D\u529F\u80FD\u4EE5\u907F\u514D\u5728\uFF08c\uFF09\u4E2D\u7684\u7C7B\u4E4B\u95F4\u8FDB\u884C\u8C03\u7528\uFF0C\u6216\u8005\u901A\u8FC7\u7EC4\u5408\u5728\uFF08d\uFF09\u4E2D\u7684\u7C7B\u6765\u6D88\u9664\u76F4\u901A\u65B9\u6CD5\u3002 \u3002</p><blockquote><p>In the example above, there were three classes with intertwined responsibilities: TextDocument, TextArea, and TextDocumentListener. The student eliminated the pass-through methods by moving methods between classes and collapsing the three classes into just two, whose responsibilities were more clearly differentiated.</p></blockquote><p>\u5728\u4E0A\u9762\u7684\u793A\u4F8B\u4E2D\uFF0C\u804C\u8D23\u4EA4\u7EC7\u7684\u4E09\u4E2A\u7C7B\u4E3A\uFF1ATextDocument\uFF0CTextArea \u548C TextDocumentListener\u3002\u5B66\u751F\u901A\u8FC7\u5728\u7C7B\u4E4B\u95F4\u79FB\u52A8\u65B9\u6CD5\u5E76\u5C06\u4E09\u4E2A\u7C7B\u7F29\u51CF\u4E3A\u4E24\u4E2A\u7C7B\u6765\u6D88\u9664\u76F4\u901A\u65B9\u6CD5\uFF0C\u8FD9\u4E24\u4E2A\u7C7B\u7684\u804C\u8D23\u66F4\u52A0\u660E\u786E\u3002</p><h2 id="_7-2-when-is-interface-duplication-ok-\u4EC0\u4E48\u65F6\u5019\u53EF\u4EE5\u6709\u91CD\u590D\u7684\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#_7-2-when-is-interface-duplication-ok-\u4EC0\u4E48\u65F6\u5019\u53EF\u4EE5\u6709\u91CD\u590D\u7684\u63A5\u53E3" aria-hidden="true">#</a> 7.2 When is interface duplication OK? \u4EC0\u4E48\u65F6\u5019\u53EF\u4EE5\u6709\u91CD\u590D\u7684\u63A5\u53E3\uFF1F</h2><blockquote><p>Having methods with the same signature is not always bad. The important thing is that each new method should contribute significant functionality. Pass-through methods are bad because they contribute no new functionality.</p></blockquote><p>\u5177\u6709\u76F8\u540C\u7B7E\u540D\u7684\u65B9\u6CD5\u5E76\u4E0D\u603B\u662F\u4E0D\u597D\u7684\u3002\u91CD\u8981\u7684\u662F\uFF0C\u6BCF\u79CD\u65B0\u65B9\u6CD5\u90FD\u5E94\u8D21\u732E\u91CD\u8981\u7684\u529F\u80FD\u3002\u76F4\u901A\u65B9\u6CD5\u5F88\u7CDF\u7CD5\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u4E0D\u63D0\u4F9B\u4EFB\u4F55\u65B0\u529F\u80FD\u3002</p><blockquote><p>One example where it\u2019s useful for a method to call another method with the same signature is a dispatcher. A dispatcher is a method that uses its arguments to select one of several other methods to invoke; then it passes most or all of its arguments to the chosen method. The signature for the dispatcher is often the same as the signature for the methods that it calls. Even so, the dispatcher provides useful functionality: it chooses which of several other methods should carry out each task.</p></blockquote><p>\u4E00\u4E2A\u65B9\u6CD5\u8C03\u7528\u53E6\u4E00\u4E2A\u5177\u6709\u76F8\u540C\u7B7E\u540D\u7684\u65B9\u6CD5\u5F88\u6709\u7528\u7684\u4F8B\u5B50\u662F\u8C03\u5EA6\u5668\u3002\u8C03\u5EA6\u5668\u662F\u4E00\u79CD\u65B9\u6CD5\uFF0C\u5B83\u4F7F\u7528\u81EA\u5DF1\u7684\u53C2\u6570\u4ECE\u5176\u4ED6\u51E0\u79CD\u65B9\u6CD5\u4E2D\u9009\u62E9\u4E00\u79CD\u6765\u8C03\u7528\uFF1B\u7136\u540E\uFF0C\u5B83\u5C06\u5176\u5927\u90E8\u5206\u6216\u5168\u90E8\u53C2\u6570\u4F20\u9012\u7ED9\u9009\u5B9A\u7684\u65B9\u6CD5\u3002\u8C03\u5EA6\u7A0B\u5E8F\u7684\u7B7E\u540D\u901A\u5E38\u4E0E\u5176\u8C03\u7528\u7684\u65B9\u6CD5\u7684\u7B7E\u540D\u76F8\u540C\u3002\u5C3D\u7BA1\u5982\u6B64\uFF0C\u8C03\u5EA6\u7A0B\u5E8F\u8FD8\u662F\u63D0\u4F9B\u4E86\u6709\u7528\u7684\u529F\u80FD:\u5B83\u9009\u62E9\u5176\u4ED6\u51E0\u79CD\u65B9\u6CD5\u4E2D\u7684\u54EA\u4E00\u79CD\u6765\u6267\u884C\u6BCF\u4E2A\u4EFB\u52A1\u3002</p><blockquote><p>For example, when a Web server receives an incoming HTTP request from a Web browser, it invokes a dispatcher that examines the URL in the incoming request and selects a specific method to handle the request. Some URLs might be handled by returning the contents of a file on disk; others might be handled by invoking a procedure in a language such as PHP or JavaScript. The dispatch process can be quite intricate, and is usually driven by a set of rules that are matched against the incoming URL.</p></blockquote><p>\u4F8B\u5982\uFF0C\u5F53 Web \u670D\u52A1\u5668\u4ECE Web \u6D4F\u89C8\u5668\u63A5\u6536\u5230\u4F20\u5165\u7684 HTTP \u8BF7\u6C42\u65F6\uFF0C\u5B83\u5C06\u8C03\u7528\u4E00\u4E2A\u8C03\u5EA6\u5668\u6765\u68C0\u67E5\u4F20\u5165\u8BF7\u6C42\u4E2D\u7684 URL \u5E76\u9009\u62E9\u4E00\u79CD\u7279\u5B9A\u7684\u65B9\u6CD5\u6765\u5904\u7406\u8BE5\u8BF7\u6C42\u3002\u67D0\u4E9B URL \u53EF\u4EE5\u901A\u8FC7\u8FD4\u56DE\u78C1\u76D8\u4E0A\u6587\u4EF6\u7684\u5185\u5BB9\u6765\u5904\u7406\uFF1B\u5176\u4ED6\u7684\u5219\u53EF\u80FD\u901A\u8FC7\u8C03\u7528\u8BF8\u5982 PHP \u6216 JavaScript \u4E4B\u7C7B\u7684\u8BED\u8A00\u7684\u7A0B\u5E8F\u6765\u5904\u7406\u3002\u5206\u53D1\u8FC7\u7A0B\u53EF\u80FD\u975E\u5E38\u590D\u6742\uFF0C\u901A\u5E38\u7531\u4E0E\u4F20\u5165 URL \u5339\u914D\u7684\u4E00\u7EC4\u89C4\u5219\u6765\u9A71\u52A8\u3002</p><blockquote><p>It is fine for several methods to have the same signature as long as each of them provides useful and distinct functionality. The methods invoked by a dispatcher have this property. Another example is interfaces with multiple implementations, such as disk drivers in an operating system. Each driver provides support for a different kind of disk, but they all have the same interface. When several methods provide different implementations of the same interface, it reduces cognitive load. Once you have worked with one of these methods, it\u2019s easier to work with the others, since you don\u2019t need to learn a new interface. Methods like this are usually in the same layer and they don\u2019t invoke each other.</p></blockquote><p>\u53EA\u8981\u6BCF\u79CD\u65B9\u6CD5\u90FD\u63D0\u4F9B\u6709\u7528\u4E14\u72EC\u7279\u7684\u529F\u80FD\uFF0C\u51E0\u79CD\u65B9\u6CD5\u90FD\u5177\u6709\u76F8\u540C\u7684\u7B7E\u540D\u662F\u53EF\u4EE5\u63A5\u53D7\u7684\u3002\u8C03\u5EA6\u7A0B\u5E8F\u8C03\u7528\u7684\u65B9\u6CD5\u5177\u6709\u6B64\u5C5E\u6027\u3002\u53E6\u4E00\u4E2A\u793A\u4F8B\u662F\u5177\u6709\u591A\u79CD\u5B9E\u73B0\u65B9\u5F0F\u7684\u63A5\u53E3\uFF0C\u4F8B\u5982\u64CD\u4F5C\u7CFB\u7EDF\u4E2D\u7684\u78C1\u76D8\u9A71\u52A8\u7A0B\u5E8F\u3002\u6BCF\u4E2A\u9A71\u52A8\u7A0B\u5E8F\u90FD\u652F\u6301\u4E0D\u540C\u7C7B\u578B\u7684\u78C1\u76D8\uFF0C\u4F46\u662F\u5B83\u4EEC\u90FD\u6709\u76F8\u540C\u7684\u63A5\u53E3\u3002\u5F53\u51E0\u79CD\u65B9\u6CD5\u63D0\u4F9B\u540C\u4E00\u63A5\u53E3\u7684\u4E0D\u540C\u5B9E\u73B0\u65F6\uFF0C\u5B83\u5C06\u51CF\u5C11\u8BA4\u77E5\u8D1F\u62C5\u3002\u4F7F\u7528\u5176\u4E2D\u4E00\u79CD\u65B9\u6CD5\u540E\uFF0C\u4E0E\u5176\u4ED6\u65B9\u6CD5\u4E00\u8D77\u4F7F\u7528\u4F1A\u66F4\u5BB9\u6613\uFF0C\u56E0\u4E3A\u60A8\u65E0\u9700\u5B66\u4E60\u65B0\u7684\u63A5\u53E3\u3002\u50CF\u8FD9\u6837\u7684\u65B9\u6CD5\u901A\u5E38\u4F4D\u4E8E\u540C\u4E00\u5C42\uFF0C\u5E76\u4E14\u5B83\u4EEC\u4E0D\u4F1A\u76F8\u4E92\u8C03\u7528\u3002</p><h2 id="_7-3-decorators-\u88C5\u9970\u5668" tabindex="-1"><a class="header-anchor" href="#_7-3-decorators-\u88C5\u9970\u5668" aria-hidden="true">#</a> 7.3 Decorators \u88C5\u9970\u5668</h2><blockquote><p>The decorator design pattern (also known as a \u201Cwrapper\u201D) is one that encourages API duplication across layers. A decorator object takes an existing object and extends its functionality; it provides an API similar or identical to the underlying object, and its methods invoke the methods of the underlying object. In the Java I/O example from Chapter 4, the BufferedInputStream class is a decorator: given an InputStream object, it provides the same API but introduces buffering. For example, when its read method is invoked to read a single character, it invokes read on the underlying InputStream to read a much larger block, and saves the extra characters to satisfy future read calls. Another example occurs in windowing systems: a Window class implements a simple form of window that is not scrollable, and a ScrollableWindow class decorates the Window class by adding horizontal and vertical scrollbars.</p></blockquote><p>\u88C5\u9970\u5668\u8BBE\u8BA1\u6A21\u5F0F(\u4E5F\u79F0\u4E3A\u201C\u5305\u88C5\u5668\u201D)\u662F\u4E00\u79CD\u9F13\u52B1\u8DE8\u5C42\u590D\u5236 API \u7684\u6A21\u5F0F\u3002\u88C5\u9970\u5BF9\u8C61\u63A5\u53D7\u73B0\u6709\u5BF9\u8C61\u5E76\u6269\u5C55\u5176\u529F\u80FD;\u5B83\u63D0\u4F9B\u4E00\u4E2A\u4E0E\u5E95\u5C42\u5BF9\u8C61\u76F8\u4F3C\u6216\u76F8\u540C\u7684 API\uFF0C\u5B83\u7684\u65B9\u6CD5\u8C03\u7528\u5E95\u5C42\u5BF9\u8C61\u7684\u65B9\u6CD5\u3002\u5728\u7B2C 4 \u7AE0\u7684 Java I/O \u793A\u4F8B\u4E2D\uFF0CBufferedInputStream \u7C7B\u662F\u4E00\u4E2A\u88C5\u9970\u5668:\u7ED9\u5B9A\u4E00\u4E2A InputStream \u5BF9\u8C61\uFF0C\u5B83\u63D0\u4F9B\u4E86\u76F8\u540C\u7684 API\uFF0C\u4F46\u662F\u5F15\u5165\u4E86\u7F13\u51B2\u3002\u4F8B\u5982\uFF0C\u5F53\u5B83\u7684 read \u65B9\u6CD5\u88AB\u8C03\u7528\u6765\u8BFB\u53D6\u5355\u4E2A\u5B57\u7B26\u65F6\uFF0C\u5B83\u4F1A\u8C03\u7528\u5E95\u5C42 InputStream \u4E0A\u7684 read \u6765\u8BFB\u53D6\u66F4\u5927\u7684\u5757\uFF0C\u5E76\u4FDD\u5B58\u989D\u5916\u7684\u5B57\u7B26\u6765\u6EE1\u8DB3\u672A\u6765\u7684 read \u8C03\u7528\u3002\u53E6\u4E00\u4E2A\u4F8B\u5B50\u51FA\u73B0\u5728\u7A97\u53E3\u7CFB\u7EDF\u4E2D:Window \u7C7B\u5B9E\u73B0\u4E86\u4E00\u4E2A\u4E0D\u80FD\u6EDA\u52A8\u7684\u7A97\u53E3\u7684\u7B80\u5355\u5F62\u5F0F\uFF0C\u800C ScrollableWindow \u7C7B\u901A\u8FC7\u6DFB\u52A0\u6C34\u5E73\u548C\u5782\u76F4\u6EDA\u52A8\u6761\u6765\u88C5\u9970\u7A97\u53E3\u7C7B\u3002</p><blockquote><p>The motivation for decorators is to separate special-purpose extensions of a class from a more generic core. However, decorator classes tend to be shallow: they introduce a large amount of boilerplate for a small amount of new functionality. Decorator classes often contain many pass-through methods. It\u2019s easy to overuse the decorator pattern, creating a new class for every small new feature. This results in an explosion of shallow classes, such as the Java I/O example.</p></blockquote><p>\u88C5\u9970\u5668\u7684\u52A8\u673A\u662F\u5C06\u7C7B\u7684\u4E13\u7528\u6269\u5C55\u4E0E\u66F4\u901A\u7528\u7684\u6838\u5FC3\u5206\u5F00\u3002\u4F46\u662F\uFF0C\u88C5\u9970\u5668\u7C7B\u5F80\u5F80\u5F88\u6D45\uFF1A\u5B83\u4EEC\u5F15\u5165\u4E86\u5927\u91CF\u7684\u6837\u677F\uFF0C\u4EE5\u5B9E\u73B0\u5C11\u91CF\u7684\u65B0\u529F\u80FD\u3002\u88C5\u9970\u5668\u7C7B\u901A\u5E38\u5305\u542B\u8BB8\u591A\u76F4\u901A\u65B9\u6CD5\u3002\u8FC7\u5EA6\u4F7F\u7528\u88C5\u9970\u5668\u6A21\u5F0F\u5F88\u5BB9\u6613\uFF0C\u4E3A\u6BCF\u4E2A\u5C0F\u7684\u65B0\u529F\u80FD\u521B\u5EFA\u4E00\u4E2A\u65B0\u7C7B\u3002\u8FD9\u5BFC\u81F4\u8BF8\u5982 Java I/O \u793A\u4F8B\u4E4B\u7C7B\u7684\u6D45\u5C42\u7C7B\u6FC0\u589E\u3002</p><blockquote><p>Before creating a decorator class, consider alternatives such as the following:</p></blockquote><p>\u521B\u5EFA\u88C5\u9970\u5668\u7C7B\u4E4B\u524D\uFF0C\u8BF7\u8003\u8651\u4EE5\u4E0B\u66FF\u4EE3\u65B9\u6CD5\uFF1A</p><blockquote><ul><li>Could you add the new functionality directly to the underlying class, rather than creating a decorator class? This makes sense if the new functionality is relatively general-purpose, or if it is logically related to the underlying class, or if most uses of the underlying class will also use the new functionality. For example, virtually everyone who creates a Java InputStream will also create a BufferedInputStream, and buffering is a natural part of I/O, so these classes should have been combined.</li><li>If the new functionality is specialized for a particular use case, would it make sense to merge it with the use case, rather than creating a separate class?</li><li>Could you merge the new functionality with an existing decorator, rather than creating a new decorator? This would result in a single deeper decorator class rather than multiple shallow ones.</li><li>Finally, ask yourself whether the new functionality really needs to wrap the existing functionality: could you implement it as a stand-alone class that is independent of the base class? In the windowing example, the scrollbars could probably be implemented separately from the main window, without wrapping all of its existing functionality.</li></ul></blockquote><hr><ul><li>\u60A8\u80FD\u5426\u5C06\u65B0\u529F\u80FD\u76F4\u63A5\u6DFB\u52A0\u5230\u57FA\u7840\u7C7B\uFF0C\u800C\u4E0D\u662F\u521B\u5EFA\u88C5\u9970\u5668\u7C7B\uFF1F\u5982\u679C\u65B0\u529F\u80FD\u662F\u76F8\u5BF9\u901A\u7528\u7684\uFF0C\u6216\u8005\u5728\u903B\u8F91\u4E0A\u4E0E\u57FA\u7840\u7C7B\u76F8\u5173\uFF0C\u6216\u8005\u5982\u679C\u57FA\u7840\u7C7B\u7684\u5927\u591A\u6570\u4F7F\u7528\u4E5F\u5C06\u4F7F\u7528\u65B0\u529F\u80FD\uFF0C\u5219\u8FD9\u662F\u6709\u610F\u4E49\u7684\u3002\u4F8B\u5982\uFF0C\u51E0\u4E4E\u6BCF\u4E2A\u521B\u5EFA Java InputStream \u7684\u4EBA\u90FD\u4F1A\u521B\u5EFA\u4E00\u4E2A BufferedInputStream\uFF0C\u5E76\u4E14\u7F13\u51B2\u662F I/O \u7684\u81EA\u7136\u7EC4\u6210\u90E8\u5206\uFF0C\u56E0\u6B64\u5E94\u8BE5\u5408\u5E76\u8FD9\u4E9B\u7C7B\u3002</li><li>\u5982\u679C\u65B0\u529F\u80FD\u4E13\u7528\u4E8E\u7279\u5B9A\u7528\u4F8B\uFF0C\u5C06\u5176\u4E0E\u7528\u4F8B\u5408\u5E76\u800C\u4E0D\u662F\u521B\u5EFA\u5355\u72EC\u7684\u7C7B\u662F\u5426\u6709\u610F\u4E49\uFF1F</li><li>\u60A8\u53EF\u4EE5\u5C06\u65B0\u529F\u80FD\u4E0E\u73B0\u6709\u7684\u88C5\u9970\u5668\u5408\u5E76\uFF0C\u800C\u4E0D\u662F\u521B\u5EFA\u65B0\u7684\u88C5\u9970\u5668\u5417\uFF1F\u8FD9\u5C06\u4EA7\u751F\u4E00\u4E2A\u66F4\u6DF1\u7684\u88C5\u9970\u5668\u7C7B\uFF0C\u800C\u4E0D\u662F\u591A\u4E2A\u6D45\u7684\u88C5\u9970\u5668\u7C7B\u3002</li><li>\u6700\u540E\uFF0C\u95EE\u95EE\u81EA\u5DF1\u65B0\u529F\u80FD\u662F\u5426\u771F\u7684\u9700\u8981\u5305\u88C5\u73B0\u6709\u529F\u80FD\uFF1A\u662F\u5426\u53EF\u4EE5\u5C06\u5176\u5B9E\u73B0\u4E3A\u72EC\u7ACB\u4E8E\u57FA\u7C7B\u7684\u72EC\u7ACB\u7C7B\uFF1F\u5728\u7A97\u53E3\u793A\u4F8B\u4E2D\uFF0C\u6EDA\u52A8\u6761\u53EF\u80FD\u4E0E\u4E3B\u7A97\u53E3\u5206\u5F00\u5B9E\u73B0\uFF0C\u800C\u65E0\u9700\u5305\u88C5\u5176\u6240\u6709\u73B0\u6709\u529F\u80FD\u3002</li></ul><blockquote><p>Sometimes decorators make sense, but there is usually a better alternative.</p></blockquote><p>\u6709\u65F6\u88C5\u9970\u8005\u5F88\u6709\u610F\u4E49\uFF0C\u4F46\u901A\u5E38\u6709\u66F4\u597D\u7684\u9009\u62E9\u3002</p><h2 id="_7-4-interface-versus-implementation-\u63A5\u53E3\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_7-4-interface-versus-implementation-\u63A5\u53E3\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 7.4 Interface versus implementation \u63A5\u53E3\u4E0E\u5B9E\u73B0</h2><blockquote><p>Another application of the \u201Cdifferent layer, different abstraction\u201D rule is that the interface of a class should normally be different from its implementation: the representations used internally should be different from the abstractions that appear in the interface. If the two have similar abstractions, then the class probably isn\u2019t very deep. For example, in the text editor project discussed in Chapter 6, most of the teams implemented the text module in terms of lines of text, with each line stored separately. Some of the teams also designed the APIs for the text class around lines, with methods such as getLine and putLine. However, this made the text class shallow and awkward to use. In the higher-level user interface code, it\u2019s common to insert text in the middle of a line (e.g., when the user is typing) or to delete a range of text that spans lines. With a line-oriented API for the text class, callers were forced to split and join lines to implement the user-interface operations. This code was nontrivial and it was duplicated and scattered across the implementation of the user interface.</p></blockquote><p>\u201C\u4E0D\u540C\u5C42\uFF0C\u4E0D\u540C\u62BD\u8C61\u201D\u89C4\u5219\u7684\u53E6\u4E00\u4E2A\u5E94\u7528\u662F\uFF0C\u7C7B\u7684\u63A5\u53E3\u901A\u5E38\u5E94\u4E0E\u5176\u5B9E\u73B0\u4E0D\u540C\uFF1A\u5185\u90E8\u4F7F\u7528\u7684\u8868\u793A\u5F62\u5F0F\u5E94\u4E0E\u63A5\u53E3\u4E2D\u51FA\u73B0\u7684\u62BD\u8C61\u5F62\u5F0F\u4E0D\u540C\u3002\u5982\u679C\u4E24\u8005\u5177\u6709\u76F8\u4F3C\u7684\u62BD\u8C61\uFF0C\u5219\u8BE5\u7C7B\u53EF\u80FD\u4E0D\u662F\u5F88\u6DF1\u3002\u4F8B\u5982\uFF0C\u5728\u7B2C 6 \u7AE0\u8BA8\u8BBA\u7684\u6587\u672C\u7F16\u8F91\u5668\u9879\u76EE\u4E2D\uFF0C\u5927\u591A\u6570\u56E2\u961F\u90FD\u4EE5\u6587\u672C\u884C\u7684\u5F62\u5F0F\u5B9E\u73B0\u4E86\u6587\u672C\u6A21\u5757\uFF0C\u6BCF\u884C\u5206\u522B\u5B58\u50A8\u3002\u4E00\u4E9B\u56E2\u961F\u8FD8\u4F7F\u7528 getLine \u548C putLine \u4E4B\u7C7B\u7684\u65B9\u6CD5\u56F4\u7ED5\u884C\u8BBE\u8BA1\u4E86\u6587\u672C\u7C7B\u7684 API\u3002\u4F46\u662F\uFF0C\u8FD9\u4F7F\u6587\u672C\u7C7B\u4F7F\u7528\u8D77\u6765\u8F83\u6D45\u4E14\u7B28\u62D9\u3002\u5728\u8F83\u9AD8\u7EA7\u522B\u7684\u7528\u6237\u754C\u9762\u4EE3\u7801\u4E2D\uFF0C\u901A\u5E38\u5728\u884C\u4E2D\u95F4\u63D2\u5165\u6587\u672C\uFF08\u4F8B\u5982\uFF0C\u5F53\u7528\u6237\u952E\u5165\u5185\u5BB9\u65F6\uFF09\u6216\u5220\u9664\u8DE8\u884C\u7684\u6587\u672C\u8303\u56F4\u3002\u901A\u8FC7\u7528\u4E8E\u6587\u672C\u7C7B\u7684\u9762\u5411\u884C\u7684 API\uFF0C\u8C03\u7528\u8005\u88AB\u8FEB\u62C6\u5206\u548C\u5408\u5E76\u884C\u4EE5\u5B9E\u73B0\u7528\u6237\u754C\u9762\u64CD\u4F5C\u3002\u8FD9\u6BB5\u4EE3\u7801\u5F88\u7B80\u5355\uFF0C\u5E76\u4E14\u5728\u7528\u6237\u754C\u9762\u7684\u5B9E\u73B0\u4E2D\u88AB\u590D\u5236\u548C\u6563\u5E03\u3002</p><blockquote><p>The text classes were much easier to use when they provided a character-oriented interface, such as an insert method that inserts an arbitrary string of text (which may include newlines) at an arbitrary position in the text and a delete method that deletes the text between two arbitrary positions in the text. Internally, the text was still represented in terms of lines. A character-oriented interface encapsulates the complexity of line splitting and joining inside the text class, which makes the text class deeper and simplifies higher level code that uses the class. With this approach, the text API is quite different from the line-oriented storage mechanism; the difference represents valuable functionality provided by the class.</p></blockquote><p>\u6587\u672C\u7C7B\u63D0\u4F9B\u9762\u5411\u5B57\u7B26\u7684\u63A5\u53E3\u65F6\uFF0C\u4F7F\u7528\u8D77\u6765\u8981\u5BB9\u6613\u5F97\u591A\uFF0C\u4F8B\u5982\uFF0Cinsert \u65B9\u6CD5\u53EF\u5728\u6587\u672C\u7684\u4EFB\u610F\u4F4D\u7F6E\u63D2\u5165\u4EFB\u610F\u6587\u672C\u5B57\u7B26\u4E32\uFF08\u53EF\u80FD\u5305\u62EC\u6362\u884C\u7B26\uFF09\uFF0C\u800C delete \u65B9\u6CD5\u5219\u5220\u9664\u6587\u672C\u5728\u6587\u672C\u4E2D\u7684\u4E24\u4E2A\u4EFB\u610F\u4F4D\u7F6E\u4E4B\u95F4\u3002\u5728\u5185\u90E8\uFF0C\u6587\u672C\u4ECD\u4EE5\u884C\u8868\u793A\u3002\u9762\u5411\u5B57\u7B26\u7684\u63A5\u53E3\u5C01\u88C5\u4E86\u6587\u672C\u7C7B\u5185\u90E8\u7684\u884C\u62C6\u5206\u548C\u8FDE\u63A5\u7684\u590D\u6742\u6027\uFF0C\u8FD9\u4F7F\u6587\u672C\u7C7B\u66F4\u6DF1\uFF0C\u5E76\u7B80\u5316\u4E86\u4F7F\u7528\u8BE5\u7C7B\u7684\u9AD8\u7EA7\u4EE3\u7801\u3002\u901A\u8FC7\u8FD9\u79CD\u65B9\u6CD5\uFF0C\u6587\u672C API \u4E0E\u9762\u5411\u884C\u7684\u5B58\u50A8\u673A\u5236\u5927\u4E0D\u76F8\u540C\u3002\u5DEE\u5F02\u8868\u793A\u8BE5\u7C7B\u63D0\u4F9B\u7684\u6709\u4EF7\u503C\u7684\u529F\u80FD\u3002</p><h2 id="_7-5-pass-through-variables-\u4F20\u9012\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#_7-5-pass-through-variables-\u4F20\u9012\u53D8\u91CF" aria-hidden="true">#</a> 7.5 Pass-through variables \u4F20\u9012\u53D8\u91CF</h2><blockquote><p>Another form of API duplication across layers is a pass-through variable, which is a variable that is passed down through a long chain of methods. Figure 7.2(a) shows an example from a datacenter service. A command-line argument describes certificates to use for secure communication. This information is only needed by a low-level method m3, which calls a library method to open a socket, but it is passed down through all the methods on the path between main and m3. The cert variable appears in the signature of each of the intermediate methods.</p></blockquote><p>\u8DE8\u5C42 API \u91CD\u590D\u7684\u53E6\u4E00\u79CD\u5F62\u5F0F\u662F\u4F20\u9012\u53D8\u91CF\uFF0C\u8BE5\u53D8\u91CF\u662F\u901A\u8FC7\u4E00\u957F\u4E32\u65B9\u6CD5\u5411\u4E0B\u4F20\u9012\u7684\u53D8\u91CF\u3002\u56FE 7.2\uFF08a\uFF09\u663E\u793A\u4E86\u6570\u636E\u4E2D\u5FC3\u670D\u52A1\u7684\u793A\u4F8B\u3002\u547D\u4EE4\u884C\u53C2\u6570\u63CF\u8FF0\u7528\u4E8E\u5B89\u5168\u901A\u4FE1\u7684\u8BC1\u4E66\u3002\u53EA\u6709\u5E95\u5C42\u65B9\u6CD5 m3 \u624D\u9700\u8981\u6B64\u4FE1\u606F\uFF0C\u8BE5\u65B9\u6CD5\u8C03\u7528\u4E00\u4E2A\u5E93\u65B9\u6CD5\u6765\u6253\u5F00\u5957\u63A5\u5B57\uFF0C\u4F46\u662F\u8BE5\u4FE1\u606F\u4F1A\u901A\u8FC7 main \u548C m3 \u4E4B\u95F4\u8DEF\u5F84\u4E0A\u7684\u6240\u6709\u65B9\u6CD5\u5411\u4E0B\u4F20\u9012\u3002cert \u53D8\u91CF\u51FA\u73B0\u5728\u6BCF\u4E2A\u4E2D\u95F4\u65B9\u6CD5\u7684\u7B7E\u540D\u4E2D\u3002</p><blockquote><p>Pass-through variables add complexity because they force all of the intermediate methods to be aware of their existence, even though the methods have no use for the variables. Furthermore, if a new variable comes into existence (for example, a system is initially built without support for certificates, but you later decide to add that support), you may have to modify a large number of interfaces and methods to pass the variable through all of the relevant paths.</p></blockquote><p>\u4F20\u9012\u53D8\u91CF\u589E\u52A0\u4E86\u590D\u6742\u6027\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u5F3A\u5236\u6240\u6709\u4E2D\u95F4\u65B9\u6CD5\u77E5\u9053\u5B83\u4EEC\u7684\u5B58\u5728\uFF0C\u5373\u4F7F\u8FD9\u4E9B\u65B9\u6CD5\u5BF9\u53D8\u91CF\u6CA1\u6709\u7528\u5904\u3002\u6B64\u5916\uFF0C\u5982\u679C\u5B58\u5728\u4E00\u4E2A\u65B0\u53D8\u91CF\uFF08\u4F8B\u5982\uFF0C\u6700\u521D\u6784\u5EFA\u7684\u7CFB\u7EDF\u4E0D\u652F\u6301\u8BC1\u4E66\uFF0C\u4F46\u662F\u60A8\u540E\u6765\u51B3\u5B9A\u6DFB\u52A0\u8BE5\u652F\u6301\uFF09\uFF0C\u5219\u53EF\u80FD\u5FC5\u987B\u4FEE\u6539\u5927\u91CF\u7684\u63A5\u53E3\u548C\u65B9\u6CD5\u624D\u80FD\u5C06\u53D8\u91CF\u4F20\u9012\u7ED9\u6240\u6709\u76F8\u5173\u8DEF\u5F84\u3002</p><blockquote><p>Eliminating pass-through variables can be challenging. One approach is to see if there is already an object shared between the topmost and bottommost methods. In the datacenter service example of Figure 7.2, perhaps there is an object containing other information about network communication, which is available to both main and m3. If so, main can store the certificate information in that object, so it needn\u2019t be passed through all of the intervening methods on the path to m3 (see Figure 7.2(b)). However, if there is such an object, then it may itself be a pass-through variable (how else does m3 get access to it?).</p></blockquote><p>\u6D88\u9664\u4F20\u9012\u53D8\u91CF\u53EF\u80FD\u5177\u6709\u6311\u6218\u6027\u3002\u4E00\u79CD\u65B9\u6CD5\u662F\u67E5\u770B\u6700\u9876\u5C42\u548C\u6700\u5E95\u5C42\u65B9\u6CD5\u4E4B\u95F4\u662F\u5426\u5DF2\u5171\u4EAB\u5BF9\u8C61\u3002\u5728\u56FE 7.2 \u7684\u6570\u636E\u4E2D\u5FC3\u670D\u52A1\u793A\u4F8B\u4E2D\uFF0C\u4E5F\u8BB8\u5B58\u5728\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5176\u4E2D\u5305\u542B\u6709\u5173\u7F51\u7EDC\u901A\u4FE1\u7684\u5176\u4ED6\u4FE1\u606F\uFF0C\u8FD9\u5BF9\u4E8E main \u548C m3 \u90FD\u662F\u53EF\u7528\u7684\u3002\u5982\u679C\u662F\u8FD9\u6837\uFF0Cmain \u53EF\u4EE5\u5C06\u8BC1\u4E66\u4FE1\u606F\u5B58\u50A8\u5728\u8BE5\u5BF9\u8C61\u4E2D\uFF0C\u56E0\u6B64\u4E0D\u5FC5\u901A\u8FC7\u901A\u5F80 m3 \u7684\u8DEF\u5F84\u4E0A\u7684\u6240\u6709\u5E72\u9884\u65B9\u6CD5\u6765\u4F20\u9012\u8BC1\u4E66\uFF08\u8BF7\u53C2\u89C1\u56FE 7.2\uFF08b\uFF09\uFF09\u3002\u4F46\u662F\uFF0C\u5982\u679C\u5B58\u5728\u8FD9\u6837\u7684\u5BF9\u8C61\uFF0C\u5219\u5B83\u672C\u8EAB\u53EF\u80FD\u662F\u4F20\u9012\u53D8\u91CF\uFF08m3 \u8FD8\u5C06\u5982\u4F55\u8BBF\u95EE\u5B83\uFF1F\uFF09\u3002</p><blockquote><p>Another approach is to store the information in a global variable, as in Figure 7.2(c). This avoids the need to pass the information from method to method, but global variables almost always create other problems. For example, global variables make it impossible to create two independent instances of the same system in the same process, since accesses to the global variables will conflict. It may seem unlikely that you would need multiple instances in production, but they are often useful in testing.</p></blockquote><p>\u53E6\u4E00\u79CD\u65B9\u6CD5\u662F\u5C06\u4FE1\u606F\u5B58\u50A8\u5728\u5168\u5C40\u53D8\u91CF\u4E2D\uFF0C\u5982\u56FE 7.2\uFF08c\uFF09\u6240\u793A\u3002\u8FD9\u907F\u514D\u4E86\u5C06\u4FE1\u606F\u4ECE\u4E00\u4E2A\u65B9\u6CD5\u4F20\u9012\u5230\u53E6\u4E00\u4E2A\u65B9\u6CD5\u7684\u9700\u8981\uFF0C\u4F46\u662F\u5168\u5C40\u53D8\u91CF\u51E0\u4E4E\u603B\u662F\u4F1A\u4EA7\u751F\u5176\u4ED6\u95EE\u9898\u3002\u4F8B\u5982\uFF0C\u5168\u5C40\u53D8\u91CF\u4F7F\u5F97\u4E0D\u53EF\u80FD\u5728\u540C\u4E00\u8FC7\u7A0B\u4E2D\u521B\u5EFA\u540C\u4E00\u7CFB\u7EDF\u7684\u4E24\u4E2A\u72EC\u7ACB\u5B9E\u4F8B\uFF0C\u56E0\u4E3A\u5BF9\u5168\u5C40\u53D8\u91CF\u7684\u8BBF\u95EE\u4F1A\u53D1\u751F\u51B2\u7A81\u3002\u5728\u751F\u4EA7\u4E2D\u4F3C\u4E4E\u4E0D\u592A\u53EF\u80FD\u9700\u8981\u591A\u4E2A\u5B9E\u4F8B\uFF0C\u4F46\u662F\u5B83\u4EEC\u901A\u5E38\u5728\u6D4B\u8BD5\u4E2D\u5F88\u6709\u7528\u3002</p><blockquote><p>The solution I use most often is to introduce a context object as in Figure 7.2(d). A context stores all of the application\u2019s global state (anything that would otherwise be a pass-through variable or global variable). Most applications have multiple variables in their global state, representing things such as configuration options, shared subsystems, and performance counters. There is one context object per instance of the system. The context allows multiple instances of the system to coexist in a single process, each with its own context.</p></blockquote><p>\u6211\u6700\u5E38\u4F7F\u7528\u7684\u89E3\u51B3\u65B9\u6848\u662F\u5F15\u5165\u4E00\u4E2A\u4E0A\u4E0B\u6587\u5BF9\u8C61\uFF0C\u5982\u56FE 7.2\uFF08d\uFF09\u6240\u793A\u3002\u4E0A\u4E0B\u6587\u5B58\u50A8\u5E94\u7528\u7A0B\u5E8F\u7684\u6240\u6709\u5168\u5C40\u72B6\u6001\uFF08\u5426\u5219\u5C06\u662F\u4F20\u9012\u53D8\u91CF\u6216\u5168\u5C40\u53D8\u91CF\u7684\u4EFB\u4F55\u72B6\u6001\uFF09\u3002\u5927\u591A\u6570\u5E94\u7528\u7A0B\u5E8F\u5728\u5176\u5168\u5C40\u72B6\u6001\u4E0B\u5177\u6709\u591A\u4E2A\u53D8\u91CF\uFF0C\u8FD9\u4E9B\u53D8\u91CF\u8868\u793A\u8BF8\u5982\u914D\u7F6E\u9009\u9879\uFF0C\u5171\u4EAB\u5B50\u7CFB\u7EDF\u548C\u6027\u80FD\u8BA1\u6570\u5668\u4E4B\u7C7B\u7684\u5185\u5BB9\u3002\u6BCF\u4E2A\u7CFB\u7EDF\u5B9E\u4F8B\u53EA\u6709\u4E00\u4E2A\u4E0A\u4E0B\u6587\u5BF9\u8C61\u3002\u4E0A\u4E0B\u6587\u5141\u8BB8\u7CFB\u7EDF\u7684\u591A\u4E2A\u5B9E\u4F8B\u5728\u5355\u4E2A\u8FDB\u7A0B\u4E2D\u5171\u5B58\uFF0C\u6BCF\u4E2A\u5B9E\u4F8B\u90FD\u6709\u81EA\u5DF1\u7684\u4E0A\u4E0B\u6587\u3002</p><blockquote><p>Unfortunately, the context will probably be needed in many places, so it can potentially become a pass-through variable. To reduce the number of methods that must be aware of it, a reference to the context can be saved in most of the system\u2019s major objects. In the example of Figure 7.2(d), the class containing m3 stores a reference to the context as an instance variable in its objects. When a new object is created, the creating method retrieves the context reference from its object and passes it to the constructor for the new object. With this approach, the context is available everywhere, but it only appears as an explicit argument in constructors.</p></blockquote><p>\u4E0D\u5E78\u7684\u662F\uFF0C\u5728\u8BB8\u591A\u5730\u65B9\u53EF\u80FD\u90FD\u9700\u8981\u4E0A\u4E0B\u6587\uFF0C\u56E0\u6B64\u5B83\u6709\u53EF\u80FD\u6210\u4E3A\u4F20\u9012\u53D8\u91CF\u3002\u4E3A\u4E86\u51CF\u5C11\u5FC5\u987B\u610F\u8BC6\u5230\u7684\u65B9\u6CD5\u6570\u91CF\uFF0C\u53EF\u4EE5\u5C06\u4E0A\u4E0B\u6587\u7684\u5F15\u7528\u4FDD\u5B58\u5728\u7CFB\u7EDF\u7684\u5927\u591A\u6570\u4E3B\u8981\u5BF9\u8C61\u4E2D\u3002\u5728\u56FE 7.2\uFF08d\uFF09\u7684\u793A\u4F8B\u4E2D\uFF0C\u5305\u542B m3 \u7684\u7C7B\u5C06\u5BF9\u4E0A\u4E0B\u6587\u7684\u5F15\u7528\u4F5C\u4E3A\u5B9E\u4F8B\u53D8\u91CF\u5B58\u50A8\u5728\u5176\u5BF9\u8C61\u4E2D\u3002\u521B\u5EFA\u65B0\u5BF9\u8C61\u65F6\uFF0C\u521B\u5EFA\u65B9\u6CD5\u5C06\u4ECE\u5176\u5BF9\u8C61\u4E2D\u68C0\u7D22\u4E0A\u4E0B\u6587\u5F15\u7528\uFF0C\u5E76\u5C06\u5176\u4F20\u9012\u7ED9\u65B0\u5BF9\u8C61\u7684\u6784\u9020\u51FD\u6570\u3002\u4F7F\u7528\u8FD9\u79CD\u65B9\u6CD5\uFF0C\u4E0A\u4E0B\u6587\u968F\u5904\u53EF\u89C1\uFF0C\u4F46\u5728\u6784\u9020\u51FD\u6570\u4E2D\u4EC5\u4F5C\u4E3A\u663E\u5F0F\u53C2\u6570\u51FA\u73B0\u3002</p><p><img src="'+s+'" alt=""></p><blockquote><p>Figure 7.2: Possible techniques for dealing with a pass-through variable. In (a), cert is passed through methods m1 and m2 even though they don\u2019t use it. In (b), main and m3 have shared access to an object, so the variable can be stored there instead of passing it through m1 and m2. In (c), cert is stored as a global variable. In (d), cert is stored in a context object along with other system-wide information, such as a timeout value and performance counters; a reference to the context is stored in all objects whose methods need access to it.</p></blockquote><p>\u56FE 7.2\uFF1A\u5904\u7406\u4F20\u9012\u53D8\u91CF\u7684\u53EF\u80FD\u6280\u672F\u3002\u5728\uFF08a\uFF09\u4E2D\uFF0C\u8BC1\u4E66\u901A\u8FC7\u65B9\u6CD5 m1 \u548C m2 \u4F20\u9012\uFF0C\u5373\u4F7F\u5B83\u4EEC\u4E0D\u4F7F\u7528\u5B83\u4E5F\u662F\u5982\u6B64\u3002\u5728\uFF08b\uFF09\u4E2D\uFF0Cmain \u548C m3 \u5177\u6709\u5BF9\u4E00\u4E2A\u5BF9\u8C61\u7684\u5171\u4EAB\u8BBF\u95EE\u6743\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5C06\u53D8\u91CF\u5B58\u50A8\u5728\u6B64\u5904\uFF0C\u800C\u4E0D\u7528\u5C06\u5176\u4F20\u9012\u7ED9 m1 \u548C m2\u3002\u5728\uFF08c\uFF09\u4E2D\uFF0Ccert \u5B58\u50A8\u4E3A\u5168\u5C40\u53D8\u91CF\u3002\u5728\uFF08d\uFF09\u4E2D\uFF0C\u8BC1\u4E66\u4E0E\u5176\u4ED6\u7CFB\u7EDF\u8303\u56F4\u7684\u4FE1\u606F\uFF08\u4F8B\u5982\u8D85\u65F6\u503C\u548C\u6027\u80FD\u8BA1\u6570\u5668\uFF09\u4E00\u8D77\u5B58\u50A8\u5728\u4E0A\u4E0B\u6587\u5BF9\u8C61\u4E2D\uFF1B\u5BF9\u4E0A\u4E0B\u6587\u7684\u5F15\u7528\u5B58\u50A8\u5728\u5176\u65B9\u6CD5\u9700\u8981\u8BBF\u95EE\u5B83\u7684\u6240\u6709\u5BF9\u8C61\u4E2D\u3002</p><blockquote><p>The context object unifies the handling of all system-global information and eliminates the need for pass-through variables. If a new variable needs to be added, it can be added to the context object; no existing code is affected except for the constructor and destructor for the context. The context makes it easy to identify and manage the global state of the system, since it is all stored in one place. The context is also convenient for testing: test code can change the global configuration of the application by modifying fields in the context. It would be much more difficult to implement such changes if the system used pass-through variables.</p></blockquote><p>\u4E0A\u4E0B\u6587\u5BF9\u8C61\u7EDF\u4E00\u4E86\u6240\u6709\u7CFB\u7EDF\u5168\u5C40\u4FE1\u606F\u7684\u5904\u7406\uFF0C\u5E76\u4E14\u4E0D\u9700\u8981\u4F20\u9012\u53D8\u91CF\u3002\u5982\u679C\u9700\u8981\u6DFB\u52A0\u65B0\u53D8\u91CF\uFF0C\u5219\u53EF\u4EE5\u5C06\u5176\u6DFB\u52A0\u5230\u4E0A\u4E0B\u6587\u5BF9\u8C61\uFF1B\u9664\u4E86\u4E0A\u4E0B\u6587\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570\u5916\uFF0C\u73B0\u6709\u4EE3\u7801\u5747\u4E0D\u53D7\u5F71\u54CD\u3002\u7531\u4E8E\u4E0A\u4E0B\u6587\u5168\u90E8\u5B58\u50A8\u5728\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u4E0A\u4E0B\u6587\u53EF\u4EE5\u8F7B\u677E\u8BC6\u522B\u548C\u7BA1\u7406\u7CFB\u7EDF\u7684\u5168\u5C40\u72B6\u6001\u3002\u4E0A\u4E0B\u6587\u4E5F\u4FBF\u4E8E\u6D4B\u8BD5\uFF1A\u6D4B\u8BD5\u4EE3\u7801\u53EF\u4EE5\u901A\u8FC7\u4FEE\u6539\u4E0A\u4E0B\u6587\u4E2D\u7684\u5B57\u6BB5\u6765\u66F4\u6539\u5E94\u7528\u7A0B\u5E8F\u7684\u5168\u5C40\u914D\u7F6E\u3002\u5982\u679C\u7CFB\u7EDF\u4F7F\u7528\u4F20\u9012\u53D8\u91CF\uFF0C\u5219\u5B9E\u65BD\u6B64\u7C7B\u66F4\u6539\u5C06\u66F4\u52A0\u56F0\u96BE\u3002</p><blockquote><p>Contexts are far from an ideal solution. The variables stored in a context have most of the disadvantages of global variables; for example, it may not be obvious why a particular variable is present, or where it is used. Without discipline, a context can turn into a huge grab-bag of data that creates nonobvious dependencies throughout the system. Contexts may also create thread-safety issues; the best way to avoid problems is for variables in a context to be immutable. Unfortunately, I haven\u2019t found a better solution than contexts.</p></blockquote><p>\u4E0A\u4E0B\u6587\u8FDC\u975E\u7406\u60F3\u7684\u89E3\u51B3\u65B9\u6848\u3002\u5B58\u50A8\u5728\u4E0A\u4E0B\u6587\u4E2D\u7684\u53D8\u91CF\u5177\u6709\u5168\u5C40\u53D8\u91CF\u7684\u5927\u591A\u6570\u7F3A\u70B9\u3002\u4F8B\u5982\uFF0C\u4E3A\u4EC0\u4E48\u5B58\u5728\u7279\u5B9A\u53D8\u91CF\u6216\u5728\u4F55\u5904\u4F7F\u7528\u7279\u5B9A\u53D8\u91CF\u53EF\u80FD\u5E76\u4E0D\u660E\u663E\u3002\u6CA1\u6709\u7EAA\u5F8B\uFF0C\u4E0A\u4E0B\u6587\u4F1A\u53D8\u6210\u5DE8\u5927\u7684\u6570\u636E\u6293\u5305\uFF0C\u4ECE\u800C\u5728\u6574\u4E2A\u7CFB\u7EDF\u4E2D\u521B\u5EFA\u4E0D\u660E\u663E\u7684\u4F9D\u8D56\u5173\u7CFB\u3002\u4E0A\u4E0B\u6587\u4E5F\u53EF\u80FD\u4EA7\u751F\u7EBF\u7A0B\u5B89\u5168\u95EE\u9898\uFF1B\u907F\u514D\u95EE\u9898\u7684\u6700\u4F73\u65B9\u6CD5\u662F\u4F7F\u4E0A\u4E0B\u6587\u4E2D\u7684\u53D8\u91CF\u4E0D\u53EF\u53D8\u3002\u4E0D\u5E78\u7684\u662F\uFF0C\u6211\u6CA1\u6709\u627E\u5230\u6BD4\u4E0A\u4E0B\u6587\u66F4\u597D\u7684\u89E3\u51B3\u65B9\u6848\u3002</p><h2 id="_7-6-conclusion-\u7ED3\u8BBA" tabindex="-1"><a class="header-anchor" href="#_7-6-conclusion-\u7ED3\u8BBA" aria-hidden="true">#</a> 7.6 Conclusion \u7ED3\u8BBA</h2><blockquote><p>Each piece of design infrastructure added to a system, such as an interface, argument, function, class, or definition, adds complexity, since developers must learn about this element. In order for an element to provide a net gain against complexity, it must eliminate some complexity that would be present in the absence of the design element. Otherwise, you are better off implementing the system without that particular element. For example, a class can reduce complexity by encapsulating functionality so that users of the class needn\u2019t be aware of it.</p></blockquote><p>\u6DFB\u52A0\u5230\u7CFB\u7EDF\u4E2D\u7684\u6BCF\u4E00\u4E2A\u8BBE\u8BA1\u57FA\u7840\u8BBE\u65BD\uFF0C\u5982\u63A5\u53E3\u3001\u53C2\u6570\u3001\u51FD\u6570\u3001\u7C7B\u6216\u5B9A\u4E49\uFF0C\u90FD\u4F1A\u589E\u52A0\u590D\u6742\u6027\uFF0C\u56E0\u4E3A\u5F00\u53D1\u4EBA\u5458\u5FC5\u987B\u4E86\u89E3\u8FD9\u4E2A\u5143\u7D20\u3002\u4E3A\u4E86\u4F7F\u4E00\u4E2A\u5143\u7D20\u63D0\u4F9B\u5BF9\u6297\u590D\u6742\u6027\u7684\u51C0\u589E\u76CA\uFF0C\u5B83\u5FC5\u987B\u6D88\u9664\u5728\u6CA1\u6709\u8BBE\u8BA1\u5143\u7D20\u7684\u60C5\u51B5\u4E0B\u51FA\u73B0\u7684\u4E00\u4E9B\u590D\u6742\u6027\u3002\u5426\u5219\uFF0C\u60A8\u6700\u597D\u5728\u6CA1\u6709\u8BE5\u7279\u5B9A\u5143\u7D20\u7684\u60C5\u51B5\u4E0B\u5B9E\u73B0\u8BE5\u7CFB\u7EDF\u3002\u4F8B\u5982\uFF0C\u4E00\u4E2A\u7C7B\u53EF\u4EE5\u901A\u8FC7\u5C01\u88C5\u529F\u80FD\u6765\u964D\u4F4E\u590D\u6742\u6027\uFF0C\u8FD9\u6837\u8BE5\u7C7B\u7684\u7528\u6237\u5C31\u4E0D\u5FC5\u77E5\u9053\u5B83\u4E86\u3002</p><blockquote><p>The \u201Cdifferent layer, different abstraction\u201D rule is just an application of this idea: if different layers have the same abstraction, such as pass-through methods or decorators, then there\u2019s a good chance that they haven\u2019t provided enough benefit to compensate for the additional infrastructure they represent. Similarly, pass-through arguments require each of several methods to be aware of their existence (which adds to complexity) without contributing additional functionality.</p></blockquote><p>\u201C\u4E0D\u540C\u7684\u5C42\uFF0C\u4E0D\u540C\u7684\u62BD\u8C61\u201D\u89C4\u5219\u53EA\u662F\u6B64\u601D\u60F3\u7684\u4E00\u79CD\u5E94\u7528\uFF1A\u5982\u679C\u4E0D\u540C\u7684\u5C42\u5177\u6709\u76F8\u540C\u7684\u62BD\u8C61\uFF0C\u4F8B\u5982\u76F4\u901A\u65B9\u6CD5\u6216\u88C5\u9970\u5668\uFF0C\u5219\u5F88\u6709\u53EF\u80FD\u5B83\u4EEC\u6CA1\u6709\u63D0\u4F9B\u8DB3\u591F\u7684\u5229\u76CA\u6765\u8865\u507F\u5B83\u4EEC\u4EE3\u8868\u7684\u5176\u4ED6\u57FA\u7840\u7ED3\u6784\u3002\u7C7B\u4F3C\u5730\uFF0C\u4F20\u9012\u53C2\u6570\u8981\u6C42\u51E0\u79CD\u65B9\u6CD5\u4E2D\u7684\u6BCF\u4E00\u79CD\u90FD\u77E5\u9053\u5B83\u4EEC\u7684\u5B58\u5728\uFF08\u8FD9\u589E\u52A0\u4E86\u590D\u6742\u6027\uFF09\uFF0C\u800C\u53C8\u4E0D\u63D0\u4F9B\u5176\u4ED6\u529F\u80FD\u3002</p>',80);function i(r,l){return o}var p=e(n,[["render",i],["__file","ch07.html.vue"]]);export{p as default};
