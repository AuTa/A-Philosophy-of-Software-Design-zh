import{_ as e,d as t}from"./app.1740b38e.js";var n="/A-Philosophy-of-Software-Design-zh/assets/00017.caebeb81.gif",o="/A-Philosophy-of-Software-Design-zh/assets/00018.edaa8e8d.gif",a="/A-Philosophy-of-Software-Design-zh/assets/00019.6cb8754a.jpeg";const s={},i=t('<h1 id="\u7B2C-9-\u7AE0-\u5728\u4E00\u8D77\u66F4\u597D\u8FD8\u662F\u5206\u5F00\u66F4\u597D" tabindex="-1"><a class="header-anchor" href="#\u7B2C-9-\u7AE0-\u5728\u4E00\u8D77\u66F4\u597D\u8FD8\u662F\u5206\u5F00\u66F4\u597D" aria-hidden="true">#</a> \u7B2C 9 \u7AE0 \u5728\u4E00\u8D77\u66F4\u597D\u8FD8\u662F\u5206\u5F00\u66F4\u597D\uFF1F</h1><blockquote><p>Chapter 9 Better Together Or Better Apart?</p></blockquote><p>One of the most fundamental questions in software design is this: given two pieces of functionality, should they be implemented together in the same place, or should their implementations be separated? This question applies at all levels in a system, such as functions, methods, classes, and services. For example, should buffering be included in the class that provides stream-oriented file I/O, or should it be in a separate class? Should the parsing of an HTTP request be implemented entirely in one method, or should it be divided among multiple methods (or even multiple classes)? This chapter discusses the factors to consider when making these decisions. Some of these factors have already been discussed in previous chapters, but they will be revisited here for completeness.</p><blockquote><p>\u8F6F\u4EF6\u8BBE\u8BA1\u4E2D\u6700\u57FA\u672C\u7684\u95EE\u9898\u4E4B\u4E00\u662F\uFF1A\u7ED9\u5B9A\u4E24\u4E2A\u529F\u80FD\uFF0C\u5B83\u4EEC\u5E94\u8BE5\u5728\u540C\u4E00\u4F4D\u7F6E\u4E00\u8D77\u5B9E\u73B0\uFF0C\u8FD8\u662F\u5E94\u8BE5\u5206\u5F00\u5B9E\u73B0\uFF1F\u8FD9\u4E2A\u95EE\u9898\u9002\u7528\u4E8E\u7CFB\u7EDF\u4E2D\u7684\u6240\u6709\u7EA7\u522B\uFF0C\u4F8B\u5982\u529F\u80FD\uFF0C\u65B9\u6CD5\uFF0C\u7C7B\u548C\u670D\u52A1\u3002\u4F8B\u5982\uFF0C\u5E94\u8BE5\u5728\u63D0\u4F9B\u9762\u5411\u6D41\u7684\u6587\u4EF6 I/O \u7684\u7C7B\u4E2D\u5305\u62EC\u7F13\u51B2\uFF0C\u8FD8\u662F\u5E94\u8BE5\u5728\u5355\u72EC\u7684\u7C7B\u4E2D\uFF1FHTTP \u8BF7\u6C42\u7684\u89E3\u6790\u5E94\u8BE5\u5B8C\u5168\u5728\u4E00\u79CD\u65B9\u6CD5\u4E2D\u5B9E\u73B0\uFF0C\u8FD8\u662F\u5E94\u8BE5\u5728\u591A\u4E2A\u65B9\u6CD5\uFF08\u751A\u81F3\u591A\u4E2A\u7C7B\uFF09\u4E4B\u95F4\u5212\u5206\uFF1F\u672C\u7AE0\u8BA8\u8BBA\u505A\u51FA\u8FD9\u4E9B\u51B3\u5B9A\u65F6\u8981\u8003\u8651\u7684\u56E0\u7D20\u3002\u8FD9\u4E9B\u56E0\u7D20\u4E2D\u7684\u4E00\u4E9B\u5DF2\u7ECF\u5728\u524D\u9762\u7684\u7AE0\u8282\u4E2D\u8FDB\u884C\u4E86\u8BA8\u8BBA\uFF0C\u4F46\u662F\u4E3A\u4E86\u5B8C\u6574\u8D77\u89C1\uFF0C\u8FD9\u91CC\u5C06\u5BF9\u5176\u8FDB\u884C\u91CD\u65B0\u8BA8\u8BBA\u3002</p></blockquote><p>When deciding whether to combine or separate, the goal is to reduce the complexity of the system as a whole and improve its modularity. It might appear that the best way to achieve this goal is to divide the system into a large number of small components: the smaller the components, the simpler each individual component is likely to be. However, the act of subdividing creates additional complexity that was not present before subdivision:</p><blockquote><p>\u5728\u51B3\u5B9A\u662F\u5408\u5E76\u8FD8\u662F\u5206\u5F00\u65F6\uFF0C\u76EE\u6807\u662F\u964D\u4F4E\u6574\u4E2A\u7CFB\u7EDF\u7684\u590D\u6742\u6027\u5E76\u6539\u5584\u5176\u6A21\u5757\u5316\u3002\u770B\u6765\u5B9E\u73B0\u6B64\u76EE\u6807\u7684\u6700\u4F73\u65B9\u6CD5\u662F\u5C06\u7CFB\u7EDF\u5212\u5206\u4E3A\u5927\u91CF\u7684\u5C0F\u7EC4\u4EF6\uFF1A\u7EC4\u4EF6\u8D8A\u5C0F\uFF0C\u6BCF\u4E2A\u5355\u72EC\u7684\u7EC4\u4EF6\u53EF\u80FD\u8D8A\u7B80\u5355\u3002\u4F46\u662F\uFF0C\u7EC6\u5206\u7684\u884C\u4E3A\u4F1A\u5E26\u6765\u989D\u5916\u7684\u590D\u6742\u6027\uFF0C\u800C\u8FD9\u5728\u7EC6\u5206\u4E4B\u524D\u662F\u4E0D\u5B58\u5728\u7684\uFF1A</p></blockquote><ul><li>Some complexity comes just from the number of components: the more components, the harder to keep track of them all and the harder to find a desired component within the large collection. Subdivision usually results in more interfaces, and every new interface adds complexity.</li><li>Subdivision can result in additional code to manage the components. For example, a piece of code that used a single object before subdivision might now have to manage multiple objects.</li><li>Subdivision creates separation: the subdivided components will be farther apart than they were before subdivision. For example, methods that were together in a single class before subdivision may be in different classes after subdivision, and possibly in different files. Separation makes it harder for developers to see the components at the same time, or even to be aware of their existence. If the components are truly independent, then separation is good: it allows the developer to focus on a single component at a time, without being distracted by the other components. On the other hand, if there are dependencies between the components, then separation is bad: developers will end up flipping back and forth between the components. Even worse, they may not be aware of the dependencies, which can lead to bugs.</li><li>Subdivision can result in duplication: code that was present in a single instance before subdivision may need to be present in each of the subdivided components.</li></ul><hr><blockquote><ul><li>\u4E00\u4E9B\u7EC4\u4EF6\u7684\u590D\u6742\u6027\u4EC5\u6765\u81EA\u7EC4\u4EF6\u7684\u6570\u91CF\uFF1A\u7EC4\u4EF6\u8D8A\u591A\uFF0C\u5C31\u8D8A\u96BE\u4EE5\u8FFD\u8E2A\u6240\u6709\u7EC4\u4EF6\uFF0C\u4E5F\u5C31\u8D8A\u96BE\u5728\u5927\u578B\u96C6\u5408\u4E2D\u627E\u5230\u6240\u9700\u7684\u7EC4\u4EF6\u3002\u7EC6\u5206\u901A\u5E38\u4F1A\u5BFC\u81F4\u66F4\u591A\u63A5\u53E3\uFF0C\u5E76\u4E14\u6BCF\u4E2A\u65B0\u63A5\u53E3\u90FD\u4F1A\u589E\u52A0\u590D\u6742\u6027\u3002</li><li>\u7EC6\u5206\u53EF\u80FD\u4F1A\u5BFC\u81F4\u9644\u52A0\u4EE3\u7801\u6765\u7BA1\u7406\u7EC4\u4EF6\u3002\u4F8B\u5982\uFF0C\u5728\u7EC6\u5206\u4E4B\u524D\u4F7F\u7528\u5355\u4E2A\u5BF9\u8C61\u7684\u4E00\u6BB5\u4EE3\u7801\u73B0\u5728\u53EF\u80FD\u5FC5\u987B\u7BA1\u7406\u591A\u4E2A\u5BF9\u8C61\u3002</li><li>\u7EC6\u5206\u4EA7\u751F\u5206\u79BB\uFF1A\u7EC6\u5206\u540E\u7684\u7EC4\u4EF6\u5C06\u6BD4\u7EC6\u5206\u524D\u7684\u7EC4\u4EF6\u76F8\u8DDD\u66F4\u8FDC\u3002\u4F8B\u5982\uFF0C\u5728\u7EC6\u5206\u4E4B\u524D\u4F4D\u4E8E\u5355\u4E2A\u7C7B\u4E2D\u7684\u65B9\u6CD5\u53EF\u80FD\u5728\u7EC6\u5206\u4E4B\u540E\u4F4D\u4E8E\u4E0D\u540C\u7684\u7C7B\u4E2D\uFF0C\u5E76\u4E14\u53EF\u80FD\u5728\u4E0D\u540C\u7684\u6587\u4EF6\u4E2D\u3002\u5206\u79BB\u4F7F\u5F00\u53D1\u4EBA\u5458\u66F4\u96BE\u4E8E\u540C\u65F6\u67E5\u770B\u8FD9\u4E9B\u7EC4\u4EF6\uFF0C\u751A\u81F3\u5F88\u96BE\u77E5\u9053\u5B83\u4EEC\u7684\u5B58\u5728\u3002\u5982\u679C\u7EC4\u4EF6\u771F\u6B63\u72EC\u7ACB\uFF0C\u90A3\u4E48\u5206\u79BB\u662F\u597D\u7684\uFF1A\u5B83\u4F7F\u5F00\u53D1\u4EBA\u5458\u53EF\u4EE5\u4E00\u6B21\u4E13\u6CE8\u4E8E\u5355\u4E2A\u7EC4\u4EF6\uFF0C\u800C\u4E0D\u4F1A\u88AB\u5176\u4ED6\u7EC4\u4EF6\u5206\u6563\u6CE8\u610F\u529B\u3002\u53E6\u4E00\u65B9\u9762\uFF0C\u5982\u679C\u7EC4\u4EF6\u4E4B\u95F4\u5B58\u5728\u4F9D\u8D56\u6027\uFF0C\u5219\u5206\u79BB\u662F\u4E0D\u597D\u7684\uFF1A\u5F00\u53D1\u4EBA\u5458\u6700\u7EC8\u5C06\u5728\u7EC4\u4EF6\u4E4B\u95F4\u6765\u56DE\u7FFB\u8F6C\u3002\u66F4\u7CDF\u7CD5\u7684\u662F\uFF0C\u4ED6\u4EEC\u53EF\u80FD\u4E0D\u4E86\u89E3\u4F9D\u8D56\u5173\u7CFB\uFF0C\u8FD9\u53EF\u80FD\u5BFC\u81F4\u9519\u8BEF\u3002</li><li>\u7EC6\u5206\u53EF\u80FD\u5BFC\u81F4\u91CD\u590D\uFF1A\u7EC6\u5206\u4E4B\u524D\u7684\u5355\u4E2A\u5B9E\u4F8B\u4E2D\u5B58\u5728\u7684\u4EE3\u7801\u53EF\u80FD\u9700\u8981\u5B58\u5728\u4E8E\u6BCF\u4E2A\u7EC6\u5206\u7684\u7EC4\u4EF6\u4E2D\u3002</li></ul></blockquote><p>Bringing pieces of code together is most beneficial if they are closely related. If the pieces are unrelated, they are probably better off apart. Here are a few indications that two pieces of code are related:</p><blockquote><p>\u5982\u679C\u5B83\u4EEC\u7D27\u5BC6\u76F8\u5173\uFF0C\u5219\u5C06\u4EE3\u7801\u6BB5\u7EC4\u5408\u5728\u4E00\u8D77\u662F\u6700\u6709\u76CA\u7684\u3002\u5982\u679C\u5404\u90E8\u5206\u65E0\u5173\uFF0C\u5219\u6700\u597D\u5206\u5F00\u3002\u4EE5\u4E0B\u662F\u4E24\u4E2A\u4EE3\u7801\u76F8\u5173\u7684\u4E00\u4E9B\u63D0\u793A\uFF1A</p></blockquote><ul><li>They share information; for example, both pieces of code might depend on the syntax of a particular type of document.</li><li>They are used together: anyone using one of the pieces of code is likely to use the other as well. This form of relationship is only compelling if it is bidirectional. As a counter-example, a disk block cache will almost always involve a hash table, but hash tables can be used in many situations that don\u2019t involve block caches; thus, these modules should be separate.</li><li>They overlap conceptually, in that there is a simple higher-level category that includes both of the pieces of code. For example, searching for a substring and case conversion both fall under the category of string manipulation; flow control and reliable delivery both fall under the category of network communication.</li><li>It is hard to understand one of the pieces of code without looking at the other.</li></ul><hr><blockquote><ul><li>\u4ED6\u4EEC\u5171\u4EAB\u4FE1\u606F\uFF1B\u4F8B\u5982\uFF0C\u8FD9\u4E24\u6BB5\u4EE3\u7801\u90FD\u53EF\u80FD\u53D6\u51B3\u4E8E\u7279\u5B9A\u7C7B\u578B\u6587\u6863\u7684\u8BED\u6CD5\u3002</li><li>\u5B83\u4EEC\u4E00\u8D77\u4F7F\u7528\uFF1A\u4EFB\u4F55\u4F7F\u7528\u5176\u4E2D\u4E00\u6BB5\u4EE3\u7801\u7684\u4EBA\u90FD\u53EF\u80FD\u540C\u65F6\u4F7F\u7528\u53E6\u4E00\u6BB5\u4EE3\u7801\u3002\u8FD9\u79CD\u5173\u7CFB\u5F62\u5F0F\u53EA\u6709\u5728\u53CC\u5411\u5173\u7CFB\u4E2D\u624D\u5177\u6709\u5438\u5F15\u529B\u3002\u4F5C\u4E3A\u53CD\u4F8B\uFF0C\u78C1\u76D8\u5757\u9AD8\u901F\u7F13\u5B58\u51E0\u4E4E\u603B\u662F\u5305\u542B\u54C8\u5E0C\u8868\uFF0C\u4F46\u662F\u54C8\u5E0C\u8868\u53EF\u4EE5\u5728\u8BB8\u591A\u4E0D\u6D89\u53CA\u5757\u9AD8\u901F\u7F13\u5B58\u7684\u60C5\u51B5\u4E0B\u4F7F\u7528\u3002\u56E0\u6B64\uFF0C\u8FD9\u4E9B\u6A21\u5757\u5E94\u8BE5\u5206\u5F00\u3002</li><li>\u5B83\u4EEC\u5728\u6982\u5FF5\u4E0A\u91CD\u53E0\uFF0C\u56E0\u4E3A\u5B58\u5728\u4E00\u4E2A\u7B80\u5355\u7684\u66F4\u9AD8\u7EA7\u522B\u7684\u7C7B\u522B\uFF0C\u5176\u4E2D\u5305\u62EC\u8FD9\u4E24\u6BB5\u4EE3\u7801\u3002\u4F8B\u5982\uFF0C\u641C\u7D22\u5B50\u5B57\u7B26\u4E32\u548C\u5927\u5C0F\u5199\u8F6C\u6362\u90FD\u5C5E\u4E8E\u5B57\u7B26\u4E32\u64CD\u4F5C\u7C7B\u522B\u3002\u6D41\u63A7\u5236\u548C\u53EF\u9760\u7684\u4EA4\u4ED8\u90FD\u5C5E\u4E8E\u7F51\u7EDC\u901A\u4FE1\u7684\u8303\u7574\u3002</li><li>\u4E0D\u770B\u5176\u4E2D\u7684\u4E00\u6BB5\u4EE3\u7801\u5C31\u5F88\u96BE\u7406\u89E3\u3002</li></ul></blockquote><p>The rest of this chapter uses more specific rules as well as examples to show when it makes sense to bring pieces of code together and when it makes sense to separate them.</p><blockquote><p>\u672C\u7AE0\u7684\u5176\u4F59\u90E8\u5206\u4F7F\u7528\u66F4\u5177\u4F53\u7684\u89C4\u5219\u4EE5\u53CA\u793A\u4F8B\u6765\u8BF4\u660E\u4F55\u65F6\u5C06\u4EE3\u7801\u6BB5\u7EC4\u5408\u5728\u4E00\u8D77\u4EE5\u53CA\u4F55\u65F6\u5C06\u5B83\u4EEC\u5206\u5F00\u662F\u6709\u610F\u4E49\u7684\u3002</p></blockquote><h2 id="_9-1-bring-together-if-information-is-shared-\u5982\u679C\u4FE1\u606F\u5171\u4EAB\u5219\u6C47\u805A\u5728\u4E00\u8D77" tabindex="-1"><a class="header-anchor" href="#_9-1-bring-together-if-information-is-shared-\u5982\u679C\u4FE1\u606F\u5171\u4EAB\u5219\u6C47\u805A\u5728\u4E00\u8D77" aria-hidden="true">#</a> 9.1 Bring together if information is shared \u5982\u679C\u4FE1\u606F\u5171\u4EAB\u5219\u6C47\u805A\u5728\u4E00\u8D77</h2><p>Section 5.4 introduced this principle in the context of a project implementing an HTTP server. In its first implementation, the project used two different methods in different classes to read in and parse HTTP requests. The first method read the text of an incoming request from a network socket and placed it in a string object. The second method parsed the string to extract the various components of the request. With this decomposition, both of the methods ended up with considerable knowledge of the format of HTTP requests: the first method was only trying to read the request, not parse it, but it couldn\u2019t identify the end of the request without doing most of the work of parsing it (for example, it had to parse header lines in order to identify the header containing the overall request length). Because of this shared information, it is better to both read and parse the request in the same place; when the two classes were combined into one, the code got shorter and simpler.</p><blockquote><p>5.4 \u8282\u5728\u5B9E\u73B0 HTTP \u670D\u52A1\u5668\u7684\u9879\u76EE\u4E0A\u4E0B\u6587\u4E2D\u4ECB\u7ECD\u4E86\u6B64\u539F\u7406\u3002\u5728\u5176\u7B2C\u4E00\u4E2A\u5B9E\u73B0\u4E2D\uFF0C\u8BE5\u9879\u76EE\u5728\u4E0D\u540C\u7684\u7C7B\u4E2D\u4F7F\u7528\u4E86\u4E24\u79CD\u4E0D\u540C\u7684\u65B9\u6CD5\u6765\u8BFB\u53D6\u548C\u89E3\u6790 HTTP \u8BF7\u6C42\u3002\u7B2C\u4E00\u79CD\u65B9\u6CD5\u4ECE\u7F51\u7EDC\u5957\u63A5\u5B57\u8BFB\u53D6\u4F20\u5165\u8BF7\u6C42\u7684\u6587\u672C\uFF0C\u5E76\u5C06\u5176\u653E\u7F6E\u5728\u5B57\u7B26\u4E32\u5BF9\u8C61\u4E2D\u3002\u7B2C\u4E8C\u79CD\u65B9\u6CD5\u89E3\u6790\u5B57\u7B26\u4E32\u4EE5\u63D0\u53D6\u8BF7\u6C42\u7684\u5404\u4E2A\u7EC4\u6210\u90E8\u5206\u3002\u7ECF\u8FC7\u8FD9\u79CD\u5206\u89E3\uFF0C\u8FD9\u4E24\u79CD\u65B9\u6CD5\u6700\u7EC8\u90FD\u5BF9 HTTP \u8BF7\u6C42\u7684\u683C\u5F0F\u6709\u4E86\u76F8\u5F53\u7684\u4E86\u89E3\uFF1A\u7B2C\u4E00\u79CD\u65B9\u6CD5\u53EA\u662F\u5C1D\u8BD5\u8BFB\u53D6\u8BF7\u6C42\uFF0C\u800C\u4E0D\u662F\u89E3\u6790\u8BF7\u6C42\uFF0C\u4F46\u662F\u5982\u679C\u4E0D\u6267\u884C\u5927\u591A\u6570\u64CD\u4F5C\uFF0C\u5C31\u65E0\u6CD5\u786E\u5B9A\u8BF7\u6C42\u7684\u7ED3\u675F\u89E3\u6790\u5B83\u7684\u5DE5\u4F5C\uFF08\u4F8B\u5982\uFF0C\u5B83\u5FC5\u987B\u89E3\u6790\u6807\u5934\u884C\u624D\u80FD\u8BC6\u522B\u5305\u542B\u6574\u4E2A\u8BF7\u6C42\u957F\u5EA6\u7684\u6807\u5934\uFF09\u3002\u7531\u4E8E\u6B64\u5171\u4EAB\u4FE1\u606F\uFF0C\u6700\u597D\u5728\u540C\u4E00\u4F4D\u7F6E\u8BFB\u53D6\u548C\u89E3\u6790\u8BF7\u6C42\uFF1B\u5F53\u4E24\u4E2A\u7C7B\u5408\u800C\u4E3A\u4E00\u65F6\uFF0C\u4EE3\u7801\u53D8\u5F97\u66F4\u77ED\uFF0C\u66F4\u7B80\u5355\u3002</p></blockquote><h2 id="_9-2-bring-together-if-it-will-simplify-the-interface-\u6C47\u96C6\u5728\u4E00\u8D77-\u200B\u200B-\u662F\u5426\u53EF\u4EE5\u7B80\u5316\u754C\u9762" tabindex="-1"><a class="header-anchor" href="#_9-2-bring-together-if-it-will-simplify-the-interface-\u6C47\u96C6\u5728\u4E00\u8D77-\u200B\u200B-\u662F\u5426\u53EF\u4EE5\u7B80\u5316\u754C\u9762" aria-hidden="true">#</a> 9.2 Bring together if it will simplify the interface \u6C47\u96C6\u5728\u4E00\u8D77 \u200B\u200B \u662F\u5426\u53EF\u4EE5\u7B80\u5316\u754C\u9762</h2><p>When two or more modules are combined into a single module, it may be possible to define an interface for the new module that is simpler or easier to use than the original interfaces. This often happens when the original modules each implement part of the solution to a problem. In the HTTP server example from the preceding section, the original methods required an interface to return the HTTP request string from the first method and pass it to the second. When the methods were combined, these interfaces were eliminated.</p><blockquote><p>\u5F53\u4E24\u4E2A\u6216\u591A\u4E2A\u6A21\u5757\u7EC4\u5408\u6210\u4E00\u4E2A\u6A21\u5757\u65F6\uFF0C\u53EF\u4EE5\u4E3A\u65B0\u6A21\u5757\u5B9A\u4E49\u4E00\u4E2A\u6BD4\u539F\u59CB\u63A5\u53E3\u66F4\u7B80\u5355\u6216\u66F4\u6613\u4E8E\u4F7F\u7528\u7684\u63A5\u53E3\u3002\u5F53\u539F\u59CB\u6A21\u5757\u5404\u81EA\u5B9E\u73B0\u95EE\u9898\u89E3\u51B3\u65B9\u6848\u7684\u4E00\u90E8\u5206\u65F6\uFF0C\u901A\u5E38\u4F1A\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\u3002\u5728\u4E0A\u4E00\u90E8\u5206\u7684 HTTP \u670D\u52A1\u5668\u793A\u4F8B\u4E2D\uFF0C\u539F\u59CB\u65B9\u6CD5\u9700\u8981\u4E00\u4E2A\u63A5\u53E3\u6765\u4ECE\u7B2C\u4E00\u4E2A\u65B9\u6CD5\u8FD4\u56DE HTTP \u8BF7\u6C42\u5B57\u7B26\u4E32\u5E76\u5C06\u5176\u4F20\u9012\u7ED9\u7B2C\u4E8C\u4E2A\u65B9\u6CD5\u3002\u5F53\u8FD9\u4E9B\u65B9\u6CD5\u7ED3\u5408\u5728\u4E00\u8D77\u65F6\uFF0C\u8FD9\u4E9B\u63A5\u53E3\u5C31\u88AB\u6DD8\u6C70\u4E86\u3002</p></blockquote><p>In addition, when the functionality of two or more classes is combined, it may be possible to perform some functions automatically, so that most users need not be aware of them. The Java I/O library illustrates this opportunity. If the FileInputStream and BufferedInputStream classes were combined and buffering were provided by default, the vast majority of users would never even need to be aware of the existence of buffering. A combined FileInputStream class might provide methods to disable or replace the default buffering mechanism, but most users would not need to learn about them.</p><blockquote><p>\u53E6\u5916\uFF0C\u5C06\u4E24\u4E2A\u6216\u66F4\u591A\u7C7B\u7684\u529F\u80FD\u7EC4\u5408\u5728\u4E00\u8D77\u65F6\uFF0C\u53EF\u80FD\u4F1A\u81EA\u52A8\u6267\u884C\u67D0\u4E9B\u529F\u80FD\uFF0C\u56E0\u6B64\u5927\u591A\u6570\u7528\u6237\u65E0\u9700\u4E86\u89E3\u5B83\u4EEC\u3002Java I/O \u5E93\u8BF4\u660E\u4E86\u8FD9\u79CD\u673A\u4F1A\u3002\u5982\u679C\u5C06 FileInputStream \u548C BufferedInputStream \u7C7B\u7EC4\u5408\u5728\u4E00\u8D77\uFF0C\u5E76\u4E14\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u63D0\u4F9B\u4E86\u7F13\u51B2\uFF0C\u5219\u7EDD\u5927\u591A\u6570\u7528\u6237\u751A\u81F3\u90FD\u4E0D\u9700\u8981\u77E5\u9053\u7F13\u51B2\u7684\u5B58\u5728\u3002\u7EC4\u5408\u7684 FileInputStream \u7C7B\u53EF\u80FD\u63D0\u4F9B\u7981\u7528\u6216\u66FF\u6362\u9ED8\u8BA4\u7F13\u51B2\u673A\u5236\u7684\u65B9\u6CD5\uFF0C\u4F46\u662F\u5927\u591A\u6570\u7528\u6237\u4E0D\u9700\u8981\u4E86\u89E3\u5B83\u4EEC\u3002</p></blockquote><h2 id="_9-3-bring-together-to-eliminate-duplication-\u6D88\u9664\u91CD\u590D" tabindex="-1"><a class="header-anchor" href="#_9-3-bring-together-to-eliminate-duplication-\u6D88\u9664\u91CD\u590D" aria-hidden="true">#</a> 9.3 Bring together to eliminate duplication \u6D88\u9664\u91CD\u590D</h2><p>If you find the same pattern of code repeated over and over, see if you can reorganize the code to eliminate the repetition. One approach is to factor the repeated code out into a separate method and replace the repeated code snippets with calls to the method. This approach is most effective if the repeated code snippet is long and the replacement method has a simple signature. If the snippet is only one or two lines long, there may not be much benefit in replacing it with a method call. If the snippet interacts in complex ways with its environment (such as by accessing numerous local variables), then the replacement method might require a complex signature (such as many pass-by-reference arguments), which would reduce its value.</p><blockquote><p>\u5982\u679C\u53D1\u73B0\u53CD\u590D\u91CD\u590D\u76F8\u540C\u7684\u4EE3\u7801\u6A21\u5F0F\uFF0C\u8BF7\u67E5\u770B\u662F\u5426\u53EF\u4EE5\u91CD\u65B0\u7EC4\u7EC7\u4EE3\u7801\u4EE5\u6D88\u9664\u91CD\u590D\u3002\u4E00\u79CD\u65B9\u6CD5\u662F\u5C06\u91CD\u590D\u7684\u4EE3\u7801\u5206\u89E3\u4E3A\u4E00\u4E2A\u5355\u72EC\u7684\u65B9\u6CD5\uFF0C\u5E76\u7528\u5BF9\u8BE5\u65B9\u6CD5\u7684\u8C03\u7528\u66FF\u6362\u91CD\u590D\u7684\u4EE3\u7801\u6BB5\u3002\u5982\u679C\u91CD\u590D\u7684\u4EE3\u7801\u6BB5\u5F88\u957F\u5E76\u4E14\u66FF\u6362\u65B9\u6CD5\u5177\u6709\u7B80\u5355\u7684\u7B7E\u540D\uFF0C\u5219\u6B64\u65B9\u6CD5\u6700\u6709\u6548\u3002\u5982\u679C\u4EE3\u7801\u6BB5\u53EA\u6709\u4E00\u4E24\u884C\uFF0C\u90A3\u4E48\u7528\u65B9\u6CD5\u8C03\u7528\u66FF\u6362\u5B83\u53EF\u80FD\u4E0D\u4F1A\u6709\u592A\u591A\u597D\u5904\u3002\u5982\u679C\u4EE3\u7801\u6BB5\u4E0E\u5176\u73AF\u5883\u4EE5\u590D\u6742\u7684\u65B9\u5F0F\u8FDB\u884C\u4EA4\u4E92\uFF08\u4F8B\u5982\uFF0C\u901A\u8FC7\u8BBF\u95EE\u591A\u4E2A\u5C40\u90E8\u53D8\u91CF\uFF09\uFF0C\u5219\u66FF\u6362\u65B9\u6CD5\u53EF\u80FD\u9700\u8981\u590D\u6742\u7684\u7B7E\u540D\uFF08\u4F8B\u5982\uFF0C\u8BB8\u591A\u201C\u6309\u5F15\u7528\u4F20\u9012\u201D\u53C2\u6570\uFF09\uFF0C\u8FD9\u4F1A\u964D\u4F4E\u5176\u4EF7\u503C\u3002</p></blockquote><p>Another way to eliminate duplication is to refactor the code so that the snippet in question only needs to be executed in one place. Suppose you are writing a method that needs to return errors at several different points, and the same cleanup actions need to be performed at each of these points before returning (see Figure 9.1 for an example). If the programming language supports goto, you can move the cleanup code to the very end of the method and then goto that snippet at each of the points where an error return is required, as in Figure 9.2. Goto statements are generally considered a bad idea, and they can result in indecipherable code if used indiscriminately, but they are useful in situations like this where they are used to escape from nested code.</p><blockquote><p>\u6D88\u9664\u91CD\u590D\u7684\u53E6\u4E00\u79CD\u65B9\u6CD5\u662F\u91CD\u6784\u4EE3\u7801\uFF0C\u4F7F\u76F8\u5173\u4EE3\u7801\u6BB5\u4EC5\u9700\u8981\u5728\u4E00\u4E2A\u5730\u65B9\u6267\u884C\u3002\u5047\u8BBE\u60A8\u6B63\u5728\u7F16\u5199\u4E00\u79CD\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u9700\u8981\u5728\u51E0\u4E2A\u4E0D\u540C\u7684\u70B9\u8FD4\u56DE\u9519\u8BEF\uFF0C\u5E76\u4E14\u5728\u8FD4\u56DE\u4E4B\u524D\u9700\u8981\u5728\u6BCF\u4E2A\u8FD9\u4E9B\u70B9\u6267\u884C\u76F8\u540C\u7684\u6E05\u9664\u64CD\u4F5C\uFF08\u793A\u4F8B\u8BF7\u53C2\u89C1\u56FE 9.1\uFF09\u3002\u5982\u679C\u7F16\u7A0B\u8BED\u8A00\u652F\u6301 goto\uFF0C\u5219\u53EF\u4EE5\u5C06\u6E05\u9664\u4EE3\u7801\u79FB\u5230\u65B9\u6CD5\u7684\u6700\u540E\uFF0C\u7136\u540E\u5728\u9700\u8981\u8FD4\u56DE\u9519\u8BEF\u7684\u6BCF\u4E2A\u70B9\u5904\u8F6C\u5230\u8BE5\u7247\u6BB5\uFF0C\u5982\u56FE 9.2 \u6240\u793A\u3002Goto \u8BED\u53E5\u901A\u5E38\u88AB\u8BA4\u4E3A\u662F\u4E00\u4E2A\u574F\u4E3B\u610F\uFF0C\u5982\u679C\u4E0D\u52A0\u9009\u62E9\u5730\u4F7F\u7528\u5B83\u4EEC\uFF0C\u53EF\u80FD\u4F1A\u5BFC\u81F4\u65E0\u6CD5\u8BC6\u522B\u7684\u4EE3\u7801\uFF0C\u4F46\u662F\u5728\u8BF8\u5982\u6B64\u7C7B\u7684\u60C5\u51B5\u4E0B\uFF0C\u5B83\u4EEC\u53EF\u7528\u4E8E\u4ECE\u5D4C\u5957\u4EE3\u7801\u4E2D\u8F6C\u4E49\uFF0C\u56E0\u6B64\u5B83\u4EEC\u975E\u5E38\u6709\u7528\u3002</p></blockquote><h2 id="_9-4-separate-general-purpose-and-special-purpose-code-\u5355\u72EC\u7684\u901A\u7528\u4EE3\u7801\u548C\u4E13\u7528\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#_9-4-separate-general-purpose-and-special-purpose-code-\u5355\u72EC\u7684\u901A\u7528\u4EE3\u7801\u548C\u4E13\u7528\u4EE3\u7801" aria-hidden="true">#</a> 9.4 Separate general-purpose and special-purpose code \u5355\u72EC\u7684\u901A\u7528\u4EE3\u7801\u548C\u4E13\u7528\u4EE3\u7801</h2><p>If a module contains a mechanism that can be used for several different purposes, then it should provide just that one general-purpose mechanism. It should not include code that specializes the mechanism for a particular use, nor should it contain other general-purpose mechanisms. Special-purpose code associated with a general-purpose mechanism should normally go in a different module (typically one associated with the particular purpose). The GUI editor discussion in Chapter 6 illustrated this principle: the best design was one where the text class provided general-purpose text operations, while operations particular to the user interface (such as deleting the selection) were implemented in the user interface module. This approach eliminated information leakage and additional interfaces that were present in an earlier design where the specialized user interface operations were implemented in the text class.</p><blockquote><p>\u5982\u679C\u6A21\u5757\u5305\u542B\u53EF\u7528\u4E8E\u591A\u79CD\u4E0D\u540C\u76EE\u7684\u7684\u673A\u5236\uFF0C\u5219\u5B83\u5E94\u4EC5\u63D0\u4F9B\u4E00\u79CD\u901A\u7528\u673A\u5236\u3002\u5B83\u4E0D\u5E94\u5305\u542B\u4E13\u95E8\u9488\u5BF9\u7279\u5B9A\u7528\u9014\u7684\u673A\u5236\u7684\u4EE3\u7801\uFF0C\u4E5F\u4E0D\u5E94\u5305\u542B\u5176\u4ED6\u901A\u7528\u673A\u5236\u3002\u4E0E\u901A\u7528\u673A\u5236\u5173\u8054\u7684\u4E13\u7528\u4EE3\u7801\u901A\u5E38\u5E94\u653E\u5728\u4E0D\u540C\u7684\u6A21\u5757\u4E2D\uFF08\u901A\u5E38\u662F\u4E0E\u7279\u5B9A\u7528\u9014\u5173\u8054\u7684\u6A21\u5757\uFF09\u3002\u7B2C 6 \u7AE0\u4E2D\u7684 GUI \u7F16\u8F91\u5668\u8BA8\u8BBA\u9610\u660E\u4E86\u8FD9\u4E00\u539F\u7406\uFF1A\u6700\u4F73\u8BBE\u8BA1\u662F\u6587\u672C\u7C7B\u63D0\u4F9B\u901A\u7528\u6587\u672C\u64CD\u4F5C\uFF0C\u800C\u7279\u5B9A\u4E8E\u7528\u6237\u754C\u9762\u7684\u64CD\u4F5C\uFF08\u4F8B\u5982\u5220\u9664\u6240\u9009\u5185\u5BB9\uFF09\u5219\u5728\u7528\u6237\u754C\u9762\u6A21\u5757\u4E2D\u5B9E\u73B0\u3002</p></blockquote><p>img Red Flag: Repetition img</p><p>If the same piece of code (or code that is almost the same) appears over and over again, that\u2019s a red flag that you haven\u2019t found the right abstractions.</p><blockquote><p>\u5982\u679C\u76F8\u540C\u7684\u4EE3\u7801\uFF08\u6216\u51E0\u4E4E\u76F8\u540C\u7684\u4EE3\u7801\uFF09\u4E00\u904D\u53C8\u4E00\u904D\u5730\u51FA\u73B0\uFF0C\u90A3\u662F\u4E00\u4E2A\u5371\u9669\u4FE1\u53F7\uFF0C\u60A8\u6CA1\u6709\u627E\u5230\u6B63\u786E\u7684\u62BD\u8C61\u3002</p></blockquote><p><img src="'+n+'" alt=""></p><p>Figure 9.1: This code processes incoming network packets of different types; for each type, if the packet is too short for that type, a message gets logged. In this version of the code, the LOG statement is duplicated for several different packet types.</p><blockquote><p>\u56FE 9.1\uFF1A\u6B64\u4EE3\u7801\u5904\u7406\u4E0D\u540C\u7C7B\u578B\u7684\u4F20\u5165\u7F51\u7EDC\u6570\u636E\u5305\u3002\u5BF9\u4E8E\u6BCF\u79CD\u7C7B\u578B\uFF0C\u5982\u679C\u6570\u636E\u5305\u5BF9\u4E8E\u8BE5\u7C7B\u578B\u800C\u8A00\u592A\u77ED\uFF0C\u5219\u4F1A\u8BB0\u5F55\u4E00\u6761\u6D88\u606F\u3002\u5728\u6B64\u7248\u672C\u7684\u4EE3\u7801\u4E2D\uFF0CLOG \u8BED\u53E5\u5BF9\u4E8E\u51E0\u79CD\u4E0D\u540C\u7684\u6570\u636E\u5305\u7C7B\u578B\u662F\u91CD\u590D\u7684\u3002</p></blockquote><p><img src="'+o+`" alt=""></p><p>Figure 9.2: A reorganization of the code from Figure 9.1 so that there is only one copy of the LOG statement.</p><blockquote><p>\u56FE 9.2\uFF1A\u5BF9\u56FE 9.1 \u4E2D\u7684\u4EE3\u7801\u8FDB\u884C\u4E86\u91CD\u65B0\u7EC4\u7EC7\uFF0C\u56E0\u6B64\u53EA\u6709 LOG \u8BED\u53E5\u7684\u4E00\u4E2A\u526F\u672C\u3002</p></blockquote><p>In general, the lower layers of a system tend to be more general-purpose and the upper layers more special-purpose. For example, the topmost layer of an application consists of features totally specific to that application. The way to separate special-purpose code from general-purpose code is to pull the special-purpose code upwards, into the higher layers, leaving the lower layers general-purpose. When you encounter a class that includes both general-purpose and special-purpose features for the same abstraction, see if the class can be separated into two classes, one containing the general-purpose features, and the other layered on top of it to provide the special-purpose features.</p><blockquote><p>\u901A\u5E38\uFF0C\u7CFB\u7EDF\u7684\u4E0B\u5C42\u503E\u5411\u4E8E\u66F4\u901A\u7528\uFF0C\u800C\u4E0A\u5C42\u5219\u66F4\u4E13\u7528\u3002\u4F8B\u5982\uFF0C\u5E94\u7528\u7A0B\u5E8F\u7684\u6700\u9876\u5C42\u5305\u542B\u5B8C\u5168\u7279\u5B9A\u4E8E\u8BE5\u5E94\u7528\u7A0B\u5E8F\u7684\u529F\u80FD\u3002\u5C06\u4E13\u7528\u4EE3\u7801\u4E0E\u901A\u7528\u4EE3\u7801\u5206\u5F00\u7684\u65B9\u6CD5\u662F\u5C06\u4E13\u7528\u4EE3\u7801\u5411\u4E0A\u62C9\u5230\u8F83\u9AD8\u7684\u5C42\uFF0C\u800C\u5C06\u8F83\u4F4E\u7684\u5C42\u4FDD\u7559\u4E3A\u901A\u7528\u3002\u5F53\u60A8\u9047\u5230\u540C\u65F6\u5305\u542B\u901A\u7528\u529F\u80FD\u548C\u4E13\u7528\u529F\u80FD\u7684\u540C\u4E00\u7C7B\u7684\u7C7B\u65F6\uFF0C\u8BF7\u67E5\u770B\u8BE5\u7C7B\u662F\u5426\u53EF\u4EE5\u5206\u4E3A\u4E24\u4E2A\u7C7B\uFF0C\u4E00\u4E2A\u5305\u542B\u901A\u7528\u529F\u80FD\uFF0C\u53E6\u4E00\u4E2A\u5728\u5176\u4E0A\u5206\u5C42\u4EE5\u63D0\u4F9B\u7279\u6B8A\u529F\u80FD</p></blockquote><h2 id="_9-5-example-insertion-cursor-and-selection-\u793A\u4F8B-\u63D2\u5165\u5149\u6807\u548C\u9009\u62E9" tabindex="-1"><a class="header-anchor" href="#_9-5-example-insertion-cursor-and-selection-\u793A\u4F8B-\u63D2\u5165\u5149\u6807\u548C\u9009\u62E9" aria-hidden="true">#</a> 9.5 Example: insertion cursor and selection \u793A\u4F8B\uFF1A\u63D2\u5165\u5149\u6807\u548C\u9009\u62E9</h2><p>The next sections work through three examples that illustrate the principles discussed above. In two of the examples the best approach is to separate the relevant pieces of code; in the third example it is better to join them together.</p><blockquote><p>\u4E0B\u4E00\u8282\u5C06\u901A\u8FC7\u4E09\u4E2A\u793A\u4F8B\u8BF4\u660E\u4E0A\u8FF0\u539F\u7406\u3002\u5728\u4E24\u4E2A\u793A\u4F8B\u4E2D\uFF0C\u6700\u597D\u7684\u65B9\u6CD5\u662F\u5206\u79BB\u76F8\u5173\u7684\u4EE3\u7801\u6BB5\u3002\u5728\u7B2C\u4E09\u4E2A\u793A\u4F8B\u4E2D\uFF0C\u6700\u597D\u5C06\u5B83\u4EEC\u7ED3\u5408\u5728\u4E00\u8D77\u3002</p></blockquote><p>The first example consists of the insertion cursor and the selection in the GUI editor project from Chapter 6. The editor displayed a blinking vertical line indicating where text typed by the user would appear in the document. It also displayed a highlighted range of characters called the selection, which was used for copying or deleting text. The insertion cursor was always visible, but there could be times when no text was selected. If the selection existed, the insertion cursor was always positioned at one end of it.</p><blockquote><p>\u7B2C\u4E00\u4E2A\u793A\u4F8B\u7531\u63D2\u5165\u5149\u6807\u548C\u7B2C 6 \u7AE0\u7684 GUI \u7F16\u8F91\u5668\u9879\u76EE\u4E2D\u7684\u9009\u62E9\u7EC4\u6210\u3002\u7F16\u8F91\u5668\u663E\u793A\u95EA\u70C1\u7684\u5782\u76F4\u7EBF\uFF0C\u6307\u793A\u7528\u6237\u952E\u5165\u7684\u6587\u672C\u5C06\u51FA\u73B0\u5728\u6587\u6863\u4E2D\u7684\u4F55\u5904\u3002\u5B83\u8FD8\u663E\u793A\u4E86\u4E00\u4E2A\u7A81\u51FA\u663E\u793A\u7684\u5B57\u7B26\u8303\u56F4\uFF0C\u79F0\u4E3A\u9009\u62E9\uFF0C\u7528\u4E8E\u590D\u5236\u6216\u5220\u9664\u6587\u672C\u3002\u63D2\u5165\u5149\u6807\u59CB\u7EC8\u53EF\u89C1\uFF0C\u4F46\u662F\u6709\u65F6\u53EF\u80FD\u6CA1\u6709\u9009\u62E9\u6587\u672C\u3002\u5982\u679C\u5B58\u5728\u9009\u62E9\uFF0C\u5219\u63D2\u5165\u5149\u6807\u59CB\u7EC8\u4F4D\u4E8E\u5176\u4E00\u7AEF\u3002</p></blockquote><p>The selection and insertion cursor are related in some ways. For example, the cursor is always positioned at one end of the selection, and the cursor and selection tend to be manipulated together: clicking and dragging the mouse sets both of them, and text insertion first deletes the selected text, if there is any, and then inserts new text at the cursor position. Thus, it might seem logical to use a single object to manage both the selection and the cursor, and one project team took this approach. The object stored two positions in the file, along with booleans indicating which end was the cursor and whether the selection existed.</p><blockquote><p>\u9009\u62E9\u548C\u63D2\u5165\u5149\u6807\u5728\u67D0\u4E9B\u65B9\u9762\u76F8\u5173\u3002\u4F8B\u5982\uFF0C\u5149\u6807\u59CB\u7EC8\u4F4D\u4E8E\u6240\u9009\u5185\u5BB9\u7684\u4E00\u7AEF\uFF0C\u5E76\u4E14\u503E\u5411\u4E8E\u5C06\u5149\u6807\u548C\u6240\u9009\u5185\u5BB9\u4E00\u8D77\u64CD\u4F5C\uFF1A\u5355\u51FB\u5E76\u62D6\u52A8\u9F20\u6807\u5C06\u5B83\u4EEC\u90FD\u8BBE\u7F6E\uFF0C\u7136\u540E\u63D2\u5165\u6587\u672C\u4F1A\u9996\u5148\u5220\u9664\u6240\u9009\u7684\u6587\u672C\uFF08\u5982\u679C\u6709\uFF09\uFF0C\u7136\u540E\u5728\u5149\u6807\u4F4D\u7F6E\u63D2\u5165\u65B0\u6587\u672C\u3002\u56E0\u6B64\uFF0C\u4F7F\u7528\u5355\u4E2A\u5BF9\u8C61\u7BA1\u7406\u9009\u62E9\u548C\u5149\u6807\u4F3C\u4E4E\u5408\u4E4E\u903B\u8F91\uFF0C\u5E76\u4E14\u4E00\u4E2A\u9879\u76EE\u56E2\u961F\u91C7\u7528\u4E86\u8FD9\u79CD\u65B9\u6CD5\u3002\u8BE5\u5BF9\u8C61\u5728\u6587\u4EF6\u4E2D\u5B58\u50A8\u4E86\u4E24\u4E2A\u4F4D\u7F6E\uFF0C\u4EE5\u53CA\u5E03\u5C14\u503C\uFF0C\u5B83\u4EEC\u6307\u793A\u5149\u6807\u7684\u54EA\u4E00\u7AEF\u4EE5\u53CA\u9009\u62E9\u662F\u5426\u5B58\u5728\u3002</p></blockquote><p>However, the combined object was awkward. It provided no benefit for higher-level code, since the higher-level code still needed to be aware of the selection and cursor as distinct entities, and it manipulated them separately (during text insertion, it first invoked a method on the combined object to delete the selected text; then it invoked another method to retrieve the cursor position in order to insert new text). The combined object was actually more complex to implement than separate objects. It avoided storing the cursor position as a separate entity, but instead had to store a boolean indicating which end of the selection was the cursor. In order to retrieve the cursor position, the combined object had to first test the boolean and then choose the appropriate end of the selection.</p><blockquote><p>\u4F46\u662F\uFF0C\u5408\u5E76\u7684\u5BF9\u8C61\u5F88\u5C34\u5C2C\u3002\u5B83\u5BF9\u9AD8\u7EA7\u4EE3\u7801\u6CA1\u6709\u4EFB\u4F55\u597D\u5904\uFF0C\u56E0\u4E3A\u9AD8\u7EA7\u4EE3\u7801\u4ECD\u7136\u9700\u8981\u5C06\u9009\u62E9\u548C\u6E38\u6807\u89C6\u4E3A\u4E0D\u540C\u7684\u5B9E\u4F53\uFF0C\u5E76\u4E14\u5BF9\u5B83\u4EEC\u8FDB\u884C\u5355\u72EC\u64CD\u4F5C\uFF08\u5728\u63D2\u5165\u6587\u672C\u671F\u95F4\uFF0C\u5B83\u9996\u5148\u5728\u7EC4\u5408\u5BF9\u8C61\u4E0A\u8C03\u7528\u4E00\u4E2A\u65B9\u6CD5\u6765\u5220\u9664\u9009\u5B9A\u7684\u6587\u672C\uFF1B\u7136\u540E\u8C03\u7528\u53E6\u4E00\u4E2A\u65B9\u6CD5\u6765\u68C0\u7D22\u5149\u6807\u4F4D\u7F6E\uFF0C\u4EE5\u63D2\u5165\u65B0\u6587\u672C\uFF09\u3002\u5B9E\u9645\u4E0A\uFF0C\u7EC4\u5408\u5BF9\u8C61\u6BD4\u5355\u72EC\u7684\u5BF9\u8C61\u5B9E\u73B0\u8D77\u6765\u8981\u590D\u6742\u5F97\u591A\u3002\u5B83\u907F\u514D\u4E86\u5C06\u5149\u6807\u4F4D\u7F6E\u5B58\u50A8\u4E3A\u5355\u72EC\u7684\u5B9E\u4F53\uFF0C\u800C\u662F\u4E0D\u5F97\u4E0D\u5B58\u50A8\u4E00\u4E2A\u5E03\u5C14\u503C\uFF0C\u8BE5\u5E03\u5C14\u503C\u6307\u793A\u9009\u62E9\u7684\u54EA\u4E00\u7AEF\u662F\u5149\u6807\u3002\u4E3A\u4E86\u68C0\u7D22\u5149\u6807\u4F4D\u7F6E\uFF0C\u7EC4\u5408\u5BF9\u8C61\u5FC5\u987B\u9996\u5148\u6D4B\u8BD5\u5E03\u5C14\u503C\uFF0C\u7136\u540E\u9009\u62E9\u9009\u62E9\u7684\u9002\u5F53\u7ED3\u5C3E\u3002</p></blockquote><p>img Red Flag: Special-General Mixture img</p><p>This red flag occurs when a general-purpose mechanism also contains code specialized for a particular use of that mechanism. This makes the mechanism more complicated and creates information leakage between the mechanism and the particular use case: future modifications to the use case are likely to require changes to the underlying mechanism as well.</p><blockquote><p>\u5F53\u901A\u7528\u673A\u5236\u8FD8\u5305\u542B\u4E13\u95E8\u7528\u4E8E\u8BE5\u673A\u5236\u7684\u7279\u5B9A\u7528\u9014\u7684\u4EE3\u7801\u65F6\uFF0C\u5C31\u4F1A\u51FA\u73B0\u6B64\u7EA2\u8272\u6807\u5FD7\u3002\u8FD9\u4F7F\u8BE5\u673A\u5236\u66F4\u52A0\u590D\u6742\uFF0C\u5E76\u5728\u8BE5\u673A\u5236\u4E0E\u7279\u5B9A\u7528\u4F8B\u4E4B\u95F4\u9020\u6210\u4E86\u4FE1\u606F\u6CC4\u6F0F\uFF1A\u5BF9\u7528\u4F8B\u7684\u672A\u6765\u4FEE\u6539\u4E5F\u53EF\u80FD\u9700\u8981\u5BF9\u57FA\u7840\u673A\u5236\u8FDB\u884C\u66F4\u6539\u3002</p></blockquote><p>In this case, the selection and cursor were not closely enough related to combine them. When the code was revised to separate the selection and the cursor, both the usage and the implementation became simpler. Separate objects provided a simpler interface than a combined object from which selection and cursor information had to be extracted. The cursor implementation also got simpler because the cursor position was represented directly, rather than indirectly through a selection and a boolean. In fact, in the revised version no special classes were used for either the selection or the cursor. Instead, a new Position class was introduced to represent a location in the file (a line number and character within line). The selection was represented with two Positions and the cursor with one. Positions also found other uses in the project. This example also demonstrates the benefits of a lower-level but more general-purpose interface, which were discussed in Chapter 6.</p><blockquote><p>\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u9009\u62E9\u548C\u5149\u6807\u4E4B\u95F4\u7684\u5173\u8054\u5EA6\u4E0D\u8DB3\u4EE5\u5C06\u5B83\u4EEC\u7EC4\u5408\u5728\u4E00\u8D77\u3002\u5F53\u4FEE\u6539\u4EE3\u7801\u4EE5\u5206\u9694\u9009\u62E9\u548C\u5149\u6807\u65F6\uFF0C\u7528\u6CD5\u548C\u5B9E\u73B0\u90FD\u53D8\u5F97\u66F4\u52A0\u7B80\u5355\u3002\u4E0E\u5FC5\u987B\u4ECE\u4E2D\u63D0\u53D6\u9009\u62E9\u548C\u5149\u6807\u4FE1\u606F\u7684\u7EC4\u5408\u5BF9\u8C61\u76F8\u6BD4\uFF0C\u5355\u72EC\u7684\u5BF9\u8C61\u63D0\u4F9B\u4E86\u66F4\u7B80\u5355\u7684\u754C\u9762\u3002\u6E38\u6807\u7684\u5B9E\u73B0\u4E5F\u53D8\u5F97\u66F4\u52A0\u7B80\u5355\uFF0C\u56E0\u4E3A\u6E38\u6807\u7684\u4F4D\u7F6E\u662F\u76F4\u63A5\u8868\u793A\u7684\uFF0C\u800C\u4E0D\u662F\u901A\u8FC7\u9009\u62E9\u548C\u5E03\u5C14\u503C\u95F4\u63A5\u8868\u793A\u7684\u3002\u5B9E\u9645\u4E0A\uFF0C\u5728\u4FEE\u8BA2\u7248\u4E2D\uFF0C\u6CA1\u6709\u7279\u6B8A\u7684\u7C7B\u7528\u4E8E\u9009\u62E9\u6216\u6E38\u6807\u3002\u76F8\u53CD\uFF0C\u5F15\u5165\u4E86\u4E00\u4E2A\u65B0\u7684 Position \u7C7B\u6765\u8868\u793A\u6587\u4EF6\u4E2D\u7684\u4F4D\u7F6E\uFF08\u884C\u53F7\u548C\u884C\u5185\u7684\u5B57\u7B26\uFF09\u3002\u9009\u62E9\u7528\u4E24\u4E2A\u4F4D\u7F6E\u8868\u793A\uFF0C\u5149\u6807\u7528\u4E00\u4E2A\u4F4D\u7F6E\u8868\u793A\u3002\u804C\u4F4D\u8FD8\u5728\u9879\u76EE\u4E2D\u627E\u5230\u4E86\u5176\u4ED6\u7528\u9014\u3002</p></blockquote><h2 id="_9-6-example-separate-class-for-logging-\u793A\u4F8B-\u7528\u4E8E\u8BB0\u5F55\u7684\u5355\u72EC\u7C7B" tabindex="-1"><a class="header-anchor" href="#_9-6-example-separate-class-for-logging-\u793A\u4F8B-\u7528\u4E8E\u8BB0\u5F55\u7684\u5355\u72EC\u7C7B" aria-hidden="true">#</a> 9.6 Example: separate class for logging \u793A\u4F8B\uFF1A\u7528\u4E8E\u8BB0\u5F55\u7684\u5355\u72EC\u7C7B</h2><p>The second example involved error logging in a student project. A class contained several code sequences like the following:</p><blockquote><p>\u7B2C\u4E8C\u4E2A\u793A\u4F8B\u6D89\u53CA\u5B66\u751F\u9879\u76EE\u4E2D\u7684\u9519\u8BEF\u8BB0\u5F55\u3002\u4E00\u4E2A\u7C7B\u5305\u542B\u51E0\u4E2A\u4EE3\u7801\u5E8F\u5217\uFF0C\u5982\u4E0B\u6240\u793A\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    rpcConn <span class="token operator">=</span> connectionPool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">NetworkErrorLogger</span><span class="token punctuation">.</span><span class="token function">logRpcOpenError</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Rather than logging the error at the point where it was detected, a separate method in a special error logging class was invoked. The error logging class was defined at the end of the same source file:</p><blockquote><p>\u800C\u4E0D\u662F\u5728\u68C0\u6D4B\u5230\u9519\u8BEF\u65F6\u8BB0\u5F55\u9519\u8BEF\uFF0C\u800C\u662F\u8C03\u7528\u7279\u6B8A\u9519\u8BEF\u8BB0\u5F55\u7C7B\u4E2D\u7684\u5355\u72EC\u65B9\u6CD5\u3002\u9519\u8BEF\u8BB0\u5F55\u7C7B\u662F\u5728\u540C\u4E00\u6E90\u6587\u4EF6\u7684\u672B\u5C3E\u5B9A\u4E49\u7684\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NetworkErrorLogger</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
    *  Output information relevant to an error that occurs when trying
    *  to open a connection to send an RPC.
    *
    *  <span class="token keyword">@param</span> <span class="token parameter">req</span>
    *       The RPC request that would have been sent through the connection
    *  <span class="token keyword">@param</span> <span class="token parameter">dest</span>
    *       The destination of the RPC
    *  <span class="token keyword">@param</span> <span class="token parameter">e</span>
    *       The caught error
    */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">logRpcOpenError</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">AddrPortTuple</span> dest<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span> <span class="token string">&quot;Cannot send message: &quot;</span> <span class="token operator">+</span> req <span class="token operator">+</span> <span class="token string">&quot;. \\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;Unable to find or open connection to &quot;</span> <span class="token operator">+</span> dest <span class="token operator">+</span> <span class="token string">&quot; :&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>The NetworkErrorLogger class contained several methods such as logRpcSendError and logRpcReceiveError, each of which logged a different kind of error.</p><blockquote><p>NetworkErrorLogger \u7C7B\u5305\u542B\u51E0\u4E2A\u65B9\u6CD5\uFF0C\u4F8B\u5982 logRpcSendError \u548C logRpcReceiveError\uFF0C\u6BCF\u4E2A\u65B9\u6CD5\u90FD\u8BB0\u5F55\u4E86\u4E0D\u540C\u7C7B\u578B\u7684\u9519\u8BEF\u3002</p></blockquote><p>This separation added complexity with no benefit. The logging methods were shallow: most consisted of a single line of code, but they required a considerable amount of documentation. Each method was only invoked in a single place. The logging methods were highly dependent on their invocations: someone reading the invocation would most likely flip over to the logging method to make sure that the right information was being logged; similarly, someone reading the logging method would probably flip over to the invocation site to understand the purpose of the method.</p><blockquote><p>\u8FD9\u79CD\u5206\u79BB\u589E\u52A0\u4E86\u590D\u6742\u6027\uFF0C\u6CA1\u6709\u4EFB\u4F55\u597D\u5904\u3002\u65E5\u5FD7\u8BB0\u5F55\u65B9\u6CD5\u5F88\u6D45\uFF1A\u5927\u591A\u6570\u53EA\u5305\u542B\u4E00\u884C\u4EE3\u7801\uFF0C\u4F46\u662F\u5B83\u4EEC\u9700\u8981\u5927\u91CF\u7684\u6587\u6863\u3002\u6BCF\u4E2A\u65B9\u6CD5\u4EC5\u5728\u5355\u4E2A\u4F4D\u7F6E\u8C03\u7528\u3002\u65E5\u5FD7\u8BB0\u5F55\u65B9\u6CD5\u9AD8\u5EA6\u4F9D\u8D56\u4E8E\u5B83\u4EEC\u7684\u8C03\u7528\uFF1A\u8BFB\u53D6\u8C03\u7528\u7684\u4EBA\u5F88\u53EF\u80FD\u4F1A\u5207\u6362\u5230\u65E5\u5FD7\u8BB0\u5F55\u65B9\u6CD5\uFF0C\u4EE5\u786E\u4FDD\u8BB0\u5F55\u4E86\u6B63\u786E\u7684\u4FE1\u606F\u3002\u540C\u6837\uFF0C\u9605\u8BFB\u65E5\u5FD7\u8BB0\u5F55\u65B9\u6CD5\u7684\u4EBA\u53EF\u80FD\u4F1A\u8F6C\u5230\u8C03\u7528\u7AD9\u70B9\u4EE5\u4E86\u89E3\u8BE5\u65B9\u6CD5\u7684\u76EE\u7684\u3002</p></blockquote><p>In this example, it would be better to eliminate the logging methods and place the logging statements at the locations where the errors were detected. This would make the code easier to read and eliminate the interfaces required for the logging methods.</p><blockquote><p>\u5728\u6B64\u793A\u4F8B\u4E2D\uFF0C\u6700\u597D\u6D88\u9664\u65E5\u5FD7\u8BB0\u5F55\u65B9\u6CD5\uFF0C\u5E76\u5C06\u65E5\u5FD7\u8BB0\u5F55\u8BED\u53E5\u653E\u7F6E\u5728\u68C0\u6D4B\u5230\u9519\u8BEF\u7684\u4F4D\u7F6E\u3002\u8FD9\u5C06\u4F7F\u4EE3\u7801\u66F4\u6613\u4E8E\u9605\u8BFB\uFF0C\u5E76\u6D88\u9664\u4E86\u65E5\u5FD7\u8BB0\u5F55\u65B9\u6CD5\u6240\u9700\u7684\u63A5\u53E3\u3002</p></blockquote><h2 id="_9-7-example-editor-undo-mechanism-\u793A\u4F8B-\u7F16\u8F91\u5668\u64A4\u6D88\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#_9-7-example-editor-undo-mechanism-\u793A\u4F8B-\u7F16\u8F91\u5668\u64A4\u6D88\u673A\u5236" aria-hidden="true">#</a> 9.7 Example: editor undo mechanism \u793A\u4F8B\uFF1A\u7F16\u8F91\u5668\u64A4\u6D88\u673A\u5236</h2><p>In the GUI editor project from Section 6.2, one of the requirements was to support multi-level undo/redo, not just for changes to the text itself, but also for changes in the selection, insertion cursor, and view. For example, if a user selected some text, deleted it, scrolled to a different place in the file, and then invoked undo, the editor had to restore its state to what it was just before the deletion. This included restoring the deleted text, selecting it again, and also making the selected text visible in the window.</p><blockquote><p>\u5728 6.2 \u8282\u7684 GUI \u7F16\u8F91\u5668\u9879\u76EE\u4E2D\uFF0C\u8981\u6C42\u4E4B\u4E00\u662F\u652F\u6301\u591A\u7EA7\u64A4\u6D88/\u91CD\u505A\uFF0C\u4E0D\u4EC5\u8981\u66F4\u6539\u6587\u672C\u672C\u8EAB\uFF0C\u8FD8\u8981\u66F4\u6539\u9009\u62E9\uFF0C\u63D2\u5165\u5149\u6807\u548C\u89C6\u56FE\u3002\u4F8B\u5982\uFF0C\u5982\u679C\u7528\u6237\u9009\u62E9\u4E86\u4E00\u4E9B\u6587\u672C\uFF0C\u5C06\u5176\u5220\u9664\uFF0C\u6EDA\u52A8\u5230\u6587\u4EF6\u4E2D\u7684\u5176\u4ED6\u4F4D\u7F6E\uFF0C\u7136\u540E\u8C03\u7528 undo\uFF0C\u5219\u7F16\u8F91\u5668\u5FC5\u987B\u5C06\u5176\u72B6\u6001\u6062\u590D\u4E3A\u5220\u9664\u524D\u7684\u72B6\u6001\u3002\u8FD9\u5305\u62EC\u8FD8\u539F\u5DF2\u5220\u9664\u7684\u6587\u672C\uFF0C\u518D\u6B21\u9009\u62E9\u5B83\uFF0C\u5E76\u4F7F\u6240\u9009\u7684\u6587\u672C\u5728\u7A97\u53E3\u4E2D\u53EF\u89C1\u3002</p></blockquote><p>Some of the student projects implemented the entire undo mechanism as part of the text class. The text class maintained a list of all the undoable changes. It automatically added entries to this list whenever the text was changed. For changes to the selection, insertion cursor, and view, the user interface code invoked additional methods in the text class, which then added entries for those changes to the undo list. When undo or redo was requested by the user, the user interface code invoked a method in the text class, which then processed the entries in the undo list. For entries related to text, it updated the internals of the text class; for entries related to other things, such as the selection, the text class called back to the user interface code to carry out the undo or redo.</p><blockquote><p>\u4E00\u4E9B\u5B66\u751F\u9879\u76EE\u5C06\u6574\u4E2A\u64A4\u6D88\u673A\u5236\u5B9E\u73B0\u4E3A\u6587\u672C\u7C7B\u7684\u4E00\u90E8\u5206\u3002\u6587\u672C\u7C7B\u7EF4\u62A4\u6240\u6709\u4E0D\u53EF\u64A4\u6D88\u66F4\u6539\u7684\u5217\u8868\u3002\u6BCF\u5F53\u66F4\u6539\u6587\u672C\u65F6\uFF0C\u5B83\u5C06\u81EA\u52A8\u5C06\u6761\u76EE\u6DFB\u52A0\u5230\u6B64\u5217\u8868\u4E2D\u3002\u4E3A\u4E86\u66F4\u6539\u9009\u62E9\uFF0C\u63D2\u5165\u5149\u6807\u548C\u89C6\u56FE\uFF0C\u7528\u6237\u754C\u9762\u4EE3\u7801\u8C03\u7528\u4E86\u6587\u672C\u7C7B\u4E2D\u7684\u5176\u4ED6\u65B9\u6CD5\uFF0C\u7136\u540E\u5C06\u8FD9\u4E9B\u66F4\u6539\u7684\u6761\u76EE\u6DFB\u52A0\u5230\u64A4\u6D88\u5217\u8868\u4E2D\u3002\u5F53\u7528\u6237\u8BF7\u6C42\u64A4\u6D88\u6216\u91CD\u505A\u65F6\uFF0C\u7528\u6237\u754C\u9762\u4EE3\u7801\u5C06\u8C03\u7528\u6587\u672C\u7C7B\u4E2D\u7684\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u7136\u540E\u5904\u7406\u64A4\u6D88\u5217\u8868\u4E2D\u7684\u6761\u76EE\u3002\u5BF9\u4E8E\u4E0E\u6587\u672C\u76F8\u5173\u7684\u6761\u76EE\uFF0C\u5B83\u66F4\u65B0\u4E86\u6587\u672C\u7C7B\u7684\u5185\u90E8\u3002\u5BF9\u4E8E\u4E0E\u5176\u4ED6\u4E8B\u7269\uFF08\u4F8B\u5982\u9009\u62E9\uFF09\u76F8\u5173\u7684\u6761\u76EE\uFF0C\u5C06\u8C03\u7528\u8FD4\u56DE\u5230\u7528\u6237\u754C\u9762\u4EE3\u7801\u7684\u6587\u672C\u7C7B\u6765\u6267\u884C\u64A4\u6D88\u6216\u91CD\u505A\u3002</p></blockquote><p>This approach resulted in an awkward set of features in the text class. The core of undo/redo consists of a general-purpose mechanism for managing a list of actions that have been executed and stepping through them during undo and redo operations. The core was located in the text class along with special-purpose handlers that implemented undo and redo for specific things such as text and the selection. The special-purpose undo handlers for the selection and the cursor had nothing to do with anything else in the text class; they resulted in information leakage between the text class and the user interface, as well as extra methods in each module to pass undo information back and forth. If a new sort of undoable entity were added to the system in the future, it would require changes to the text class, including new methods specific to that entity. In addition, the general-purpose undo core had little to do with the general-purpose text facilities in the class.</p><blockquote><p>\u8FD9\u79CD\u65B9\u6CD5\u5728\u6587\u672C\u7C7B\u4E2D\u5BFC\u81F4\u4E86\u4E00\u7CFB\u5217\u5C34\u5C2C\u7684\u529F\u80FD\u3002\u64A4\u6D88/\u91CD\u505A\u7684\u6838\u5FC3\u7531\u901A\u7528\u673A\u5236\u7EC4\u6210\uFF0C\u7528\u4E8E\u7BA1\u7406\u5DF2\u6267\u884C\u7684\u52A8\u4F5C\u5217\u8868\uFF0C\u5E76\u5728\u64A4\u6D88\u548C\u91CD\u505A\u64CD\u4F5C\u671F\u95F4\u9010\u6B65\u6267\u884C\u8FD9\u4E9B\u52A8\u4F5C\u3002\u6838\u5FC3\u4E0E\u4E13\u7528\u5904\u7406\u7A0B\u5E8F\u4E00\u8D77\u4F4D\u4E8E text \u7C7B\u4E2D\uFF0C\u8BE5\u4E13\u7528\u5904\u7406\u7A0B\u5E8F\u5BF9\u8BF8\u5982\u6587\u672C\u548C\u9009\u62E9\u4E4B\u7C7B\u7684\u7279\u5B9A\u5185\u5BB9\u5B9E\u73B0\u4E86\u64A4\u6D88\u548C\u91CD\u505A\u3002\u7528\u4E8E\u9009\u62E9\u548C\u5149\u6807\u7684\u4E13\u7528\u64A4\u6D88\u5904\u7406\u7A0B\u5E8F\u4E0E\u6587\u672C\u7C7B\u4E2D\u7684\u4EFB\u4F55\u5176\u4ED6\u5185\u5BB9\u5747\u65E0\u5173\u3002\u5B83\u4EEC\u5BFC\u81F4\u6587\u672C\u7C7B\u548C\u7528\u6237\u754C\u9762\u4E4B\u95F4\u7684\u4FE1\u606F\u6CC4\u6F0F\uFF0C\u4EE5\u53CA\u6BCF\u4E2A\u6A21\u5757\u4E2D\u6765\u56DE\u4F20\u9012\u64A4\u6D88\u4FE1\u606F\u7684\u989D\u5916\u65B9\u6CD5\u3002\u5982\u679C\u5C06\u6765\u5C06\u65B0\u7684\u53EF\u64A4\u6D88\u5B9E\u4F53\u6DFB\u52A0\u5230\u7CFB\u7EDF\u4E2D\uFF0C\u5219\u5C06\u9700\u8981\u66F4\u6539\u6587\u672C\u7C7B\uFF0C\u5305\u62EC\u7279\u5B9A\u4E8E\u8BE5\u5B9E\u4F53\u7684\u65B0\u65B9\u6CD5\u3002</p></blockquote><p>These problems can be solved by extracting the general-purpose core of the undo/redo mechanism and placing it in a separate class:</p><blockquote><p>\u901A\u8FC7\u63D0\u53D6\u64A4\u6D88/\u91CD\u505A\u673A\u5236\u7684\u901A\u7528\u6838\u5FC3\u5E76\u5C06\u5176\u653E\u5728\u5355\u72EC\u7684\u7C7B\u4E2D\uFF0C\u53EF\u4EE5\u89E3\u51B3\u8FD9\u4E9B\u95EE\u9898\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">History</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">addFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>In this design, the History class manages a collection of objects that implement the interface History.Action. Each History.Action describes a single operation, such as a text insertion or a change in the cursor location, and it provides methods that can undo or redo the operation. The History class knows nothing about the information stored in the actions or how they implement their undo and redo methods. History maintains a history list describing all of the actions executed over the lifetime of an application, and it provides undo and redo methods that walk backwards and forwards through the list in response to user-requested undos and redos, calling undo and redo methods in the History.Actions.</p><blockquote><p>\u5728\u6B64\u8BBE\u8BA1\u4E2D\uFF0CHistory \u7C7B\u7BA1\u7406\u5B9E\u73B0\u63A5\u53E3 History.Action \u7684\u5BF9\u8C61\u7684\u96C6\u5408\u3002\u6BCF\u4E2A History.Action \u63CF\u8FF0\u4E00\u4E2A\u64CD\u4F5C\uFF0C\u4F8B\u5982\u63D2\u5165\u6587\u672C\u6216\u66F4\u6539\u5149\u6807\u4F4D\u7F6E\uFF0C\u5E76\u4E14\u5B83\u63D0\u4F9B\u4E86\u53EF\u4EE5\u64A4\u6D88\u6216\u91CD\u505A\u8BE5\u64CD\u4F5C\u7684\u65B9\u6CD5\u3002History \u7C7B\u5BF9\u64CD\u4F5C\u4E2D\u5B58\u50A8\u7684\u4FE1\u606F\u6216\u5B83\u4EEC\u5982\u4F55\u5B9E\u73B0\u5176\u64A4\u6D88\u548C\u91CD\u505A\u65B9\u6CD5\u4E00\u65E0\u6240\u77E5\u3002\u5386\u53F2\u8BB0\u5F55\u7EF4\u62A4\u4E00\u4E2A\u5386\u53F2\u8BB0\u5F55\u5217\u8868\uFF0C\u8BE5\u5217\u8868\u63CF\u8FF0\u4E86\u5E94\u7528\u7A0B\u5E8F\u6574\u4E2A\u751F\u547D\u5468\u671F\u4E2D\u6267\u884C\u7684\u6240\u6709\u64CD\u4F5C\uFF0C\u5E76\u4E14\u5B83\u63D0\u4F9B\u4E86\u64A4\u6D88\u548C\u91CD\u505A\u65B9\u6CD5\uFF0C\u4EE5\u54CD\u5E94\u7528\u6237\u8BF7\u6C42\u7684\u64A4\u6D88\u548C\u91CD\u505A\u800C\u5728\u5217\u8868\u4E2D\u524D\u540E\u79FB\u52A8\uFF0C\u5E76\u5728\u5E94\u7528\u7A0B\u5E8F\u4E2D\u8C03\u7528\u64A4\u6D88\u548C\u91CD\u505A\u65B9\u6CD5\u3002\u5386\u53F2\u52A8\u4F5C\u3002</p></blockquote><p>History.Actions are special-purpose objects: each one understands a particular kind of undoable operation. They are implemented outside the History class, in modules that understand particular kinds of undoable actions. The text class might implement UndoableInsert and UndoableDelete objects to describe text insertions and deletions. Whenever it inserts text, the text class creates a new UndoableInsert object describing the insertion and invokes History.addAction to add it to the history list. The editor\u2019s user interface code might create UndoableSelection and UndoableCursor objects that describe changes to the selection and insertion cursor.</p><blockquote><p>\u5386\u53F2\u3002\u52A8\u4F5C\u662F\u7279\u6B8A\u76EE\u7684\u7684\u5BF9\u8C61\uFF1A\u6BCF\u4E2A\u4EBA\u90FD\u4E86\u89E3\u4E00\u79CD\u7279\u6B8A\u7684\u4E0D\u53EF\u64CD\u4F5C\u3002\u5B83\u4EEC\u5728 History \u7C7B\u4E4B\u5916\u7684\u6A21\u5757\u4E2D\u5B9E\u73B0\uFF0C\u8FD9\u4E9B\u6A21\u5757\u53EF\u4EE5\u7406\u89E3\u7279\u5B9A\u7C7B\u578B\u7684\u53EF\u64A4\u9500\u64CD\u4F5C\u3002\u6587\u672C\u7C7B\u53EF\u80FD\u5B9E\u73B0 UndoableInsert \u548C UndoableDelete \u5BF9\u8C61\uFF0C\u4EE5\u63CF\u8FF0\u6587\u672C\u7684\u63D2\u5165\u548C\u5220\u9664\u3002\u6BCF\u5F53\u63D2\u5165\u6587\u672C\u65F6\uFF0C\u6587\u672C\u7C7B\u90FD\u4F1A\u521B\u5EFA\u4E00\u4E2A\u63CF\u8FF0\u8BE5\u63D2\u5165\u7684\u65B0 UndoableInsert \u5BF9\u8C61\uFF0C\u5E76\u8C03\u7528 History.addAction \u5C06\u5176\u6DFB\u52A0\u5230\u5386\u53F2\u5217\u8868\u4E2D\u3002\u7F16\u8F91\u5668\u7684\u7528\u6237\u754C\u9762\u4EE3\u7801\u53EF\u80FD\u4F1A\u521B\u5EFA UndoableSelection \u548C UndoableCursor \u5BF9\u8C61\uFF0C\u8FD9\u4E9B\u5BF9\u8C61\u63CF\u8FF0\u5BF9\u9009\u62E9\u548C\u63D2\u5165\u5149\u6807\u7684\u66F4\u6539\u3002</p></blockquote><p>The History class also allows actions to be grouped so that, for example, a single undo request from the user can restore deleted text, reselect the deleted text, and reposition the insertion cursor. There are a number of ways to group actions; the History class uses fences, which are markers placed in the history list to separate groups of related actions. Each call to History.redo walks backwards through the history list, undoing actions until it reaches the next fence. The placement of fences is determined by higher-level code by invoking History.addFence.</p><blockquote><p>History \u7C7B\u8FD8\u5141\u8BB8\u5BF9\u64CD\u4F5C\u8FDB\u884C\u5206\u7EC4\uFF0C\u4F8B\u5982\uFF0C\u6765\u81EA\u7528\u6237\u7684\u5355\u4E2A\u64A4\u6D88\u8BF7\u6C42\u53EF\u4EE5\u6062\u590D\u5DF2\u5220\u9664\u7684\u6587\u672C\uFF0C\u91CD\u65B0\u9009\u62E9\u5DF2\u5220\u9664\u7684\u6587\u672C\u4EE5\u53CA\u91CD\u65B0\u653E\u7F6E\u63D2\u5165\u5149\u6807\u3002\u6709\u591A\u79CD\u5C06\u52A8\u4F5C\u5206\u7EC4\u7684\u65B9\u6CD5\u3002\u5386\u53F2\u8BB0\u5F55\u7C7B\u4F7F\u7528\u56F4\u680F\uFF0C\u56F4\u680F\u662F\u653E\u7F6E\u5728\u5386\u53F2\u8BB0\u5F55\u5217\u8868\u4E2D\u7684\u6807\u8BB0\uFF0C\u7528\u4E8E\u5206\u9694\u76F8\u5173\u52A8\u4F5C\u7684\u7EC4\u3002\u6BCF\u6B21\u5BF9 History.redo \u7684\u8C03\u7528\u90FD\u4F1A\u5411\u540E\u6D4F\u89C8\u5386\u53F2\u8BB0\u5F55\u5217\u8868\uFF0C\u64A4\u6D88\u64CD\u4F5C\uFF0C\u76F4\u5230\u5230\u8FBE\u4E0B\u4E00\u4E2A\u6805\u680F\u3002\u56F4\u680F\u7684\u4F4D\u7F6E\u7531\u66F4\u9AD8\u7EA7\u522B\u7684\u4EE3\u7801\u901A\u8FC7\u8C03\u7528 History.addFence \u786E\u5B9A\u3002</p></blockquote><p>This approach divides the functionality of undo into three categories, each of which is implemented in a different place:</p><blockquote><p>\u8FD9\u79CD\u65B9\u6CD5\u5C06\u64A4\u6D88\u529F\u80FD\u5206\u4E3A\u4E09\u7C7B\uFF0C\u6BCF\u7C7B\u90FD\u5728\u4E0D\u540C\u7684\u5730\u65B9\u5B9E\u73B0\uFF1A</p></blockquote><p>A general-purpose mechanism for managing and grouping actions and invoking undo/redo operations (implemented by the History class). The specifics of particular actions (implemented by a variety of classes, each of which understands a small number of action types). The policy for grouping actions (implemented by high-level user interface code to provide the right overall application behavior). Each of these categories can be implemented without any understanding of the other categories. The History class does not know what kind of actions are being undone; it could be used in a variety of applications. Each action class understands only a single kind of action, and neither the History class nor the action classes needs to be aware of the policy for grouping actions.</p><blockquote><p>\u4E00\u79CD\u7528\u4E8E\u7BA1\u7406\u548C\u5206\u7EC4\u52A8\u4F5C\u4EE5\u53CA\u8C03\u7528\u64A4\u6D88/\u91CD\u505A\u64CD\u4F5C\u7684\u901A\u7528\u673A\u5236\uFF08\u7531 History \u7C7B\u5B9E\u73B0\uFF09\u3002\u7279\u5B9A\u64CD\u4F5C\u7684\u7EC6\u8282\uFF08\u7531\u5404\u79CD\u7C7B\u5B9E\u73B0\uFF0C\u6BCF\u4E2A\u7C7B\u90FD\u4E86\u89E3\u5C11\u91CF\u7684\u64CD\u4F5C\u7C7B\u578B\uFF09\u3002\u5206\u7EC4\u64CD\u4F5C\u7684\u7B56\u7565\uFF08\u7531\u9AD8\u7EA7\u7528\u6237\u754C\u9762\u4EE3\u7801\u5B9E\u73B0\uFF0C\u4EE5\u63D0\u4F9B\u6B63\u786E\u7684\u6574\u4F53\u5E94\u7528\u7A0B\u5E8F\u884C\u4E3A\uFF09\u3002\u8FD9\u4E9B\u7C7B\u522B\u4E2D\u7684\u6BCF\u4E00\u4E2A\u90FD\u53EF\u4EE5\u5728\u4E0D\u4E86\u89E3\u5176\u4ED6\u7C7B\u522B\u7684\u60C5\u51B5\u4E0B\u5B9E\u65BD\u3002\u5386\u53F2\u8BFE\u4E0D\u77E5\u9053\u8981\u64A4\u6D88\u54EA\u79CD\u64CD\u4F5C\uFF1B\u5B83\u53EF\u4EE5\u7528\u4E8E\u591A\u79CD\u5E94\u7528\u3002\u6BCF\u4E2A\u52A8\u4F5C\u7C7B\u4EC5\u7406\u89E3\u4E00\u79CD\u52A8\u4F5C\uFF0C\u5E76\u4E14\u5386\u53F2\u8BB0\u5F55\u7C7B\u548C\u52A8\u4F5C\u7C7B\u90FD\u4E0D\u9700\u8981\u77E5\u9053\u5C06\u52A8\u4F5C\u5206\u7EC4\u7684\u7B56\u7565\u3002</p></blockquote><p>The key design decision was the one that separated the general-purpose part of the undo mechanism from the special-purpose parts and put the general-purpose part in a class by itself. Once that was done, the rest of the design fell out naturally.</p><blockquote><p>\u5173\u952E\u7684\u8BBE\u8BA1\u51B3\u7B56\u662F\u5C06\u64A4\u6D88\u673A\u5236\u7684\u901A\u7528\u90E8\u5206\u4E0E\u4E13\u7528\u90E8\u5206\u5206\u5F00\uFF0C\u7136\u540E\u5C06\u901A\u7528\u90E8\u5206\u5355\u72EC\u653E\u5728\u4E00\u4E2A\u7C7B\u4E2D\u7684\u51B3\u5B9A\u3002\u4E00\u65E6\u5B8C\u6210\uFF0C\u5176\u4F59\u7684\u8BBE\u8BA1\u5C31\u4F1A\u81EA\u7136\u6D88\u5931\u3002</p></blockquote><p>Note: the suggestion to separate general-purpose code from special-purpose code refers to code related to a particular mechanism. For example, special-purpose undo code (such as code to undo a text insertion) should be separated from general-purpose undo code (such as code to manage the history list). However, it often makes sense to combine special-purpose code for one mechanism with general-purpose code for another. The text class is an example of this: it implements a general-purpose mechanism for managing text, but it includes special-purpose code related to undoing. The undo code is special-purpose because it only handles undo operations for text modifications. It doesn\u2019t make sense to combine this code with the general-purpose undo infrastructure in the History class, but it does make sense to put it in the text class, since it is closely related to other text functions.</p><blockquote><p>\u6CE8\u610F:\u5C06\u901A\u7528\u4EE3\u7801\u4E0E\u4E13\u7528\u4EE3\u7801\u5206\u79BB\u7684\u5EFA\u8BAE\u662F\u6307\u4E0E\u7279\u5B9A\u673A\u5236\u76F8\u5173\u7684\u4EE3\u7801\u3002\u4F8B\u5982\uFF0C\u7279\u6B8A\u7528\u9014\u7684\u64A4\u6D88\u4EE3\u7801(\u4F8B\u5982\u64A4\u6D88\u6587\u672C\u63D2\u5165\u7684\u4EE3\u7801)\u5E94\u8BE5\u4E0E\u901A\u7528\u7528\u9014\u7684\u64A4\u6D88\u4EE3\u7801(\u4F8B\u5982\u7BA1\u7406\u5386\u53F2\u8BB0\u5F55\u5217\u8868\u7684\u4EE3\u7801)\u5206\u5F00\u3002\u7136\u800C\uFF0C\u5C06\u4E00\u79CD\u673A\u5236\u7684\u4E13\u7528\u4EE3\u7801\u4E0E\u53E6\u4E00\u79CD\u673A\u5236\u7684\u901A\u7528\u4EE3\u7801\u7EC4\u5408\u8D77\u6765\u901A\u5E38\u662F\u6709\u610F\u4E49\u7684\u3002text \u7C7B\u5C31\u662F\u8FD9\u6837\u4E00\u4E2A\u4F8B\u5B50:\u5B83\u5B9E\u73B0\u4E86\u4E00\u79CD\u7BA1\u7406\u6587\u672C\u7684\u901A\u7528\u673A\u5236\uFF0C\u4F46\u662F\u5B83\u5305\u542B\u4E86\u4E0E\u64A4\u9500\u76F8\u5173\u7684\u4E13\u7528\u4EE3\u7801\u3002\u64A4\u6D88\u4EE3\u7801\u662F\u4E13\u7528\u7684\uFF0C\u56E0\u4E3A\u5B83\u53EA\u5904\u7406\u6587\u672C\u4FEE\u6539\u7684\u64A4\u6D88\u64CD\u4F5C\u3002\u5C06\u8FD9\u6BB5\u4EE3\u7801\u4E0E History \u7C7B\u4E2D\u901A\u7528\u7684 undo \u57FA\u7840\u7ED3\u6784\u7ED3\u5408\u5728\u4E00\u8D77\u662F\u6CA1\u6709\u610F\u4E49\u7684\uFF0C\u4F46\u662F\u5C06\u5B83\u653E\u5728 text \u7C7B\u4E2D\u662F\u6709\u610F\u4E49\u7684\uFF0C\u56E0\u4E3A\u5B83\u4E0E\u5176\u4ED6\u6587\u672C\u51FD\u6570\u5BC6\u5207\u76F8\u5173\u3002</p></blockquote><h2 id="_9-8-splitting-and-joining-methods-\u62C6\u5206\u548C\u5408\u5E76\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_9-8-splitting-and-joining-methods-\u62C6\u5206\u548C\u5408\u5E76\u65B9\u6CD5" aria-hidden="true">#</a> 9.8 Splitting and joining methods \u62C6\u5206\u548C\u5408\u5E76\u65B9\u6CD5</h2><p>The issue of when to subdivide applies not just to classes, but also to methods: are there times when it is better to divide an existing method into multiple smaller methods? Or, should two smaller methods be combined into one larger one? Long methods tend to be more difficult to understand than shorter ones, so many people argue that length alone is a good justification for breaking up a method. Students in classes are often given rigid criteria, such as \u201CSplit up any method longer than 20 lines!\u201D</p><blockquote><p>\u4F55\u65F6\u7EC6\u5206\u7684\u95EE\u9898\u4E0D\u4EC5\u9002\u7528\u4E8E\u7C7B\uFF0C\u800C\u4E14\u8FD8\u9002\u7528\u4E8E\u65B9\u6CD5\uFF1A\u662F\u5426\u6709\u65F6\u6700\u597D\u5C06\u73B0\u6709\u65B9\u6CD5\u5206\u4E3A\u591A\u4E2A\u8F83\u5C0F\u7684\u65B9\u6CD5\uFF1F\u8FD8\u662F\u5E94\u8BE5\u5C06\u4E24\u79CD\u8F83\u5C0F\u7684\u65B9\u6CD5\u5408\u5E76\u4E3A\u4E00\u79CD\u8F83\u5927\u7684\u65B9\u6CD5\uFF1F\u957F\u65B9\u6CD5\u6BD4\u77ED\u65B9\u6CD5\u66F4\u96BE\u4E8E\u7406\u89E3\uFF0C\u56E0\u6B64\u8BB8\u591A\u4EBA\u8BA4\u4E3A\u4EC5\u957F\u5EA6\u662F\u5206\u89E3\u65B9\u6CD5\u7684\u4E00\u4E2A\u5F88\u597D\u7684\u7406\u7531\u3002\u8BFE\u5802\u4E0A\u7684\u5B66\u751F\u901A\u5E38\u4F1A\u83B7\u5F97\u4E25\u683C\u7684\u6807\u51C6\uFF0C\u4F8B\u5982\u201C\u62C6\u5206\u8D85\u8FC7 20 \u884C\u7684\u4EFB\u4F55\u65B9\u6CD5\uFF01\u201D</p></blockquote><p>However, length by itself is rarely a good reason for splitting up a method. In general, developers tend to break up methods too much. Splitting up a method introduces additional interfaces, which add to complexity. It also separates the pieces of the original method, which makes the code harder to read if the pieces are actually related. You shouldn\u2019t break up a method unless it makes the overall system simpler; I\u2019ll discuss how this might happen below.</p><blockquote><p>\u4F46\u662F\uFF0C\u957F\u5EA6\u672C\u8EAB\u5F88\u5C11\u662F\u62C6\u5206\u65B9\u6CD5\u7684\u4E00\u4E2A\u5F88\u597D\u7684\u7406\u7531\u3002\u901A\u5E38\uFF0C\u5F00\u53D1\u4EBA\u5458\u503E\u5411\u4E8E\u8FC7\u591A\u5730\u5206\u89E3\u65B9\u6CD5\u3002\u62C6\u5206\u65B9\u6CD5\u4F1A\u5F15\u5165\u5176\u4ED6\u63A5\u53E3\uFF0C\u4ECE\u800C\u589E\u52A0\u4E86\u590D\u6742\u6027\u3002\u5B83\u8FD8\u5C06\u539F\u59CB\u65B9\u6CD5\u7684\u5404\u4E2A\u90E8\u5206\u5206\u5F00\uFF0C\u5982\u679C\u8FD9\u4E9B\u90E8\u5206\u5B9E\u9645\u4E0A\u662F\u76F8\u5173\u7684\uFF0C\u5219\u4F7F\u4EE3\u7801\u66F4\u96BE\u9605\u8BFB\u3002\u60A8\u4E0D\u5E94\u8BE5\u5206\u89E3\u4E00\u79CD\u65B9\u6CD5\uFF0C\u9664\u975E\u5B83\u4F7F\u6574\u4E2A\u7CFB\u7EDF\u66F4\u52A0\u7B80\u5355\uFF1B\u6211\u5C06\u5728\u4E0B\u9762\u8BA8\u8BBA\u8FD9\u79CD\u60C5\u51B5\u3002</p></blockquote><p>Long methods aren\u2019t always bad. For example, suppose a method contains five 20-line blocks of code that are executed in order. If the blocks are relatively independent, then the method can be read and understood one block at a time; there\u2019s not much benefit in moving each of the blocks into a separate method. If the blocks have complex interactions, it\u2019s even more important to keep them together so readers can see all of the code at once; if each block is in a separate method, readers will have to flip back and forth between these spread-out methods in order to understand how they work together. Methods containing hundreds of lines of code are fine if they have a simple signature and are easy to read. These methods are deep (lots of functionality, simple interface), which is good.</p><blockquote><p>\u957F\u65B9\u6CD5\u5E76\u4E0D\u603B\u662F\u574F\u7684\u3002\u4F8B\u5982\uFF0C\u5047\u8BBE\u4E00\u4E2A\u65B9\u6CD5\u5305\u542B\u6309\u987A\u5E8F\u6267\u884C\u7684\u4E94\u4E2A 20 \u884C\u4EE3\u7801\u5757\u3002\u5982\u679C\u8FD9\u4E9B\u5757\u662F\u76F8\u5BF9\u72EC\u7ACB\u7684\uFF0C\u5219\u53EF\u4EE5\u4E00\u6B21\u8BFB\u53D6\u5E76\u7406\u89E3\u8BE5\u65B9\u6CD5\u7684\u4E00\u4E2A\u5757\u3002\u5C06\u6BCF\u4E2A\u5757\u79FB\u52A8\u5230\u5355\u72EC\u7684\u65B9\u6CD5\u4E2D\u5E76\u6CA1\u6709\u592A\u5927\u7684\u597D\u5904\u3002\u5982\u679C\u8FD9\u4E9B\u5757\u5177\u6709\u590D\u6742\u7684\u4EA4\u4E92\u4F5C\u7528\uFF0C\u5219\u5C06\u5B83\u4EEC\u4FDD\u6301\u5728\u4E00\u8D77\u5C31\u663E\u5F97\u5C24\u4E3A\u91CD\u8981\uFF0C\u8FD9\u6837\u8BFB\u8005\u5C31\u53EF\u4EE5\u4E00\u6B21\u770B\u5230\u6240\u6709\u4EE3\u7801\u3002\u5982\u679C\u6BCF\u4E2A\u5757\u4F7F\u7528\u5355\u72EC\u7684\u65B9\u6CD5\uFF0C\u5219\u8BFB\u8005\u5C06\u4E0D\u5F97\u4E0D\u5728\u8FD9\u4E9B\u6269\u5C55\u65B9\u6CD5\u4E4B\u95F4\u6765\u56DE\u5207\u6362\uFF0C\u4EE5\u4E86\u89E3\u5B83\u4EEC\u5982\u4F55\u534F\u540C\u5DE5\u4F5C\u3002\u5982\u679C\u65B9\u6CD5\u5177\u6709\u7B80\u5355\u7684\u7B7E\u540D\u5E76\u4E14\u6613\u4E8E\u9605\u8BFB\uFF0C\u5219\u5305\u542B\u6570\u767E\u884C\u4EE3\u7801\u7684\u65B9\u6CD5\u5C31\u53EF\u4EE5\u4E86\u3002\u8FD9\u4E9B\u65B9\u6CD5\u5F88\u6DF1\u5165\uFF08\u5F88\u591A\u529F\u80FD\uFF0C\u7B80\u5355\u7684\u754C\u9762\uFF09\uFF0C\u5F88\u597D\u3002</p></blockquote><p><img src="`+a+'" alt=""></p><p>Figure 9.3: A method (a) can be split either by by extracting a subtask (b) or by dividing its functionality into two separate methods (c). A method should not be split if it results in shallow methods, as in (d).</p><blockquote><p>\u56FE 9.3\uFF1A\u65B9\u6CD5\uFF08a\uFF09\u53EF\u4EE5\u901A\u8FC7\u63D0\u53D6\u5B50\u4EFB\u52A1\uFF08b\uFF09\u6216\u5C06\u5176\u529F\u80FD\u5212\u5206\u4E3A\u4E24\u4E2A\u5355\u72EC\u7684\u65B9\u6CD5\uFF08c\uFF09\u8FDB\u884C\u62C6\u5206\u3002\u5982\u679C\u65B9\u6CD5\u5BFC\u81F4\u6D45\u5C42\u65B9\u6CD5\uFF0C\u5219\u4E0D\u5E94\u62C6\u5206\u8BE5\u65B9\u6CD5\uFF0C\u5982\uFF08d\uFF09\u6240\u793A\u3002</p></blockquote><p>When designing methods, the most important goal is to provide clean and simple abstractions. Each method should do one thing and do it completely. The method should have a clean and simple interface, so that users don\u2019t need to have much information in their heads in order to use it correctly. The method should be deep: its interface should be much simpler than its implementation. If a method has all of these properties, then it probably doesn\u2019t matter whether it is long or not.</p><blockquote><p>\u8BBE\u8BA1\u65B9\u6CD5\u65F6\uFF0C\u6700\u91CD\u8981\u7684\u76EE\u6807\u662F\u63D0\u4F9B\u7B80\u6D01\u7684\u62BD\u8C61\u3002\u6BCF\u79CD\u65B9\u6CD5\u90FD\u5E94\u8BE5\u505A\u4E00\u4EF6\u4E8B\u5E76\u4E14\u5B8C\u5168\u505A\u5230\u8FD9\u4E00\u70B9\u3002\u8BE5\u65B9\u6CD5\u5E94\u8BE5\u5177\u6709\u7B80\u6D01\u7684\u754C\u9762\uFF0C\u4EE5\u4FBF\u7528\u6237\u65E0\u9700\u8D39\u795E\u5C31\u53EF\u4EE5\u6B63\u786E\u4F7F\u7528\u5B83\u3002\u8BE5\u65B9\u6CD5\u5E94\u8BE5\u5F88\u6DF1\uFF1A\u5176\u63A5\u53E3\u5E94\u8BE5\u6BD4\u5176\u5B9E\u73B0\u7B80\u5355\u5F97\u591A\u3002\u5982\u679C\u4E00\u4E2A\u65B9\u6CD5\u5177\u6709\u6240\u6709\u8FD9\u4E9B\u5C5E\u6027\uFF0C\u90A3\u4E48\u5B83\u7684\u957F\u77ED\u4E0E\u5426\u53EF\u80FD\u65E0\u5173\u7D27\u8981\u3002</p></blockquote><p>Splitting up a method only makes sense if it results in cleaner abstractions, overall. There are two ways to do this, which are diagrammed in Figure 9.3. The best way is by factoring out a subtask into a separate method, as shown in Figure 9.3(b). The subdivision results in a child method containing the subtask and a parent method containing the remainder of the original method; the parent invokes the child. The interface of the new parent method is the same as the original method. This form of subdivision makes sense if there is a subtask that is cleanly separable from the rest of the original method, which means (a) someone reading the child method doesn\u2019t need to know anything about the parent method and (b) someone reading the parent method doesn\u2019t need to understand the implementation of the child method. Typically this means that the child method is relatively general-purpose: it could conceivably be used by other methods besides the parent. If you make a split of this form and then find yourself flipping back and forth between the parent and child to understand how they work together, that is a red flag (\u201CConjoined Methods\u201D) indicating that the split was probably a bad idea.</p><blockquote><p>\u603B\u4F53\u800C\u8A00\uFF0C\u62C6\u5206\u65B9\u6CD5\u53EA\u6709\u5728\u5176\u5BFC\u81F4\u66F4\u62BD\u8C61\u7684\u62BD\u8C61\u65F6\u624D\u6709\u610F\u4E49\u3002\u6709\u4E24\u79CD\u65B9\u6CD5\u53EF\u4EE5\u505A\u5230\u8FD9\u4E00\u70B9\uFF0C\u5982\u56FE 9.3 \u6240\u793A\u3002\u6700\u4F73\u65B9\u6CD5\u662F\u5C06\u5B50\u4EFB\u52A1\u5206\u89E3\u4E3A\u5355\u72EC\u7684\u65B9\u6CD5\uFF0C\u5982\u56FE 9.3\uFF08b\uFF09\u6240\u793A\u3002\u8BE5\u7EC6\u5206\u4EA7\u751F\u4E00\u4E2A\u5305\u542B\u8BE5\u5B50\u4EFB\u52A1\u7684\u5B50\u65B9\u6CD5\u548C\u4E00\u4E2A\u5305\u542B\u539F\u59CB\u65B9\u6CD5\u5176\u4F59\u90E8\u5206\u7684\u7236\u65B9\u6CD5\uFF1B\u7236\u7EA7\u8C03\u7528\u5B50\u7EA7\u3002\u65B0\u7684\u7236\u65B9\u6CD5\u7684\u63A5\u53E3\u4E0E\u539F\u59CB\u65B9\u6CD5\u7684\u63A5\u53E3\u76F8\u540C\u3002\u5982\u679C\u5B58\u5728\u4E00\u4E2A\u4E0E\u539F\u59CB\u65B9\u6CD5\u7684\u5176\u4F59\u90E8\u5206\u5B8C\u5168\u53EF\u5206\u79BB\u7684\u5B50\u4EFB\u52A1\uFF0C\u5219\u8FD9\u79CD\u7EC6\u5206\u5F62\u5F0F\u662F\u6709\u610F\u4E49\u7684\uFF0C\u8FD9\u610F\u5473\u7740\uFF08a\uFF09\u8BFB\u53D6\u5B50\u65B9\u6CD5\u7684\u67D0\u4EBA\u4E0D\u9700\u8981\u4E86\u89E3\u6709\u5173\u7236\u65B9\u6CD5\u7684\u4EFB\u4F55\u4FE1\u606F\uFF0C\u4EE5\u53CA\uFF08b\uFF09\u67D0\u4EBA\u5728\u9605\u8BFB\u7236\u65B9\u6CD5\u4E0D\u9700\u8981\u4E86\u89E3\u5B50\u65B9\u6CD5\u7684\u5B9E\u73B0\u3002\u901A\u5E38\uFF0C\u8FD9\u610F\u5473\u7740\u5B50\u65B9\u6CD5\u662F\u76F8\u5BF9\u901A\u7528\u7684\uFF1A\u53EF\u4EE5\u60F3\u8C61\u9664\u7236\u65B9\u6CD5\u5916\uFF0C\u5176\u4ED6\u65B9\u6CD5\u4E5F\u53EF\u4EE5\u4F7F\u7528\u5B83\u3002\u5982\u679C\u60A8\u5BF9\u8FD9\u79CD\u5F62\u5F0F\u8FDB\u884C\u62C6\u5206\uFF0C\u7136\u540E\u53D1\u73B0\u81EA\u5DF1\u5728\u7236\u6BCD\u548C\u5B69\u5B50\u4E4B\u95F4\u6765\u56DE\u7FFB\u8F6C\u4EE5\u4E86\u89E3\u4ED6\u4EEC\u5982\u4F55\u4E00\u8D77\u5DE5\u4F5C\uFF0C\u90A3\u662F\u4E00\u4E2A\u7EA2\u8272\u6807\u8BB0\uFF08\u201C\u8054\u5408\u65B9\u6CD5\u201D\uFF09\uFF0C\u8868\u660E\u62C6\u5206\u53EF\u80FD\u4E0D\u662F\u4E00\u4E2A\u597D\u4E3B\u610F\u3002</p></blockquote><p>The second way to break up a method is to split it into two separate methods, each visible to callers of the original method, as in Figure 9.3(c). This makes sense if the original method had an overly complex interface because it tried to do multiple things that were not closely related. If this is the case, it may be possible to divide the method\u2019s functionality into two or more smaller methods, each of which has only a part of the original method\u2019s functionality. If you make a split like this, the interface for each of the resulting methods should be simpler than the interface of the original method. Ideally, most callers should only need to invoke one of the two new methods; if callers must invoke both of the new methods, then that adds complexity, which makes it less likely that the split is a good idea. The new methods will be more focused in what they do. It is a good sign if the new methods are more general-purpose than the original method (i.e., you can imagine using them separately in other situations).</p><blockquote><p>\u5206\u89E3\u65B9\u6CD5\u7684\u7B2C\u4E8C\u79CD\u65B9\u6CD5\u662F\u5C06\u5176\u62C6\u5206\u4E3A\u4E24\u4E2A\u5355\u72EC\u7684\u65B9\u6CD5\uFF0C\u6BCF\u4E2A\u65B9\u6CD5\u5BF9\u539F\u59CB\u65B9\u6CD5\u7684\u8C03\u7528\u8005\u53EF\u89C1\uFF0C\u5982\u56FE 9.3\uFF08c\uFF09\u6240\u793A\u3002\u5982\u679C\u539F\u59CB\u65B9\u6CD5\u7684\u63A5\u53E3\u8FC7\u4E8E\u590D\u6742\uFF0C\u8FD9\u662F\u6709\u9053\u7406\u7684\uFF0C\u56E0\u4E3A\u8BE5\u63A5\u53E3\u8BD5\u56FE\u6267\u884C\u4E0D\u5BC6\u5207\u76F8\u5173\u7684\u591A\u9879\u64CD\u4F5C\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u53EF\u4EE5\u5C06\u65B9\u6CD5\u7684\u529F\u80FD\u5212\u5206\u4E3A\u4E24\u4E2A\u6216\u66F4\u591A\u4E2A\u8F83\u5C0F\u7684\u65B9\u6CD5\uFF0C\u6BCF\u4E2A\u65B9\u6CD5\u4EC5\u5177\u6709\u539F\u59CB\u65B9\u6CD5\u529F\u80FD\u7684\u4E00\u90E8\u5206\u3002\u5982\u679C\u8FDB\u884C\u8FD9\u6837\u7684\u62C6\u5206\uFF0C\u5219\u6BCF\u4E2A\u7ED3\u679C\u65B9\u6CD5\u7684\u63A5\u53E3\u5E94\u8BE5\u6BD4\u539F\u59CB\u65B9\u6CD5\u7684\u63A5\u53E3\u66F4\u7B80\u5355\u3002\u7406\u60F3\u60C5\u51B5\u4E0B\uFF0C\u5927\u591A\u6570\u8C03\u7528\u8005\u53EA\u9700\u8981\u8C03\u7528\u4E24\u4E2A\u65B0\u65B9\u6CD5\u4E4B\u4E00\u5373\u53EF\uFF1B\u5982\u679C\u8C03\u7528\u8005\u5FC5\u987B\u540C\u65F6\u8C03\u7528\u8FD9\u4E24\u4E2A\u65B0\u65B9\u6CD5\uFF0C\u5219\u5C06\u589E\u52A0\u590D\u6742\u6027\uFF0C\u4ECE\u800C\u964D\u4F4E\u62C6\u5206\u662F\u4E2A\u597D\u4E3B\u610F\u7684\u53EF\u80FD\u6027\u3002\u65B0\u65B9\u6CD5\u5C06\u66F4\u52A0\u4E13\u6CE8\u4E8E\u5B83\u4EEC\u7684\u5DE5\u4F5C\u3002\u5982\u679C\u65B0\u65B9\u6CD5\u6BD4\u539F\u59CB\u65B9\u6CD5\u66F4\u5177\u901A\u7528\u6027\uFF0C\u90A3\u4E48\u8FD9\u662F\u4E00\u4E2A\u597D\u5146\u5934\uFF08\u4F8B\u5982\uFF0C\u60A8\u53EF\u4EE5\u60F3\u8C61\u5728\u5176\u4ED6\u60C5\u51B5\u4E0B\u5355\u72EC\u4F7F\u7528\u5B83\u4EEC\uFF09\u3002</p></blockquote><p>Splits of the form shown in Figure 9.3(c) don\u2019t make sense very often, because they result in callers having to deal with multiple methods instead of one. When you split this way, you run the risk of ending up with several shallow methods, as in Figure 9.3(d). If the caller has to invoke each of the separate methods, passing state back and forth between them, then splitting is not a good idea. If you\u2019re considering a split like the one in Figure 9.3(c), you should judge it based on whether it simplifies things for callers.</p><blockquote><p>\u56FE 9.3\uFF08c\uFF09\u6240\u793A\u5F62\u5F0F\u7684\u62C6\u5206\u5E76\u4E0D\u662F\u5F88\u6709\u610F\u4E49\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u5BFC\u81F4\u8C03\u7528\u8005\u4E0D\u5F97\u4E0D\u5904\u7406\u591A\u4E2A\u65B9\u6CD5\u800C\u4E0D\u662F\u4E00\u4E2A\u65B9\u6CD5\u3002\u5F53\u60A8\u4EE5\u8FD9\u79CD\u65B9\u5F0F\u62C6\u5206\u65F6\uFF0C\u60A8\u53EF\u80FD\u4F1A\u9047\u5230\u51E0\u79CD\u6D45\u5C42\u65B9\u6CD5\u7684\u98CE\u9669\uFF0C\u5982\u56FE 9.3\uFF08d\uFF09\u6240\u793A\u3002\u5982\u679C\u8C03\u7528\u8005\u5FC5\u987B\u8C03\u7528\u6BCF\u4E2A\u5355\u72EC\u7684\u65B9\u6CD5\uFF0C\u5E76\u5728\u5B83\u4EEC\u4E4B\u95F4\u6765\u56DE\u4F20\u9012\u72B6\u6001\uFF0C\u5219\u62C6\u5206\u4E0D\u662F\u4E00\u4E2A\u597D\u4E3B\u610F\u3002\u5982\u679C\u60A8\u6B63\u5728\u8003\u8651\u50CF\u56FE 9.3\uFF08c\uFF09\u6240\u793A\u7684\u62C6\u5206\uFF0C\u5219\u5E94\u57FA\u4E8E\u5B83\u662F\u5426\u7B80\u5316\u4E86\u547C\u53EB\u8005\u7684\u60C5\u51B5\u6765\u8FDB\u884C\u5224\u65AD\u3002</p></blockquote><p>There are also situations where a system can be made simpler by joining methods together. For example, joining methods might replace two shallow methods with one deeper method; it might eliminate duplication of code; it might eliminate dependencies between the original methods, or intermediate data structures; it might result in better encapsulation, so that knowledge that was previously present in multiple places is now isolated in a single place; or it might result in a simpler interface, as discussed in Section 9.2.</p><blockquote><p>\u5728\u67D0\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u901A\u8FC7\u5C06\u65B9\u6CD5\u7ED3\u5408\u5728\u4E00\u8D77\u53EF\u4EE5\u7B80\u5316\u7CFB\u7EDF\u3002\u4F8B\u5982\uFF0C\u8FDE\u63A5\u65B9\u6CD5\u53EF\u4EE5\u7528\u4E00\u79CD\u66F4\u6DF1\u7684\u65B9\u6CD5\u4EE3\u66FF\u4E24\u79CD\u6D45\u7684\u65B9\u6CD5\u3002\u5B83\u53EF\u4EE5\u6D88\u9664\u91CD\u590D\u7684\u4EE3\u7801\uFF1B\u5B83\u53EF\u4EE5\u6D88\u9664\u539F\u59CB\u65B9\u6CD5\u6216\u4E2D\u95F4\u6570\u636E\u7ED3\u6784\u4E4B\u95F4\u7684\u4F9D\u8D56\u5173\u7CFB\uFF1B\u5B83\u53EF\u80FD\u5BFC\u81F4\u66F4\u597D\u7684\u5C01\u88C5\uFF0C\u4ECE\u800C\u4F7F\u4EE5\u524D\u5728\u591A\u4E2A\u4F4D\u7F6E\u5B58\u5728\u7684\u77E5\u8BC6\u73B0\u5728\u88AB\u9694\u79BB\u5728\u4E00\u4E2A\u4F4D\u7F6E\uFF1B\u5426\u5219\u53EF\u80FD\u4F1A\u5BFC\u81F4\u754C\u9762\u66F4\u7B80\u5355\uFF0C\u5982 9.2 \u8282\u6240\u8FF0\u3002</p></blockquote><p>img Red Flag: Conjoined Methods img</p><p>It should be possible to understand each method independently. If you can\u2019t understand the implementation of one method without also understanding the implementation of another, that\u2019s a red flag. This red flag can occur in other contexts as well: if two pieces of code are physically separated, but each can only be understood by looking at the other, that is a red flag.</p><blockquote><p>\u5E94\u8BE5\u6709\u53EF\u80FD\u72EC\u7ACB\u5730\u7406\u89E3\u6BCF\u79CD\u65B9\u6CD5\u3002\u5982\u679C\u60A8\u4E0D\u80FD\u4E0D\u7406\u89E3\u53E6\u4E00\u79CD\u65B9\u6CD5\u7684\u5B9E\u73B0\u800C\u65E0\u6CD5\u7406\u89E3\u4E00\u79CD\u65B9\u6CD5\u7684\u5B9E\u73B0\uFF0C\u90A3\u5C31\u662F\u4E00\u4E2A\u5371\u9669\u4FE1\u53F7\u3002\u8BE5\u5371\u9669\u4FE1\u53F7\u4E5F\u53EF\u4EE5\u5728\u5176\u4ED6\u60C5\u51B5\u4E0B\u53D1\u751F\uFF1A\u5982\u679C\u4E24\u6BB5\u4EE3\u7801\u5728\u7269\u7406\u4E0A\u662F\u5206\u5F00\u7684\uFF0C\u4F46\u662F\u53EA\u6709\u901A\u8FC7\u67E5\u770B\u53E6\u4E00\u6BB5\u4EE3\u7801\u624D\u80FD\u7406\u89E3\u5B83\u4EEC\uFF0C\u8FD9\u5C31\u662F\u5371\u9669\u4FE1\u53F7\u3002</p></blockquote><h2 id="_9-9-conclusion-\u7ED3\u8BBA" tabindex="-1"><a class="header-anchor" href="#_9-9-conclusion-\u7ED3\u8BBA" aria-hidden="true">#</a> 9.9 Conclusion \u7ED3\u8BBA</h2><p>The decision to split or join modules should be based on complexity. Pick the structure that results in the best information hiding, the fewest dependencies, and the deepest interfaces.</p><blockquote><p>\u62C6\u5206\u6216\u52A0\u5165\u6A21\u5757\u7684\u51B3\u5B9A\u5E94\u57FA\u4E8E\u590D\u6742\u6027\u3002\u9009\u62E9\u4E00\u79CD\u7ED3\u6784\uFF0C\u5B83\u53EF\u4EE5\u9690\u85CF\u6700\u4F73\u7684\u4FE1\u606F\uFF0C\u6700\u5C11\u7684\u4F9D\u8D56\u5173\u7CFB\u548C\u6700\u6DF1\u7684\u63A5\u53E3\u3002</p></blockquote>',120);function r(l,p){return i}var h=e(s,[["render",r],["__file","ch09.html.vue"]]);export{h as default};
