import{_ as e,e as t}from"./app.b848372c.js";const o={},s=t('<h1 id="\u7B2C-1-\u7AE0-\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#\u7B2C-1-\u7AE0-\u4ECB\u7ECD" aria-hidden="true">#</a> \u7B2C 1 \u7AE0 \u4ECB\u7ECD</h1><blockquote><p>Chapter 1 Introduction (It\u2019s All About Complexity)</p></blockquote><blockquote><p>Writing computer software is one of the purest creative activities in the history of the human race. Programmers aren\u2019t bound by practical limitations such as the laws of physics; we can create exciting virtual worlds with behaviors that could never exist in the real world. Programming doesn\u2019t require great physical skill or coordination, like ballet or basketball. All programming requires is a creative mind and the ability to organize your thoughts. If you can visualize a system, you can probably implement it in a computer program.</p></blockquote><p>\u7F16\u5199\u8BA1\u7B97\u673A\u8F6F\u4EF6\u662F\u4EBA\u7C7B\u5386\u53F2\u4E0A\u6700\u7EAF\u7CB9\u7684\u521B\u4F5C\u6D3B\u52A8\u4E4B\u4E00\u3002\u7A0B\u5E8F\u5458\u4E0D\u53D7\u8BF8\u5982\u7269\u7406\u5B9A\u5F8B\u7B49\u5B9E\u9645\u9650\u5236\u7684\u7EA6\u675F\u3002\u6211\u4EEC\u53EF\u4EE5\u7528\u73B0\u5B9E\u4E16\u754C\u4E2D\u6C38\u8FDC\u4E0D\u4F1A\u5B58\u5728\u7684\u884C\u4E3A\u521B\u5EFA\u4EE4\u4EBA\u5174\u594B\u7684\u865A\u62DF\u4E16\u754C\u3002\u7F16\u7A0B\u4E0D\u9700\u8981\u5F88\u9AD8\u7684\u8EAB\u4F53\u6280\u80FD\u6216\u534F\u8C03\u80FD\u529B\uFF0C\u4F8B\u5982\u82AD\u857E\u6216\u7BEE\u7403\u3002\u6240\u6709\u7F16\u7A0B\u90FD\u9700\u8981\u5177\u6709\u521B\u9020\u529B\u7684\u5934\u8111\u548C\u7EC4\u7EC7\u601D\u60F3\u7684\u80FD\u529B\u3002\u5982\u679C\u60A8\u80FD\u591F\u5C06\u4E00\u4E2A\u7CFB\u7EDF\u5177\u8C61\u5316\uFF0C\u5C31\u53EF\u4EE5\u5728\u8BA1\u7B97\u673A\u7A0B\u5E8F\u4E2D\u5C06\u5B83\u5B9E\u73B0\u3002</p><blockquote><p>This means that the greatest limitation in writing software is our ability to understand the systems we are creating. As a program evolves and acquires more features, it becomes complicated, with subtle dependencies between its components. Over time, complexity accumulates, and it becomes harder and harder for programmers to keep all of the relevant factors in their minds as they modify the system. This slows down development and leads to bugs, which slow development even more and add to its cost. Complexity increases inevitably over the life of any program. The larger the program, and the more people that work on it, the more difficult it is to manage complexity.</p></blockquote><p>\u8FD9\u610F\u5473\u7740\u7F16\u5199\u8F6F\u4EF6\u7684\u6700\u5927\u9650\u5236\u662F\u6211\u4EEC\u4E86\u89E3\u6240\u521B\u5EFA\u7CFB\u7EDF\u7684\u80FD\u529B\u3002\u968F\u7740\u7A0B\u5E8F\u7684\u53D1\u5C55\u548C\u83B7\u5F97\u66F4\u591A\u529F\u80FD\uFF0C\u5B83\u53D8\u5F97\u590D\u6742\uFF0C\u5176\u7EC4\u4EF6\u4E4B\u95F4\u5177\u6709\u5FAE\u5999\u7684\u4F9D\u8D56\u6027\u3002\u968F\u7740\u65F6\u95F4\u7684\u6D41\u901D\uFF0C\u590D\u6742\u6027\u4E0D\u65AD\u7D2F\u79EF\uFF0C\u7A0B\u5E8F\u5458\u5728\u4FEE\u6539\u7CFB\u7EDF\u65F6\u5C06\u6240\u6709\u76F8\u5173\u56E0\u7D20\u7262\u8BB0\u5728\u5FC3\u4E2D\u53D8\u5F97\u8D8A\u6765\u8D8A\u96BE\u3002\u8FD9\u4F1A\u51CF\u6162\u5F00\u53D1\u901F\u5EA6\u5E76\u5BFC\u81F4\u9519\u8BEF\uFF0C\u4ECE\u800C\u8FDB\u4E00\u6B65\u5EF6\u7F13\u5F00\u53D1\u901F\u5EA6\u5E76\u589E\u52A0\u6210\u672C\u3002\u5728\u4EFB\u4F55\u7A0B\u5E8F\u7684\u751F\u547D\u5468\u671F\u4E2D\uFF0C\u590D\u6742\u6027\u90FD\u4F1A\u4E0D\u53EF\u907F\u514D\u5730\u589E\u52A0\u3002\u7A0B\u5E8F\u8D8A\u5927\uFF0C\u5DE5\u4F5C\u7684\u4EBA\u8D8A\u591A\uFF0C\u7BA1\u7406\u590D\u6742\u6027\u5C31\u8D8A\u56F0\u96BE\u3002</p><blockquote><p>Good development tools can help us deal with complexity, and many great tools have been created over the last several decades. But there is a limit to what we can do with tools alone. If we want to make it easier to write software, so that we can build more powerful systems more cheaply, we must find ways to make software simpler. Complexity will still increase over time, in spite of our best efforts, but simpler designs allow us to build larger and more powerful systems before complexity becomes overwhelming.</p></blockquote><p>\u597D\u7684\u5F00\u53D1\u5DE5\u5177\u53EF\u4EE5\u5E2E\u52A9\u6211\u4EEC\u5E94\u5BF9\u590D\u6742\u6027\uFF0C\u5E76\u4E14\u5728\u8FC7\u53BB\u7684\u51E0\u5341\u5E74\u4E2D\u5DF2\u7ECF\u521B\u5EFA\u4E86\u8BB8\u591A\u51FA\u8272\u7684\u5DE5\u5177\u3002\u4F46\u662F\uFF0C\u4EC5\u51ED\u5DE5\u5177\u6211\u4EEC\u53EA\u80FD\u505A\u4E9B\u4E8B\u60C5\u3002\u5982\u679C\u6211\u4EEC\u60F3\u7B80\u5316\u7F16\u5199\u8F6F\u4EF6\u7684\u8FC7\u7A0B\uFF0C\u4ECE\u800C\u53EF\u4EE5\u66F4\u4FBF\u5B9C\u5730\u6784\u5EFA\u529F\u80FD\u66F4\u5F3A\u5927\u7684\u7CFB\u7EDF\uFF0C\u5219\u5FC5\u987B\u627E\u5230\u7B80\u5316\u8F6F\u4EF6\u7684\u65B9\u6CD5\u3002\u5C3D\u7BA1\u6211\u4EEC\u5C3D\u4E86\u6700\u5927\u52AA\u529B\uFF0C\u4F46\u590D\u6742\u5EA6\u4ECD\u4F1A\u968F\u7740\u65F6\u95F4\u7684\u63A8\u79FB\u800C\u589E\u52A0\uFF0C\u4F46\u662F\u66F4\u7B80\u5355\u7684\u8BBE\u8BA1\u4F7F\u6211\u4EEC\u80FD\u591F\u5728\u590D\u6742\u6027\u538B\u5012\u6027\u4F18\u52BF\u4E4B\u524D\u6784\u5EFA\u66F4\u5927\uFF0C\u529F\u80FD\u66F4\u5F3A\u5927\u7684\u7CFB\u7EDF\u3002</p><blockquote><p>There are two general approaches to fighting complexity, both of which will be discussed in this book. The first approach is to eliminate complexity by making code simpler and more obvious. For example, complexity can be reduced by eliminating special cases or using identifiers in a consistent fashion.</p></blockquote><p>\u6709\u4E24\u79CD\u89E3\u51B3\u590D\u6742\u6027\u7684\u901A\u7528\u65B9\u6CD5\uFF0C\u8FD9\u4E24\u79CD\u65B9\u6CD5\u90FD\u5C06\u5728\u672C\u4E66\u4E2D\u8FDB\u884C\u8BA8\u8BBA\u3002\u7B2C\u4E00\u79CD\u65B9\u6CD5\u662F\u901A\u8FC7<strong>\u4F7F\u4EE3\u7801\u66F4\u7B80\u5355\u548C\u66F4\u660E\u663E</strong>\u6765\u6D88\u9664\u590D\u6742\u6027\u3002\u4F8B\u5982\uFF0C\u53EF\u4EE5\u901A\u8FC7\u6D88\u9664\u7279\u6B8A\u60C5\u51B5\u6216\u4EE5\u4E00\u81F4\u7684\u65B9\u5F0F\u4F7F\u7528\u6807\u8BC6\u7B26\u6765\u964D\u4F4E\u590D\u6742\u6027\u3002</p><blockquote><p>The second approach to complexity is to encapsulate it, so that programmers can work on a system without being exposed to all of its complexity at once. This approach is called modular design. In modular design, a software system is divided up into modules, such as classes in an object-oriented language. The modules are designed to be relatively independent of each other, so that a programmer can work on one module without having to understand the details of other modules.</p></blockquote><p>\u89E3\u51B3\u590D\u6742\u6027\u7684\u7B2C\u4E8C\u79CD\u65B9\u6CD5\u662F<strong>\u5C01\u88C5\u5B83</strong>\uFF0C\u4EE5\u4FBF\u7A0B\u5E8F\u5458\u53EF\u4EE5\u5728\u7CFB\u7EDF\u4E0A\u5DE5\u4F5C\u800C<strong>\u4E0D\u4F1A\u7ACB\u5373\u66B4\u9732\u5176\u6240\u6709\u590D\u6742\u6027</strong>\u3002\u8FD9\u79CD\u65B9\u6CD5\u79F0\u4E3A\u6A21\u5757\u5316\u8BBE\u8BA1\u3002\u5728\u6A21\u5757\u5316\u8BBE\u8BA1\u4E2D\uFF0C\u8F6F\u4EF6\u7CFB\u7EDF\u5206\u4E3A\u6A21\u5757\uFF0C\u4F8B\u5982\u9762\u5411\u5BF9\u8C61\u8BED\u8A00\u7684\u7C7B\u3002\u8FD9\u4E9B\u6A21\u5757\u88AB\u8BBE\u8BA1\u4E3A\u5F7C\u6B64\u76F8\u5BF9\u72EC\u7ACB\uFF08\u4F4E\u8026\u5408\uFF09\uFF0C\u4EE5\u4FBF\u7A0B\u5E8F\u5458\u53EF\u4EE5<strong>\u5728\u4E00\u4E2A\u6A21\u5757\u4E0A\u5DE5\u4F5C\u800C\u4E0D\u5FC5\u4E86\u89E3\u5176\u4ED6\u6A21\u5757\u7684\u7EC6\u8282</strong>\u3002</p><blockquote><p>Because software is so malleable, software design is a continuous process that spans the entire lifecycle of a software system; this makes software design different from the design of physical systems such as buildings, ships, or bridges. However, software design has not always been viewed this way. For much of the history of programming, design was concentrated at the beginning of a project, as it is in other engineering disciplines. The extreme of this approach is called the waterfall model, in which a project is divided into discrete phases such as requirements definition, design, coding, testing, and maintenance. In the waterfall model, each phase completes before the next phase starts; in many cases different people are responsible for each phase. The entire system is designed at once, during the design phase. The design is frozen at the end of this phase, and the role of the subsequent phases is to flesh out and implement that design.</p></blockquote><p>\u7531\u4E8E\u8F6F\u4EF6\u5177\u6709\u5F88\u597D\u7684\u5EF6\u5C55\u6027\uFF0C\u56E0\u6B64\u8F6F\u4EF6\u8BBE\u8BA1\u662F\u4E00\u4E2A\u8D2F\u7A7F\u8F6F\u4EF6\u7CFB\u7EDF\u6574\u4E2A\u751F\u547D\u5468\u671F\u7684\u8FDE\u7EED\u8FC7\u7A0B\u3002\u8FD9\u4F7F\u5F97\u8F6F\u4EF6\u8BBE\u8BA1\u4E0E\u8BF8\u5982\u5EFA\u7B51\u7269\uFF0C\u8239\u8236\u6216\u6865\u6881\u7684\u7269\u7406\u7CFB\u7EDF\u7684\u8BBE\u8BA1\u4E0D\u540C\u3002\u4F46\u662F\uFF0C\u5E76\u975E\u603B\u662F\u4EE5\u8FD9\u79CD\u65B9\u5F0F\u67E5\u770B\u8F6F\u4EF6\u8BBE\u8BA1\u3002\u5728\u7F16\u7A0B\u7684\u5927\u90E8\u5206\u5386\u53F2\u4E2D\uFF0C\u8BBE\u8BA1\u90FD\u96C6\u4E2D\u5728\u9879\u76EE\u7684\u5F00\u59CB\uFF0C\u5C31\u50CF\u5176\u4ED6\u5DE5\u7A0B\u5B66\u79D1\u4E00\u6837\u3002\u8FD9\u79CD\u65B9\u6CD5\u7684\u6781\u7AEF\u79F0\u4E3A\u7011\u5E03\u6A21\u578B\uFF0C\u8BE5\u6A21\u578B\u5C06\u9879\u76EE\u5212\u5206\u4E3A\u79BB\u6563\u7684\u9636\u6BB5\uFF0C\u4F8B\u5982\u9700\u6C42\u5B9A\u4E49\uFF0C\u8BBE\u8BA1\uFF0C\u7F16\u7801\uFF0C\u6D4B\u8BD5\u548C\u7EF4\u62A4\u3002\u5728\u7011\u5E03\u6A21\u578B\u4E2D\uFF0C\u6BCF\u4E2A\u9636\u6BB5\u90FD\u5728\u4E0B\u4E00\u9636\u6BB5\u5F00\u59CB\u4E4B\u524D\u5B8C\u6210\uFF1B\u5728\u8BB8\u591A\u60C5\u51B5\u4E0B\uFF0C\u6BCF\u4E2A\u9636\u6BB5\u90FD\u7531\u4E0D\u540C\u7684\u4EBA\u8D1F\u8D23\u3002\u5728\u8BBE\u8BA1\u9636\u6BB5\uFF0C\u7ACB\u5373\u8BBE\u8BA1\u6574\u4E2A\u7CFB\u7EDF\u3002</p><blockquote><p>Unfortunately, the waterfall model rarely works well for software. Software systems are intrinsically more complex than physical systems; it isn\u2019t possible to visualize the design for a large software system well enough to understand all of its implications before building anything. As a result, the initial design will have many problems. The problems do not become apparent until implementation is well underway. However, the waterfall model is not structured to accommodate major design changes at this point (for example, the designers may have moved on to other projects). Thus, developers try to patch around the problems without changing the overall design. This results in an explosion of complexity.</p></blockquote><p>\u4E0D\u5E78\u7684\u662F\uFF0C\u7011\u5E03\u6A21\u578B\u5F88\u5C11\u9002\u7528\u4E8E\u8F6F\u4EF6\u3002\u8F6F\u4EF6\u7CFB\u7EDF\u672C\u8D28\u4E0A\u6BD4\u7269\u7406\u7CFB\u7EDF\u590D\u6742\u3002\u5728\u6784\u5EFA\u4EFB\u4F55\u4E1C\u897F\u4E4B\u524D\uFF0C\u4E0D\u53EF\u80FD\u5145\u5206\u5177\u8C61\u5316\u51FA\u5927\u578B\u8F6F\u4EF6\u7CFB\u7EDF\u7684\u8BBE\u8BA1\uFF0C\u4EE5\u4E86\u89E3\u5176\u6240\u6709\u542B\u4E49\u3002\u7ED3\u679C\uFF0C\u521D\u59CB\u8BBE\u8BA1\u5C06\u6709\u8BB8\u591A\u95EE\u9898\u3002\u5728\u5B9E\u65BD\u826F\u597D\u4E4B\u524D\uFF0C\u95EE\u9898\u4E0D\u4F1A\u53D8\u5F97\u660E\u663E\u3002\u4F46\u662F\uFF0C\u7011\u5E03\u6A21\u578B\u7684\u7ED3\u6784\u6B64\u65F6\u65E0\u6CD5\u9002\u5E94\u4E3B\u8981\u7684\u8BBE\u8BA1\u66F4\u6539\uFF08\u4F8B\u5982\uFF0C\u8BBE\u8BA1\u5E08\u53EF\u80FD\u5DF2\u8F6C\u79FB\u5230\u5176\u4ED6\u9879\u76EE\uFF09\u3002\u56E0\u6B64\uFF0C\u5F00\u53D1\u4EBA\u5458\u5C1D\u8BD5\u5728\u4E0D\u6539\u53D8\u6574\u4F53\u8BBE\u8BA1\u7684\u60C5\u51B5\u4E0B\u89E3\u51B3\u95EE\u9898\u3002\u8FD9\u5BFC\u81F4\u590D\u6742\u6027\u7684\u7206\u70B8\u5F0F\u589E\u957F\u3002</p><blockquote><p>Because of these issues, most software development projects today use an incremental approach such as agile development, in which the initial design focuses on a small subset of the overall functionality. This subset is designed, implemented, and then evaluated. Problems with the original design are discovered and corrected, then a few more features are designed, implemented and evaluated. Each iteration exposes problems with the existing design, which are fixed before the next set of features is designed. By spreading out the design in this way, problems with the initial design can be fixed while the system is still small; later features benefit from experience gained during the implementation of earlier features, so they have fewer problems.</p></blockquote><p>\u7531\u4E8E\u8FD9\u4E9B\u95EE\u9898\uFF0C\u5F53\u4ECA\u5927\u591A\u6570\u8F6F\u4EF6\u5F00\u53D1\u9879\u76EE\u90FD\u4F7F\u7528\u8BF8\u5982\u654F\u6377\u5F00\u53D1\u4E4B\u7C7B\u7684\u589E\u91CF\u65B9\u6CD5\uFF0C\u5176\u4E2D\u521D\u59CB\u8BBE\u8BA1\u7740\u91CD\u4E8E\u6574\u4F53\u529F\u80FD\u7684\u4E00\u5C0F\u90E8\u5206\u3002\u8BBE\u8BA1\uFF0C\u5B9E\u65BD\u548C\u8BC4\u4F30\u6B64\u5B50\u96C6\u3002\u53D1\u73B0\u548C\u7EA0\u6B63\u539F\u59CB\u8BBE\u8BA1\u7684\u95EE\u9898\uFF0C\u7136\u540E\u8BBE\u8BA1\uFF0C\u5B9E\u65BD\u548C\u8BC4\u4F30\u66F4\u591A\u529F\u80FD\u3002\u6BCF\u6B21\u8FED\u4EE3\u90FD\u4F1A\u66B4\u9732\u73B0\u6709\u8BBE\u8BA1\u7684\u95EE\u9898\uFF0C\u8FD9\u4E9B\u95EE\u9898\u5728\u8BBE\u8BA1\u4E0B\u4E00\u7EC4\u529F\u80FD\u4E4B\u524D\u5C31\u5DF2\u5F97\u5230\u89E3\u51B3\u3002\u901A\u8FC7\u4EE5\u8FD9\u79CD\u65B9\u5F0F\u6269\u5C55\u8BBE\u8BA1\uFF0C\u53EF\u4EE5\u5728\u7CFB\u7EDF\u4ECD\u7136\u5F88\u5C0F\u7684\u60C5\u51B5\u4E0B\u89E3\u51B3\u521D\u59CB\u8BBE\u8BA1\u7684\u95EE\u9898\u3002\u8F83\u65B0\u7684\u529F\u80FD\u53D7\u76CA\u4E8E\u8F83\u65E9\u529F\u80FD\u7684\u5B9E\u65BD\u8FC7\u7A0B\u4E2D\u83B7\u5F97\u7684\u7ECF\u9A8C\uFF0C\u56E0\u6B64\u95EE\u9898\u8F83\u5C11\u3002</p><blockquote><p>The incremental approach works for software because software is malleable enough to allow significant design changes partway through implementation. In contrast, major design changes are much more challenging for physical systems: for example, it would not be practical to change the number of towers supporting a bridge in the middle of construction.</p></blockquote><p>\u589E\u91CF\u65B9\u6CD5\u9002\u7528\u4E8E\u8F6F\u4EF6\uFF0C\u56E0\u4E3A\u8F6F\u4EF6\u5177\u6709\u8DB3\u591F\u7684\u5EF6\u5C55\u6027\uFF0C\u53EF\u4EE5\u5728\u5B9E\u65BD\u8FC7\u7A0B\u4E2D\u8FDB\u884C\u91CD\u5927\u7684\u8BBE\u8BA1\u66F4\u6539\u3002\u76F8\u6BD4\u4E4B\u4E0B\uFF0C\u5BF9\u7269\u7406\u7CFB\u7EDF\u800C\u8A00\uFF0C\u4E3B\u8981\u7684\u8BBE\u8BA1\u66F4\u6539\u66F4\u5177\u6311\u6218\u6027\uFF1A\u4F8B\u5982\uFF0C\u5728\u5EFA\u7B51\u8FC7\u7A0B\u4E2D\u66F4\u6539\u652F\u6491\u6865\u6881\u7684\u5854\u67B6\u6570\u91CF\u4E0D\u5207\u5B9E\u9645\u3002</p><blockquote><p>Incremental development means that software design is never done. Design happens continuously over the life of a system: developers should always be thinking about design issues. Incremental development also means continuous redesign. The initial design for a system or component is almost never the best one; experience inevitably shows better ways to do things. As a software developer, you should always be on the lookout for opportunities to improve the design of the system you are working on, and you should plan on spending some fraction of your time on design improvements.</p></blockquote><blockquote><p><strong>\u589E\u91CF\u5F00\u53D1\u610F\u5473\u7740\u6C38\u8FDC\u4E0D\u4F1A\u5B8C\u6210\u8F6F\u4EF6\u8BBE\u8BA1</strong>\u3002<strong>\u8BBE\u8BA1\u5728\u7CFB\u7EDF\u7684\u6574\u4E2A\u751F\u547D\u5468\u671F\u4E2D\u4E0D\u65AD\u53D1\u751F</strong>\uFF1A\u5F00\u53D1\u4EBA\u5458\u5E94\u59CB\u7EC8\u5728\u601D\u8003\u8BBE\u8BA1\u95EE\u9898\u3002\u589E\u91CF\u5F00\u53D1\u8FD8\u610F\u5473\u7740\u4E0D\u65AD\u7684\u91CD\u65B0\u8BBE\u8BA1\u3002\u7CFB\u7EDF\u6216\u7EC4\u4EF6\u7684\u521D\u59CB\u8BBE\u8BA1\u51E0\u4E4E\u4ECE\u6765\u90FD\u4E0D\u662F\u6700\u597D\u7684\u3002\u968F\u7740\u7ECF\u9A8C\u7D2F\u79EF\uFF0C\u4E0D\u53EF\u907F\u514D\u5730\u4F1A\u4EA7\u751F\u66F4\u597D\u7684\u505A\u4E8B\u65B9\u5F0F\u3002\u4F5C\u4E3A\u8F6F\u4EF6\u5F00\u53D1\u4EBA\u5458\uFF0C\u60A8\u5E94\u8BE5\u59CB\u7EC8\u5728\u5BFB\u627E\u673A\u4F1A\u6765\u6539\u8FDB\u6B63\u5728\u5F00\u53D1\u7684\u7CFB\u7EDF\u7684\u8BBE\u8BA1\uFF0C\u5E76\u4E14\u5E94\u8BE5\u8BA1\u5212\u5C06\u90E8\u5206\u65F6\u95F4\u82B1\u8D39\u5728\u8BBE\u8BA1\u6539\u8FDB\u4E0A\u3002</p></blockquote><blockquote><p>If software developers should always be thinking about design issues, and reducing complexity is the most important element of software design, then software developers should always be thinking about complexity. This book is about how to use complexity to guide the design of software throughout its lifetime.</p></blockquote><p>\u5982\u679C\u8F6F\u4EF6\u5F00\u53D1\u4EBA\u5458\u5E94\u59CB\u7EC8\u8003\u8651\u8BBE\u8BA1\u95EE\u9898\uFF0C\u800C\u964D\u4F4E\u590D\u6742\u6027\u662F\u8F6F\u4EF6\u8BBE\u8BA1\u4E2D\u6700\u91CD\u8981\u7684\u8981\u7D20\uFF0C\u5219\u8F6F\u4EF6\u5F00\u53D1\u4EBA\u5458\u5E94\u59CB\u7EC8\u8003\u8651\u590D\u6742\u6027\u3002\u8FD9\u672C\u4E66\u662F\u5173\u4E8E\u5982\u4F55\u4F7F\u7528\u590D\u6742\u6027\u6765\u6307\u5BFC\u8F6F\u4EF6\u8BBE\u8BA1\u7684\u6574\u4E2A\u751F\u547D\u5468\u671F\u3002</p><blockquote><p>This book has two overall goals. The first is to describe the nature of software complexity: what does \u201Ccomplexity\u201D mean, why does it matter, and how can you recognize when a program has unnecessary complexity? The book\u2019s second, and more challenging, goal is to present techniques you can use during the software development process to minimize complexity. Unfortunately, there isn\u2019t a simple recipe that will guarantee great software designs. Instead, I will present a collection of higher-level concepts that border on the philosophical, such as \u201Cclasses should be deep\u201D or \u201Cdefine errors out of existence.\u201D These concepts may not immediately identify the best design, but you can use them to compare design alternatives and guide your exploration of the design space.</p></blockquote><p>\u8FD9\u672C\u4E66\u6709\u4E24\u4E2A\u603B\u4F53\u76EE\u6807\u3002\u9996\u5148\u662F\u63CF\u8FF0\u8F6F\u4EF6\u590D\u6742\u6027\u7684\u6027\u8D28\uFF1A\u201C\u590D\u6742\u6027\u201D\u662F\u4EC0\u4E48\u610F\u601D\uFF0C\u4E3A\u4EC0\u4E48\u91CD\u8981\uFF0C\u4EE5\u53CA\u5F53\u7A0B\u5E8F\u5177\u6709\u4E0D\u5FC5\u8981\u7684\u590D\u6742\u6027\u65F6\u5982\u4F55\u8BC6\u522B\uFF1F\u672C\u4E66\u7684\u7B2C\u4E8C\u4E2A\u4E5F\u662F\u66F4\u5177\u6311\u6218\u6027\u7684\u76EE\u6807\u662F\u4ECB\u7ECD\u53EF\u5728\u8F6F\u4EF6\u5F00\u53D1\u8FC7\u7A0B\u4E2D\u4F7F\u7528\u7684\u6280\u672F\uFF0C\u4EE5\u6700\u5927\u7A0B\u5EA6\u5730\u51CF\u5C11\u590D\u6742\u6027\u3002\u4E0D\u5E78\u7684\u662F\uFF0C\u6CA1\u6709\u7B80\u5355\u7684\u65B9\u6CD5\u53EF\u4EE5\u4FDD\u8BC1\u51FA\u8272\u7684\u8F6F\u4EF6\u8BBE\u8BA1\u3002\u53D6\u800C\u4EE3\u4E4B\u7684\u662F\uFF0C\u6211\u5C06\u63D0\u51FA\u4E00\u4E9B\u4E0E\u54F2\u5B66\u7D27\u5BC6\u76F8\u5173\u7684\u9AD8\u7EA7\u6982\u5FF5\uFF0C\u4F8B\u5982\u201C\u7C7B\u5E94\u8BE5\u5F88\u6DF1\u201D\u6216\u201C\u5B9A\u4E49\u4E0D\u5B58\u5728\u7684\u9519\u8BEF\u201D\u3002\u8FD9\u4E9B\u6982\u5FF5\u53EF\u80FD\u4E0D\u4F1A\u7ACB\u5373\u786E\u5B9A\u6700\u4F73\u8BBE\u8BA1\uFF0C\u4F46\u60A8\u53EF\u4EE5\u4F7F\u7528\u5B83\u4EEC\u6765\u6BD4\u8F83\u8BBE\u8BA1\u5907\u9009\u65B9\u6848\u5E76\u6307\u5BFC\u60A8\u63A2\u7D22\u8BBE\u8BA1\u7A7A\u95F4\u3002</p><h2 id="_1-1-how-to-use-this-book-\u5982\u4F55\u4F7F\u7528\u8FD9\u672C\u4E66" tabindex="-1"><a class="header-anchor" href="#_1-1-how-to-use-this-book-\u5982\u4F55\u4F7F\u7528\u8FD9\u672C\u4E66" aria-hidden="true">#</a> 1.1 How to use this book \u5982\u4F55\u4F7F\u7528\u8FD9\u672C\u4E66</h2><blockquote><p>Many of the design principles described here are somewhat abstract, so they may be hard to appreciate without looking at actual code. It has been a challenge to find examples that are small enough to include in the book, yet large enough to illustrate problems with real systems (if you encounter good examples, please send them to me). Thus, this book may not be sufficient by itself for you to learn how to apply the principles.</p></blockquote><p>\u8FD9\u91CC\u63CF\u8FF0\u7684\u8BB8\u591A\u8BBE\u8BA1\u539F\u5219\u6709\u4E9B\u62BD\u8C61\uFF0C\u56E0\u6B64\u5982\u679C\u4E0D\u770B\u5B9E\u9645\u7684\u4EE3\u7801\uFF0C\u53EF\u80FD\u5F88\u96BE\u7406\u89E3\u5B83\u4EEC\u3002\u627E\u5230\u8DB3\u591F\u5C0F\u7684\u793A\u4F8B\u4EE5\u5305\u542B\u5728\u4E66\u4E2D\uFF0C\u4F46\u662F\u53C8\u8DB3\u591F\u5927\u4EE5\u8BF4\u660E\u771F\u5B9E\u7CFB\u7EDF\u7684\u95EE\u9898\u662F\u4E00\u4E2A\u6311\u6218\uFF08\u5982\u679C\u9047\u5230\u597D\u7684\u793A\u4F8B\uFF0C\u8BF7\u53D1\u7ED9\u6211\uFF09\u3002\u56E0\u6B64\uFF0C\u8FD9\u672C\u4E66\u53EF\u80FD\u4E0D\u8DB3\u4EE5\u8BA9\u60A8\u5B66\u4E60\u5982\u4F55\u5E94\u7528\u8FD9\u4E9B\u539F\u7406\u3002</p><blockquote><p>The best way to use this book is in conjunction with code reviews. When you read other people\u2019s code, think about whether it conforms to the concepts discussed here and how that relates to the complexity of the code. It\u2019s easier to see design problems in someone else\u2019s code than your own. You can use the red flags described here to identify problems and suggest improvements. Reviewing code will also expose you to new design approaches and programming techniques.</p></blockquote><p>\u4F7F\u7528\u672C\u4E66\u7684\u6700\u4F73\u65B9\u6CD5\u662F\u4E0E<strong>\u4EE3\u7801\u5BA1\u67E5</strong>\u7ED3\u5408\u4F7F\u7528\u3002\u9605\u8BFB\u5176\u4ED6\u4EBA\u7684\u4EE3\u7801\u65F6\uFF0C\u8BF7\u8003\u8651\u5B83\u662F\u5426\u7B26\u5408\u6B64\u5904\u8BA8\u8BBA\u7684\u6982\u5FF5\uFF0C\u4EE5\u53CA\u5B83\u4E0E\u4EE3\u7801\u7684\u590D\u6742\u6027\u4E4B\u95F4\u7684\u5173\u7CFB\u3002<strong>\u5728\u522B\u4EBA\u7684\u4EE3\u7801\u4E2D\u6BD4\u5728\u60A8\u7684\u4EE3\u7801\u4E2D\u66F4\u5BB9\u6613\u770B\u5230\u8BBE\u8BA1\u95EE\u9898</strong>\u3002\u60A8\u53EF\u4EE5\u4F7F\u7528\u6B64\u5904\u63CF\u8FF0\u7684\u7EA2\u8272\u6807\u8BB0\u6765\u53D1\u73B0\u95EE\u9898\u5E76\u63D0\u51FA\u6539\u8FDB\u5EFA\u8BAE\u3002\u67E5\u770B\u4EE3\u7801\u8FD8\u5C06\u4F7F\u60A8\u63A5\u89E6\u5230\u65B0\u7684\u8BBE\u8BA1\u65B9\u6CD5\u548C\u7F16\u7A0B\u6280\u672F\u3002</p><blockquote><p>One of the best ways to improve your design skills is to learn to recognize red flags: signs that a piece of code is probably more complicated than it needs to be. Over the course of this book I will point out red flags that suggest problems related to each major design issue; the most important ones are summarized at the back of the book. You can then use these when you are coding: when you see a red flag, stop and look for an alternate design that eliminates the problem. When you first try this approach, you may have to try several design alternatives before you find one that eliminates the red flag. Don\u2019t give up easily: the more alternatives you try before fixing the problem, the more you will learn. Over time, you will find that your code has fewer and fewer red flags, and your designs are cleaner and cleaner. Your experience will also show you other red flags that you can use to identify design problems (I\u2019d be happy to hear about these).</p></blockquote><p>\u6539\u5584\u8BBE\u8BA1\u6280\u80FD\u7684\u6700\u597D\u65B9\u6CD5\u4E4B\u4E00\u5C31\u662F\u5B66\u4F1A\u8BC6\u522B\u5371\u9669\u4FE1\u53F7\uFF1A\u4FE1\u53F7\u8868\u660E\u4E00\u6BB5\u4EE3\u7801\u53EF\u80FD\u6BD4\u9700\u8981\u7684\u590D\u6742\u3002\u5728\u672C\u4E66\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u6211\u5C06\u6307\u51FA\u4E00\u4E9B\u5371\u9669\u4FE1\u53F7\uFF0C\u8FD9\u4E9B\u5371\u9669\u4FE1\u53F7\u6307\u793A\u4E0E\u6BCF\u4E2A\u4E3B\u8981\u8BBE\u8BA1\u95EE\u9898\u6709\u5173\u7684\u95EE\u9898\uFF1B\u6700\u91CD\u8981\u7684\u5185\u5BB9\u603B\u7ED3\u5728\u4E66\u7684\u540E\u9762\u3002\u7136\u540E\uFF0C\u60A8\u53EF\u4EE5\u5728\u7F16\u7801\u65F6\u4F7F\u7528\u5B83\u4EEC\uFF1A\u5F53\u770B\u5230\u7EA2\u8272\u6807\u8BB0\u65F6\uFF0C\u505C\u4E0B\u6765\u5BFB\u627E\u53EF\u6D88\u9664\u95EE\u9898\u7684\u66FF\u4EE3\u8BBE\u8BA1\u3002\u5F53\u60A8\u7B2C\u4E00\u6B21\u5C1D\u8BD5\u8FD9\u79CD\u65B9\u6CD5\u65F6\uFF0C\u60A8\u53EF\u80FD\u5FC5\u987B\u5C1D\u8BD5\u51E0\u79CD\u8BBE\u8BA1\u66FF\u4EE3\u65B9\u6848\uFF0C\u7136\u540E\u624D\u80FD\u627E\u5230\u6D88\u9664\u5371\u9669\u4FE1\u53F7\u7684\u65B9\u6848\u3002\u4E0D\u8981\u8F7B\u6613\u653E\u5F03\uFF1A\u89E3\u51B3\u95EE\u9898\u4E4B\u524D\u5C1D\u8BD5\u7684\u66FF\u4EE3\u65B9\u6CD5\u8D8A\u591A\uFF0C\u60A8\u5C31\u4F1A\u5B66\u5230\u66F4\u591A\u3002\u968F\u7740\u65F6\u95F4\u7684\u6D41\u901D\uFF0C\u60A8\u4F1A\u53D1\u73B0\u4EE3\u7801\u4E2D\u7684\u5371\u9669\u4FE1\u53F7\u8D8A\u6765\u8D8A\u5C11\uFF0C\u5E76\u4E14\u60A8\u7684\u8BBE\u8BA1\u8D8A\u6765\u8D8A\u6E05\u6670\u3002</p><blockquote><p>When applying the ideas from this book, it\u2019s important to use moderation and discretion. Every rule has its exceptions, and every principle has its limits. If you take any design idea to its extreme, you will probably end up in a bad place. Beautiful designs reflect a balance between competing ideas and approaches. Several chapters have sections titled \u201CTaking it too far,\u201D which describe how to recognize when you are overdoing a good thing.</p></blockquote><p>\u5728\u5E94\u7528\u672C\u4E66\u4E2D\u7684\u601D\u60F3\u65F6\uFF0C\u52A1\u5FC5\u8981\u8282\u5236\u548C\u8C28\u614E\u3002\u6BCF\u6761\u89C4\u5219\u90FD\u6709\u4F8B\u5916\uFF0C\u6BCF\u6761\u539F\u5219\u90FD\u6709\u5176\u5C40\u9650\u6027\u3002\u5982\u679C\u60A8\u5C06\u4EFB\u4F55\u8BBE\u8BA1\u521B\u610F\u90FD\u53D1\u6325\u5230\u6781\u81F4\uFF0C\u90A3\u4E48\u60A8\u53EF\u80FD\u4F1A\u9677\u5165\u56F0\u5883\u3002\u7CBE\u7F8E\u7684\u8BBE\u8BA1\u53CD\u6620\u4E86\u76F8\u4E92\u7ADE\u4E89\u7684\u601D\u60F3\u548C\u65B9\u6CD5\u4E4B\u95F4\u7684\u5E73\u8861\u3002\u6709\u51E0\u7AE0\u7684\u6807\u9898\u4E3A\u201C\u592A\u8FC7\u5206\u201D\uFF0C\u5B83\u4EEC\u63CF\u8FF0\u4E86\u5982\u4F55\u5728\u505A\u5F97\u8FC7\u5927\u7684\u4E8B\u60C5\u4E0A\u8BC6\u522B\u81EA\u5DF1\u3002</p><blockquote><p>Almost all of the examples in this book are in Java or C++, and much of the discussion is in terms of designing classes in an object-oriented language. However, the ideas apply in other domains as well. Almost all of the ideas related to methods can also be applied to functions in a language without object-oriented features, such as C. The design ideas also apply to modules other than classes, such as subsystems or network services.</p></blockquote><p>\u672C\u4E66\u4E2D\u51E0\u4E4E\u6240\u6709\u793A\u4F8B\u90FD\u662F\u4F7F\u7528 Java \u6216 C++ \u7F16\u5199\u7684\uFF0C\u5E76\u4E14\u5927\u90E8\u5206\u8BA8\u8BBA\u90FD\u662F\u9488\u5BF9\u4EE5\u9762\u5411\u5BF9\u8C61\u7684\u8BED\u8A00\u8BBE\u8BA1\u7C7B\u7684\u3002\u4F46\u662F\uFF0C\u8FD9\u4E9B\u60F3\u6CD5\u4E5F\u9002\u7528\u4E8E\u5176\u4ED6\u9886\u57DF\u3002\u51E0\u4E4E\u6240\u6709\u4E0E\u65B9\u6CD5\u6709\u5173\u7684\u601D\u60F3\u4E5F\u53EF\u4EE5\u5E94\u7528\u4E8E\u6CA1\u6709\u9762\u5411\u5BF9\u8C61\u529F\u80FD\u7684\u8BED\u8A00\u4E2D\u7684\u529F\u80FD\uFF0C\u4F8B\u5982 C\u3002\u8BBE\u8BA1\u601D\u60F3\u8FD8\u9002\u7528\u4E8E\u9664\u7C7B\u4E4B\u5916\u7684\u6A21\u5757\uFF0C\u4F8B\u5982\u5B50\u7CFB\u7EDF\u6216\u7F51\u7EDC\u670D\u52A1\u3002</p><blockquote><p>With this background, let\u2019s discuss in more detail what causes complexity, and how to make software systems simpler.</p></blockquote><p>\u5728\u8FD9\u79CD\u80CC\u666F\u4E0B\uFF0C\u8BA9\u6211\u4EEC\u8BE6\u7EC6\u8BA8\u8BBA\u5BFC\u81F4\u590D\u6742\u6027\u7684\u539F\u56E0\u4EE5\u53CA\u5982\u4F55\u7B80\u5316\u8F6F\u4EF6\u7CFB\u7EDF\u3002</p><p>\u89E3\u51B3\u590D\u6742\u6027\u7684\u65B9\u6CD5 1.\u4F7F\u4EE3\u7801\u66F4\u7B80\u5355\u548C\u66F4\u660E\u663E\u3002 2.\u5C01\u88C5\u5B83\uFF0C\u4F7F\u7528\u65F6\u4E0D\u5FC5\u4E86\u89E3\u7EC6\u8282\u3002</p>',40);function a(i,n){return s}var l=e(o,[["render",a],["__file","ch01.html.vue"]]);export{l as default};
